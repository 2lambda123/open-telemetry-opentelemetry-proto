// Copyright 2023, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package opentelemetry.proto.profiles.v1;

import "opentelemetry/proto/common/v1/common.proto";
import "opentelemetry/proto/resource/v1/resource.proto";

// TODO(@petethepig): idea here is that we will eventually get rid of these
//   and have just version in this (profiles.proto) file
import "opentelemetry/proto/profiles/v1/alternatives/pprof/pprof.proto";
import "opentelemetry/proto/profiles/v1/alternatives/denormalized/denormalized.proto";
import "opentelemetry/proto/profiles/v1/alternatives/normalized/normalized.proto";
import "opentelemetry/proto/profiles/v1/alternatives/arrays/arrays.proto";

option csharp_namespace = "OpenTelemetry.Proto.Profiles.V1";
option java_multiple_files = true;
option java_package = "io.opentelemetry.proto.profiles.v1";
option java_outer_classname = "ProfilesProto";
option go_package = "go.opentelemetry.io/proto/otlp/profiles/v1";

// ProfilesData represents the profiles data that can be stored in a persistent storage,
// OR can be embedded by other protocols that transfer OTLP profiles data but do not
// implement the OTLP protocol.
//
// The main difference between this message and collector protocol is that
// in this message there will not be any "control" or "metadata" specific to
// OTLP protocol.
//
// When new fields are added into this message, the OTLP request MUST be updated
// as well.
message ProfilesData {
  // An array of ResourceProfiles.
  // For data coming from a single resource this array will typically contain
  // one element. Intermediary nodes that receive data from multiple origins
  // typically batch the data before forwarding further and in that case this
  // array will contain multiple elements.
  repeated ResourceProfiles resource_profiles = 1;
}


// A collection of ScopeProfiles from a Resource.
message ResourceProfiles {
  reserved 1000;

  // The resource for the profiles in this message.
  // If this field is not set then no resource info is known.
  opentelemetry.proto.resource.v1.Resource resource = 1;

  // A list of ScopeProfiles that originate from a resource.
  repeated ScopeProfiles scope_profiles = 2;

  // This schema_url applies to the data in the "resource" field. It does not apply
  // to the data in the "scope_profiles" field which have their own schema_url field.
  string schema_url = 3;
}

// A collection of Profiles produced by an InstrumentationScope.
message ScopeProfiles {
  // The instrumentation scope information for the profiles in this message.
  // Semantically when InstrumentationScope isn't set, it is equivalent with
  // an empty instrumentation scope name (unknown).
  opentelemetry.proto.common.v1.InstrumentationScope scope = 1;

  // A list of Profiles that originate from an instrumentation scope.
  repeated Profile profiles = 2;

  // This schema_url applies to all profiles and profile events in the "profiles" field.
  string schema_url = 3;
}

// A Profile represents a single profile generated by a profiler. This is similar to a pprof profile or a jfr profile. It has an ID and it is bound by time. Profile contains reference tables for stack traces, mappings, locations, functions, links, attribute sets, and string values.

// Profile embeds one or more ProfileType messages â€” this allows to represent multiple profiles of different types (e.g allocated objects and allocated bytes) in a single Profile message.
message Profile {
  // A unique identifier for a profile. The ID is a 16-byte array. An ID with
  // all zeroes is considered invalid.
  //
  // This field is required.
  bytes profile_id = 1;

  // start_time_unix_nano is the start time of the profile.
  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
  //
  // This field is semantically required and it is expected that end_time >= start_time.
  fixed64 start_time_unix_nano = 2;

  // end_time_unix_nano is the end time of the profile.
  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
  //
  // This field is semantically required and it is expected that end_time >= start_time.
  fixed64 end_time_unix_nano = 3;

  // attributes is a collection of key/value pairs. Note, global attributes
  // like server name can be set using the resource API. Examples of attributes:
  //
  //     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
  //     "/http/server_latency": 300
  //     "abc.com/myattribute": true
  //     "abc.com/score": 10.239
  //
  // The OpenTelemetry API specification further restricts the allowed value types:
  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute
  // Attribute keys MUST be unique (it is not allowed to have more than one
  // attribute with the same key).
  repeated opentelemetry.proto.common.v1.KeyValue attributes = 4;

  // dropped_attributes_count is the number of attributes that were discarded. Attributes
  // can be discarded because their keys are too long or because there are too many
  // attributes. If this value is 0, then no attributes were dropped.
  uint32 dropped_attributes_count = 5;

  // This can be original pprof or jfr encoded profile.
  bytes original_payload = 6;

  // List of stack traces included in this profile.
  repeated Stacktrace stacktraces = 7;

  // List of mappings included in this profile.
  repeated Mapping mappings = 8;

  // List of locations included in this profile.
  repeated Location locations = 9;

  // List of functions included in this profile.
  repeated Function functions = 10;

  // List of links to trace spans associated with this profile.
  repeated Link links = 11;

  // List of attribute sets in this profile.
  repeated AttributeSet attribute_sets = 12;

  // A table of string values referenced by indices.
  // The 0-th element must be an empty string ("").
  repeated string string_table = 13;

  // List of profile types included in this profile. The first item in the list is consider to be the "default" profile type.
  repeated ProfileType profile_types = 14;
}

// A pointer from a profile to a trace span. This allows for linking between profiles and traces.
message Link {
  // A unique identifier of a trace that this linked span is part of. The ID is a
  // 16-byte array.
  bytes trace_id = 1;
  // A unique identifier for the linked span. The ID is an 8-byte array.
  bytes span_id = 2;
}

// AttributeSet represents a set of attributes. It is referenced from other tables
// and is not embedded because it is common for multiple samples to have the same
// set of attributes.
message AttributeSet {
  // Attributes associated with a specific sample. [Optional].
  // Attribute keys MUST be unique (it is not allowed to have more than one
  // attribute with the same key).
  repeated opentelemetry.proto.common.v1.KeyValue attributes = 1;
  uint32 dropped_attributes_count = 2;
}

// A stack trace is a sequence of locations. Order of locations is important and goes from callers to callees. Many stacktraces will point to the same locations, and that's why we use references. It does not contain any attribute sets or links or values or timestamps. This is because of the "arrays of integers" optimization. The link between stacktraces, attribute sets, links, values and timestamps is implicit and is based on the order of the elements in the corresponding tables.
message Stacktrace {
  repeated uint32 location_indices = 1;
}

// Temporality of aggregation for the sample.
enum AggregationTemporality {
  AGGREGATION_TEMPORALITY_UNSPECIFIED = 0; // Temporality unspecified.
  AGGREGATION_TEMPORALITY_DELTA = 1;       // Delta aggregation over time.
  AGGREGATION_TEMPORALITY_CUMULATIVE = 2;  // Cumulative aggregation over time.
}

// Represents a single profile type. It implicitely creates a connection between stacktraces, links, attribute sets, values and timestamps. The connection is based on the order of the elements in the corresponding tables. This implicit connection is what is commonly refferred to as a "Sample". The length of tables must be the same. It is acceptable however for timestamps, links and attribute set tables to be empty. It is not acceptable for stacktrace or values tables to be empty.
message ProfileType {
  // Temporality of aggregation for the sample.
  AggregationTemporality aggregation_temporality = 1;

  // Profiler sample rate. [Optional].
  uint64 sample_rate = 2;

  // Index into the string table for the type of the sample.
  uint32 type_index = 3;

  // Index into the string table for the unit of the sample.
  uint32 unit_index = 4;

  // List of indices referring to stack traces in the profile's stack trace table.
  repeated uint32 stacktrace_indices = 10;

  // List of indices referring to links in the profile's link table.
  repeated uint32 link_indices = 11;

  // List of indices referring to attribute sets in the profile's attribute set table.
  repeated uint32 attribute_set_indices = 12;

  // List of values associated with the profile type.
  repeated int64 values = 13;

  // List of timestamps associated with the profile type.
  repeated uint64 timestamps = 14;
}

enum SymbolFidelity {
  SYMBOL_FIDELITY_UNSPECIFIED = 0;
  SYMBOL_FIDELITY_FULL = 1;
}

message Mapping {
  // Address at which the binary (or DLL) is loaded into memory.
  uint64 memory_start = 1;
  // The limit of the address range occupied by this mapping.
  uint64 memory_limit = 2;
  // Offset in the binary that corresponds to the first mapped address.
  uint64 file_offset = 3;
  // The object this entry is loaded from.  This can be a filename on
  // disk for the main binary and shared libraries, or virtual
  // abstractions like "[vdso]".
  uint32 filename_index = 4;  // Index into string table
  // A string that uniquely identifies a particular program version
  // with high probability. E.g., for binaries generated by GNU tools,
  // it could be the contents of the .note.gnu.build-id field.
  uint32 build_id_index = 5;  // Index into string table

  SymbolFidelity symbolic_info = 6;
  repeated uint32 attribute_set_indices = 7;
}

// Describes function and line table debug information.
message Location {
  // The id of the corresponding profile.Mapping for this location.
  // It can be unset if the mapping is unknown or not applicable for
  // this profile type.
  uint32 mapping_index = 1;
  // The instruction address for this location, if available.  It
  // should be within [Mapping.memory_start...Mapping.memory_limit]
  // for the corresponding mapping. A non-leaf address may be in the
  // middle of a call instruction. It is up to display tools to find
  // the beginning of the instruction if necessary.
  uint64 address = 2;
  // Multiple line indicates this location has inlined functions,
  // where the last entry represents the caller into which the
  // preceding entries were inlined.
  //
  // E.g., if memcpy() is inlined into printf:
  //    line[0].function_name == "memcpy"
  //    line[1].function_name == "printf"
  repeated Line line = 3;
  repeated uint32 attribute_set_indices = 5;
}

message Line {
  // The id of the corresponding profile.Function for this line.
  uint32 function_index = 1;
  // Line number in source code.
  uint32 line = 2;
}

message Function {
  // Name of the function, in human-readable form if available.
  uint32 name_index = 1;
  // Name of the function, as identified by the system.
  // For instance, it can be a C++ mangled name.
  uint32 system_name_index = 2;
  // Source file containing the function.
  uint32 filename_index = 3;
  // Line number in source file.
  uint32 start_line = 4;
}
