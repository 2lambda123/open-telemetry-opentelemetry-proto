// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package opentelemetry.proto.metrics.v1;

import "opentelemetry/proto/common/v1/common.proto";
import "opentelemetry/proto/resource/v1/resource.proto";

option java_multiple_files = true;
option java_package = "io.opentelemetry.proto.metrics.v1";
option java_outer_classname = "MetricsProto";
option go_package = "github.com/open-telemetry/opentelemetry-proto/gen/go/metrics/v1";

// A collection of InstrumentationLibraryMetrics from a Resource.
message ResourceMetrics {
  // The resource for the metrics in this message.
  // If this field is not set then no resource info is known.
  opentelemetry.proto.resource.v1.Resource resource = 1;

  // A list of metrics that originate from a resource.
  repeated InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
}

// A collection of Metrics produced by an InstrumentationLibrary.
message InstrumentationLibraryMetrics {
  // The instrumentation library information for the metrics in this message.
  // If this field is not set then no library info is known.
  opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;

  // A list of metrics that originate from an instrumentation library.
  repeated Metric metrics = 2;
}

// Metric represents a timeseries produced by a telemetry system.
//
// The data model and relation between entities is shown in the diagram below.
//
// - Metric is composed of a MetricDescriptor and a list of data points.
// - MetricDescriptor contains a list of label keys (shown horizontally).
// - Data is a list of DataPoints (shown vertically).
// - DataPoint contains a list of label values and a value.
//
//     Metric
//  +----------+         +------------------------+
//  |descriptor|-------->| MetricDescriptor       |
//  |          |         |+-----+-----+   +-----+ |
//  |          |         ||label|label|...|label| |
//  |      data|--+      ||key1 |key2 |   |keyN | |
//  +----------+  |      |+-----+-----+   +-----+ |
//                |      +------------------------+
//                |
//                |      +---------------------------+
//                |      |DataPoint 1                |
//                v      |+------+------+   +------+ |
//             +-----+   ||label |label |...|label | |
//             |  1  |-->||value1|value2|...|valueN| |
//             +-----+   |+------+------+   +------+ |
//             |  .  |   |+-----+                    |
//             |  .  |   ||value|                    |
//             |  .  |   |+-----+                    |
//             |  .  |   +---------------------------+
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |   +---------------------------+
//             |  .  |   |DataPoint M                |
//             +-----+   |+------+------+   +------+ |
//             |  M  |-->||label |label |...|label | |
//             +-----+   ||value1|value2|...|valueN| |
//                       |+------+------+   +------+ |
//                       |+-----+                    |
//                       ||value|                    |
//                       |+-----+                    |
//                       +---------------------------+
//
//-----------------------------------------------------------------------
message Metric {
  // metric_descriptor describes the Metric.
  MetricDescriptor metric_descriptor = 1;

  repeated Data data = 2;

  message Data {
    // The set of labels that uniquely identify this timeseries.
    //
    // These labels take precedence over any labels with the same key defined
    // in the metric descriptor.
    repeated opentelemetry.proto.common.v1.StringKeyValue labels = 1;

    // start_time_unix_nano is the beginning of a time interval over which
    // this data point was recorded. It MUST be represented as the UNIX Epoch
    // time in nanoseconds (nanoseconds since 00:00:00 UTC on 1 January 1970).
    // If zero, it is treated as unspecified and may be set by the receiver.
    //
    // If this data point is a part of a timeseries for an INSTANTANEOUS
    // metric, this value is ignored.
    //
    // If this data point is a part of a timeseries for a DELTA, or
    // CUMULATIVE metric, this value represents the instant before the
    // measuring time interval began (i.e. for time t to be in the measuring
    // interval than start_time_unix_nano < t <= time_unix_nano).
    //
    // This time MUST be reset so as to represent a new measurement lifetime
    // if this data point is part of a timeseries for a CUMULATIVE metric and
    // the metric value is reset to zero.
    fixed64 start_time_unix_nano = 2;

    // time_unix_nano is the time when this data point was recorded. It MUST
    // be represented as the UNIX Epoch time in nanoseconds (nanoseconds since
    // 00:00:00 UTC on 1 January 1970). If zero, it is treated as unspecified
    // and may be set by the receiver.
    fixed64 time_unix_nano = 3;

    // The following three fields are mutually exclusive and represent the
    // measured value. Only one of the following three fields can be
    // populated. The populated field MUST match the MetricDescriptor type.

    // int64_value contains the measured value for INT64 type Metrics.
    int64 int64_value = 4;

    // double_value contains the measured value for DOUBLE type Metrics.
    double double_value = 5;

    // distribution_value contains the measured value for DISTRIBUTION type
    // Metrics.
    Distribution distribution_value = 6;
  }
}

// Defines a metric type and its schema.
message MetricDescriptor {
  // name of the metric, including its DNS name prefix. It must be unique.
  string name = 1;

  // description of the metric, which can be used in documentation.
  string description = 2;

  // unit in which the metric value is reported. Follows the format
  // described by http://unitsofmeasure.org/ucum.html.
  string unit = 3;

  // Type is the type of values this metric has.
  enum Type {
    // UNDEFINED is the default Type, it MUST not be used.
    UNDEFINED = 0;

    // INT64 values are represents as signed 64-bit integers.
    //
    // A Metric of this Type MUST assign values to the int64_value field in
    // its Data.
    INT64 = 1;

    // DOUBLE values are represents as double-precision floating-point
    // numbers.
    //
    // A Metric of this Type MUST assign values to the double_value field
    // in its Data.
    DOUBLE = 2;

    // DISTRIBUTION values are statistics for an observed population
    // represented. These statistics are represented as a Distribution
    // message.
    //
    // A Metric of this Type MUST assign values to the distribution_value
    // field in its Data.
    DISTRIBUTION = 3;
  }
  Type type = 4;

  // Temporality describes how metric values are reported over time.
  enum Temporality {
    // UNSPECIFIED is the default Temporality, it MUST not be used.
    UNSPECIFIED = 0;

    // INSTANTANEOUS is a metric whose values are measured at a particular
    // instant.
    //
    // If an INSTANTANEOUS metric is reported over any time interval the
    // values are representative of distinct measurements within the
    // interval.
    INSTANTANEOUS = 1;

    // DELTA is a metric whose values are measured and successively
    // aggregated over a reporting interval. The reported value represents
    // the change from the previous interval.
    //
    // Each reported value for a DELTA metric over a time interval is
    // self-contained, the values do not depend on values in other time
    // intervals. This is unlike a CUMMULATIVE metric where values are sums
    // of all measured events in the time interval and all previously
    // measured values of the metric.
    //
    // DELTA metrics are not guaranteed to be monotonic.
    DELTA = 2;

    // CUMULATIVE is a metric whose values are measured and successively
    // added to the lifetime total of the metric.
    //
    // Each reported value for a CUMULATIVE metric is the sum of all
    // measurements up to and including that one.
    //
    // CUMULATIVE metrics are not guaranteed to be monotonic.
    CUMULATIVE = 3;
  }
  Temporality temporality = 5;

  // Monotonic describes the metric values to be entirely non-increasing,
  // or entirely non-decreasing.
  enum Monotonic {
    // UNKNOWN is the default, and means it the monotonic nature of the
    // metric values is known.
    UNKNOWN = 0;

    // NONINCREASING means all the successive metric values decrease or
    // remain constant.
    NONINCREASING = 1;

    // NONDECREASING means all the successive metric values increase or
    // remain constant.
    NONDECREASING = 2;
  }
  Monotonic monotonic = 6;

  // Domain describes the set of numbers metric values belong to if any.
  enum Domain {
    // NONE is the default, and means the metric values do not belong to any
    // particular domain other than the value type itself.
    NONE = 0;

    // NONNEGATIVE is the set of numbers greater than or equal to zero.
    NONNEGATIVE = 1;

    // NONPOSITIVE is the set of numbers less than or equal to zero.
    NONPOSITIVE  = 2;
  }
  Domain domain = 7;

  // The set of labels associated with the metric descriptor. Labels in this
  // list apply to all data points.
  repeated opentelemetry.proto.common.v1.StringKeyValue labels = 8;
}

// Distribution is a data point in a timeseries containing statistics for
// an observed population of values.
message Distribution {
  // count is the number of values in a population.
  uint64 count = 1;

  // sum is the total sum of all values in a population.
  double sum = 2;

  // minimum is the minimum observed value in a population.
  double minimum = 3;

  // maximum is the maximum observed value in a population.
  double maximum = 4;

  // Bucket contains values for a bucket.
  message Bucket {
    // The number of values in each bucket of the histogram, as described by
    // bucket_options.
    uint64 count = 1;

    // Exemplars are example points that may be used to annotate aggregated
    // Histogram values. They are metadata that gives information about a
    // particular value added to a Histogram bucket.
    message Exemplar {
      // Value of the exemplar point. It determines which bucket the exemplar belongs to.
      // If bucket_options define bounds for this bucket then this value must be within
      // the defined bounds.
      double value = 1;

      // time_unix_nano is the moment when this exemplar was recorded.
      // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
      fixed64 time_unix_nano = 2;

      // exemplar_attachments are contextual information about the example value.
      // Keys in this list must be unique.
      repeated opentelemetry.proto.common.v1.StringKeyValue attachments = 3;
    }

    // exemplar is an optional representative value of the bucket.
    Exemplar exemplar = 2;
  }

  // buckets is an optional field contains the values of histogram for each bucket.
  //
  // The sum of the values in the buckets "count" field must equal the value in the count field.
  //
  // The number of elements in buckets array must be by one greater than the
  // number of elements in bucket_bounds array.
  //
  // Note: if HistogramDataPoint.bucket_options defines bucket bounds then this field
  // must also be present and number of elements in this field must be equal to the
  // number of buckets defined by bucket_options.
  repeated Bucket buckets = 5;

  // A histogram may optionally contain the distribution of the values in the population.
  // In that case one of the option fields below and "buckets" field both must be defined.
  // Otherwise all option fields and "buckets" field must be omitted in which case the
  // distribution of values in the histogram is unknown and only the total count and sum are known.

  // explicit_bounds is the only supported bucket option currently.
  // TODO: Add more bucket options.

  // explicit_bounds specifies buckets with explicitly defined bounds for values.
  // The bucket boundaries are described by "bounds" field.
  //
  // This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
  // at index i are:
  //
  // [0, bounds[i]) for i == 0
  // [bounds[i-1], bounds[i]) for 0 < i < N-1
  // [bounds[i], +infinity) for i == N-1
  // The values in bounds array must be strictly increasing and > 0.
  //
  // Note: only [a, b) intervals are currently supported for each bucket. If we decides
  // to also support (a, b] intervals we should add support for these by defining a boolean
  // value which decides what type of intervals to use.
  repeated double explicit_bounds = 6;
}
