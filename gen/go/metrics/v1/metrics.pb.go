// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opentelemetry/proto/metrics/v1/metrics.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v11 "github.com/open-telemetry/opentelemetry-proto/gen/go/common/v1"
	v1 "github.com/open-telemetry/opentelemetry-proto/gen/go/resource/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type of the metric. It describes how the data is reported.
//
// A gauge is an instantaneous measurement of a value.
//
// A counter/cumulative measurement is a value accumulated over a time
// interval. In a time series, cumulative measurements should have the same
// start time, increasing values, until an event resets the cumulative value
// to zero and sets a new start time for the subsequent points.
type MetricDescriptor_Type int32

const (
	// Do not use this default value.
	MetricDescriptor_UNSPECIFIED MetricDescriptor_Type = 0
	// Integer gauge. The value can go both up and down over time.
	// Corresponding values are stored in Int64DataPoint.
	MetricDescriptor_GAUGE_INT64 MetricDescriptor_Type = 1
	// Floating point gauge. The value can go both up and down over time.
	// Corresponding values are stored in DoubleDataPoint.
	MetricDescriptor_GAUGE_DOUBLE MetricDescriptor_Type = 2
	// Histogram gauge measurement.
	// Used in scenarios like a snapshot of time that current items in a queue
	// have spent there.
	// Corresponding values are stored in HistogramDataPoint. The count and sum of the
	// histogram can go both up and down over time. Recorded values are always >= 0.
	MetricDescriptor_GAUGE_HISTOGRAM MetricDescriptor_Type = 3
	// Integer counter measurement. The value cannot decrease; if value is reset then
	// start_time_unixnano should also be reset.
	// Corresponding values are stored in Int64DataPoint.
	MetricDescriptor_COUNTER_INT64 MetricDescriptor_Type = 4
	// Floating point counter measurement. The value cannot decrease, if
	// resets then the start_time_unixnano should also be reset.
	// Recorded values are always >= 0.
	// Corresponding values are stored in DoubleDataPoint.
	MetricDescriptor_COUNTER_DOUBLE MetricDescriptor_Type = 5
	// Histogram cumulative measurement.
	// Corresponding values are stored in HistogramDataPoint. The count and sum of the
	// histogram cannot decrease; if values are reset then start_time_unixnano
	// should also be reset to the new start timestamp.
	MetricDescriptor_CUMULATIVE_HISTOGRAM MetricDescriptor_Type = 6
	// Summary value. Some frameworks implemented Histograms as a summary of observations
	// (usually things like request durations and response sizes). While it
	// also provides a total count of observations and a sum of all observed
	// values, it calculates configurable percentiles over a sliding time
	// window.
	// Corresponding values are stored in SummaryDataPoint.
	MetricDescriptor_SUMMARY MetricDescriptor_Type = 7
	// Minimum, maximum, sum, and count measurement. This collection of values
	// represent the range , total value, and number of measurements made
	// during a collection period.
	//
	// Corresponding values are stored in MinMaxSumCountDataPoint.
	MetricDescriptor_MIN_MAX_SUM_COUNT MetricDescriptor_Type = 8
)

var MetricDescriptor_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "GAUGE_INT64",
	2: "GAUGE_DOUBLE",
	3: "GAUGE_HISTOGRAM",
	4: "COUNTER_INT64",
	5: "COUNTER_DOUBLE",
	6: "CUMULATIVE_HISTOGRAM",
	7: "SUMMARY",
	8: "MIN_MAX_SUM_COUNT",
}

var MetricDescriptor_Type_value = map[string]int32{
	"UNSPECIFIED":          0,
	"GAUGE_INT64":          1,
	"GAUGE_DOUBLE":         2,
	"GAUGE_HISTOGRAM":      3,
	"COUNTER_INT64":        4,
	"COUNTER_DOUBLE":       5,
	"CUMULATIVE_HISTOGRAM": 6,
	"SUMMARY":              7,
	"MIN_MAX_SUM_COUNT":    8,
}

func (x MetricDescriptor_Type) String() string {
	return proto.EnumName(MetricDescriptor_Type_name, int32(x))
}

func (MetricDescriptor_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{2, 0}
}

// A collection of metrics from a Resource.
type ResourceMetrics struct {
	// A list of metrics that originate from a resource.
	Metrics []*Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// The resource for the metrics in this message.
	// If this field is not set then no resource info is known.
	Resource             *v1.Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResourceMetrics) Reset()         { *m = ResourceMetrics{} }
func (m *ResourceMetrics) String() string { return proto.CompactTextString(m) }
func (*ResourceMetrics) ProtoMessage()    {}
func (*ResourceMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{0}
}

func (m *ResourceMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceMetrics.Unmarshal(m, b)
}
func (m *ResourceMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceMetrics.Marshal(b, m, deterministic)
}
func (m *ResourceMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceMetrics.Merge(m, src)
}
func (m *ResourceMetrics) XXX_Size() int {
	return xxx_messageInfo_ResourceMetrics.Size(m)
}
func (m *ResourceMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceMetrics proto.InternalMessageInfo

func (m *ResourceMetrics) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *ResourceMetrics) GetResource() *v1.Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

// Defines a Metric which has one or more timeseries.
//
// The data model and relation between entities is shown in the diagram below.
//
// - Metric is composed of a MetricDescriptor and a list of data points.
// - MetricDescriptor contains a list of label keys (shown horizontally).
// - Data is a list of DataPoints (shown vertically).
// - DataPoint contains a list of label values and a value.
//
//     Metric
//  +----------+         +------------------------+
//  |descriptor|-------->| MetricDescriptor       |
//  |          |         |+-----+-----+   +-----+ |
//  |          |         ||label|label|...|label| |
//  |      data|--+      ||key1 |key2 |   |keyN | |
//  +----------+  |      |+-----+-----+   +-----+ |
//                |      +------------------------+
//                |
//                |      +---------------------------+
//                |      |DataPoint 1                |
//                v      |+------+------+   +------+ |
//             +-----+   ||label |label |...|label | |
//             |  1  |-->||value1|value2|...|valueN| |
//             +-----+   |+------+------+   +------+ |
//             |  .  |   |+-----+                    |
//             |  .  |   ||value|                    |
//             |  .  |   |+-----+                    |
//             |  .  |   +---------------------------+
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |   +---------------------------+
//             |  .  |   |DataPoint M                |
//             +-----+   |+------+------+   +------+ |
//             |  M  |-->||label |label |...|label | |
//             +-----+   ||value1|value2|...|valueN| |
//                       |+------+------+   +------+ |
//                       |+-----+                    |
//                       ||value|                    |
//                       |+-----+                    |
//                       +---------------------------+
//
//-----------------------------------------------------------------------
// DataPoint is a value of specific type corresponding to a given moment in
// time. Each DataPoint is timestamped.
//
// DataPoint is strongly typed: each DataPoint type has a specific Protobuf message
// depending on the value type of the metric and thus there are currently 4 DataPoint
// messages, which correspond to the types of metric values.
type Metric struct {
	// metric_descriptor describes the Metric.
	MetricDescriptor *MetricDescriptor `protobuf:"bytes,1,opt,name=metric_descriptor,json=metricDescriptor,proto3" json:"metric_descriptor,omitempty"`
	// Data is a list of one or more DataPoints for a single metric. Only one of the
	// following fields is used for the data, depending on the type of the metric defined
	// by MetricDescriptor.type field.
	Int64Datapoints          []*Int64DataPoint          `protobuf:"bytes,2,rep,name=int64_datapoints,json=int64Datapoints,proto3" json:"int64_datapoints,omitempty"`
	DoubleDatapoints         []*DoubleDataPoint         `protobuf:"bytes,3,rep,name=double_datapoints,json=doubleDatapoints,proto3" json:"double_datapoints,omitempty"`
	HistogramDatapoints      []*HistogramDataPoint      `protobuf:"bytes,4,rep,name=histogram_datapoints,json=histogramDatapoints,proto3" json:"histogram_datapoints,omitempty"`
	SummaryDatapoints        []*SummaryDataPoint        `protobuf:"bytes,5,rep,name=summary_datapoints,json=summaryDatapoints,proto3" json:"summary_datapoints,omitempty"`
	MinMaxSumCountDatapoints []*MinMaxSumCountDataPoint `protobuf:"bytes,6,rep,name=min_max_sum_count_datapoints,json=minMaxSumCountDatapoints,proto3" json:"min_max_sum_count_datapoints,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                   `json:"-"`
	XXX_unrecognized         []byte                     `json:"-"`
	XXX_sizecache            int32                      `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{1}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetMetricDescriptor() *MetricDescriptor {
	if m != nil {
		return m.MetricDescriptor
	}
	return nil
}

func (m *Metric) GetInt64Datapoints() []*Int64DataPoint {
	if m != nil {
		return m.Int64Datapoints
	}
	return nil
}

func (m *Metric) GetDoubleDatapoints() []*DoubleDataPoint {
	if m != nil {
		return m.DoubleDatapoints
	}
	return nil
}

func (m *Metric) GetHistogramDatapoints() []*HistogramDataPoint {
	if m != nil {
		return m.HistogramDatapoints
	}
	return nil
}

func (m *Metric) GetSummaryDatapoints() []*SummaryDataPoint {
	if m != nil {
		return m.SummaryDatapoints
	}
	return nil
}

func (m *Metric) GetMinMaxSumCountDatapoints() []*MinMaxSumCountDataPoint {
	if m != nil {
		return m.MinMaxSumCountDatapoints
	}
	return nil
}

// Defines a metric type and its schema.
type MetricDescriptor struct {
	// name of the metric, including its DNS name prefix. It must be unique.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// unit in which the metric value is reported. Follows the format
	// described by http://unitsofmeasure.org/ucum.html.
	Unit string                `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	Type MetricDescriptor_Type `protobuf:"varint,4,opt,name=type,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_Type" json:"type,omitempty"`
	// The set of labels associated with the metric descriptor. Labels in this list apply to
	// all data points.
	Labels               []*v11.StringKeyValue `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MetricDescriptor) Reset()         { *m = MetricDescriptor{} }
func (m *MetricDescriptor) String() string { return proto.CompactTextString(m) }
func (*MetricDescriptor) ProtoMessage()    {}
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{2}
}

func (m *MetricDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDescriptor.Unmarshal(m, b)
}
func (m *MetricDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDescriptor.Marshal(b, m, deterministic)
}
func (m *MetricDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDescriptor.Merge(m, src)
}
func (m *MetricDescriptor) XXX_Size() int {
	return xxx_messageInfo_MetricDescriptor.Size(m)
}
func (m *MetricDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDescriptor proto.InternalMessageInfo

func (m *MetricDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDescriptor) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MetricDescriptor) GetType() MetricDescriptor_Type {
	if m != nil {
		return m.Type
	}
	return MetricDescriptor_UNSPECIFIED
}

func (m *MetricDescriptor) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Int64DataPoint is a single data point in a timeseries that describes the time-varying
// values of a int64 metric.
type Int64DataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unixnano is the time when the cumulative value was reset to zero.
	// This is used for Counter type only. For Gauge the value is not specified and
	// defaults to 0.
	//
	// The cumulative value is over the time interval (start_time_unixnano, timestamp_unixnano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	StartTimeUnixnano uint64 `protobuf:"fixed64,2,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// timestamp_unixnano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimestampUnixnano uint64 `protobuf:"fixed64,3,opt,name=timestamp_unixnano,json=timestampUnixnano,proto3" json:"timestamp_unixnano,omitempty"`
	// value itself.
	Value                int64    `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Int64DataPoint) Reset()         { *m = Int64DataPoint{} }
func (m *Int64DataPoint) String() string { return proto.CompactTextString(m) }
func (*Int64DataPoint) ProtoMessage()    {}
func (*Int64DataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3}
}

func (m *Int64DataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Int64DataPoint.Unmarshal(m, b)
}
func (m *Int64DataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Int64DataPoint.Marshal(b, m, deterministic)
}
func (m *Int64DataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int64DataPoint.Merge(m, src)
}
func (m *Int64DataPoint) XXX_Size() int {
	return xxx_messageInfo_Int64DataPoint.Size(m)
}
func (m *Int64DataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Int64DataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_Int64DataPoint proto.InternalMessageInfo

func (m *Int64DataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Int64DataPoint) GetStartTimeUnixnano() uint64 {
	if m != nil {
		return m.StartTimeUnixnano
	}
	return 0
}

func (m *Int64DataPoint) GetTimestampUnixnano() uint64 {
	if m != nil {
		return m.TimestampUnixnano
	}
	return 0
}

func (m *Int64DataPoint) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// DoubleDataPoint is a single data point in a timeseries that describes the time-varying
// value of a double metric.
type DoubleDataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unixnano is the time when the cumulative value was reset to zero.
	// This is used for Counter type only. For Gauge the value is not specified and
	// defaults to 0.
	//
	// The cumulative value is over the time interval (start_time_unixnano, timestamp_unixnano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	StartTimeUnixnano uint64 `protobuf:"fixed64,2,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// timestamp_unixnano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimestampUnixnano uint64 `protobuf:"fixed64,3,opt,name=timestamp_unixnano,json=timestampUnixnano,proto3" json:"timestamp_unixnano,omitempty"`
	// value itself.
	Value                float64  `protobuf:"fixed64,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoubleDataPoint) Reset()         { *m = DoubleDataPoint{} }
func (m *DoubleDataPoint) String() string { return proto.CompactTextString(m) }
func (*DoubleDataPoint) ProtoMessage()    {}
func (*DoubleDataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{4}
}

func (m *DoubleDataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoubleDataPoint.Unmarshal(m, b)
}
func (m *DoubleDataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoubleDataPoint.Marshal(b, m, deterministic)
}
func (m *DoubleDataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleDataPoint.Merge(m, src)
}
func (m *DoubleDataPoint) XXX_Size() int {
	return xxx_messageInfo_DoubleDataPoint.Size(m)
}
func (m *DoubleDataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleDataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleDataPoint proto.InternalMessageInfo

func (m *DoubleDataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *DoubleDataPoint) GetStartTimeUnixnano() uint64 {
	if m != nil {
		return m.StartTimeUnixnano
	}
	return 0
}

func (m *DoubleDataPoint) GetTimestampUnixnano() uint64 {
	if m != nil {
		return m.TimestampUnixnano
	}
	return 0
}

func (m *DoubleDataPoint) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// HistogramDataPoint is a single data point in a timeseries that describes the time-varying
// values of a Histogram. A Histogram contains summary statistics for a population of values,
// it may optionally contain the distribution of those values across a set of buckets.
type HistogramDataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unixnano is the time when the cumulative value was reset to zero.
	//
	// The cumulative value is over the time interval (start_time_unixnano, timestamp_unixnano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	// Note: this field is always unspecified and ignored if MetricDescriptor.type==GAUGE_HISTOGRAM.
	StartTimeUnixnano uint64 `protobuf:"fixed64,2,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// timestamp_unixnano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimestampUnixnano uint64 `protobuf:"fixed64,3,opt,name=timestamp_unixnano,json=timestampUnixnano,proto3" json:"timestamp_unixnano,omitempty"`
	// count is the number of values in the population. Must be non-negative. This value
	// must be equal to the sum of the "count" fields in buckets if a histogram is provided.
	Count uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// sum of the values in the population. If count is zero then this field
	// must be zero. This value must be equal to the sum of the "sum" fields in buckets if
	// a histogram is provided.
	Sum float64 `protobuf:"fixed64,5,opt,name=sum,proto3" json:"sum,omitempty"`
	// buckets is an optional field contains the values of histogram for each bucket.
	//
	// The sum of the values in the buckets "count" field must equal the value in the count field.
	//
	// The number of elements in buckets array must be by one greater than the
	// number of elements in bucket_bounds array.
	//
	// Note: if HistogramDataPoint.bucket_options defines bucket bounds then this field
	// must also be present and number of elements in this field must be equal to the
	// number of buckets defined by bucket_options.
	Buckets []*HistogramDataPoint_Bucket `protobuf:"bytes,6,rep,name=buckets,proto3" json:"buckets,omitempty"`
	// explicit_bounds specifies buckets with explicitly defined bounds for values.
	// The bucket boundaries are described by "bounds" field.
	//
	// This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
	// at index i are:
	//
	// [0, bounds[i]) for i == 0
	// [bounds[i-1], bounds[i]) for 0 < i < N-1
	// [bounds[i], +infinity) for i == N-1
	// The values in bounds array must be strictly increasing and > 0.
	//
	// Note: only [a, b) intervals are currently supported for each bucket. If we decides
	// to also support (a, b] intervals we should add support for these by defining a boolean
	// value which decides what type of intervals to use.
	ExplicitBounds       []float64 `protobuf:"fixed64,7,rep,packed,name=explicit_bounds,json=explicitBounds,proto3" json:"explicit_bounds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HistogramDataPoint) Reset()         { *m = HistogramDataPoint{} }
func (m *HistogramDataPoint) String() string { return proto.CompactTextString(m) }
func (*HistogramDataPoint) ProtoMessage()    {}
func (*HistogramDataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{5}
}

func (m *HistogramDataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramDataPoint.Unmarshal(m, b)
}
func (m *HistogramDataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramDataPoint.Marshal(b, m, deterministic)
}
func (m *HistogramDataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramDataPoint.Merge(m, src)
}
func (m *HistogramDataPoint) XXX_Size() int {
	return xxx_messageInfo_HistogramDataPoint.Size(m)
}
func (m *HistogramDataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramDataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramDataPoint proto.InternalMessageInfo

func (m *HistogramDataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *HistogramDataPoint) GetStartTimeUnixnano() uint64 {
	if m != nil {
		return m.StartTimeUnixnano
	}
	return 0
}

func (m *HistogramDataPoint) GetTimestampUnixnano() uint64 {
	if m != nil {
		return m.TimestampUnixnano
	}
	return 0
}

func (m *HistogramDataPoint) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HistogramDataPoint) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *HistogramDataPoint) GetBuckets() []*HistogramDataPoint_Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

func (m *HistogramDataPoint) GetExplicitBounds() []float64 {
	if m != nil {
		return m.ExplicitBounds
	}
	return nil
}

// Bucket contains values for a bucket.
type HistogramDataPoint_Bucket struct {
	// The number of values in each bucket of the histogram, as described by
	// bucket_options.
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// exemplar is an optional representative value of the bucket.
	Exemplar             *HistogramDataPoint_Bucket_Exemplar `protobuf:"bytes,2,opt,name=exemplar,proto3" json:"exemplar,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *HistogramDataPoint_Bucket) Reset()         { *m = HistogramDataPoint_Bucket{} }
func (m *HistogramDataPoint_Bucket) String() string { return proto.CompactTextString(m) }
func (*HistogramDataPoint_Bucket) ProtoMessage()    {}
func (*HistogramDataPoint_Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{5, 0}
}

func (m *HistogramDataPoint_Bucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramDataPoint_Bucket.Unmarshal(m, b)
}
func (m *HistogramDataPoint_Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramDataPoint_Bucket.Marshal(b, m, deterministic)
}
func (m *HistogramDataPoint_Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramDataPoint_Bucket.Merge(m, src)
}
func (m *HistogramDataPoint_Bucket) XXX_Size() int {
	return xxx_messageInfo_HistogramDataPoint_Bucket.Size(m)
}
func (m *HistogramDataPoint_Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramDataPoint_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramDataPoint_Bucket proto.InternalMessageInfo

func (m *HistogramDataPoint_Bucket) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HistogramDataPoint_Bucket) GetExemplar() *HistogramDataPoint_Bucket_Exemplar {
	if m != nil {
		return m.Exemplar
	}
	return nil
}

// Exemplars are example points that may be used to annotate aggregated
// Histogram values. They are metadata that gives information about a
// particular value added to a Histogram bucket.
type HistogramDataPoint_Bucket_Exemplar struct {
	// Value of the exemplar point. It determines which bucket the exemplar belongs to.
	// If bucket_options define bounds for this bucket then this value must be within
	// the defined bounds.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// timestamp_unixnano is the moment when this exemplar was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimestampUnixnano uint64 `protobuf:"fixed64,2,opt,name=timestamp_unixnano,json=timestampUnixnano,proto3" json:"timestamp_unixnano,omitempty"`
	// exemplar_attachments are contextual information about the example value.
	// Keys in this list must be unique.
	Attachments          []*v11.StringKeyValue `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *HistogramDataPoint_Bucket_Exemplar) Reset()         { *m = HistogramDataPoint_Bucket_Exemplar{} }
func (m *HistogramDataPoint_Bucket_Exemplar) String() string { return proto.CompactTextString(m) }
func (*HistogramDataPoint_Bucket_Exemplar) ProtoMessage()    {}
func (*HistogramDataPoint_Bucket_Exemplar) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{5, 0, 0}
}

func (m *HistogramDataPoint_Bucket_Exemplar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramDataPoint_Bucket_Exemplar.Unmarshal(m, b)
}
func (m *HistogramDataPoint_Bucket_Exemplar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramDataPoint_Bucket_Exemplar.Marshal(b, m, deterministic)
}
func (m *HistogramDataPoint_Bucket_Exemplar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramDataPoint_Bucket_Exemplar.Merge(m, src)
}
func (m *HistogramDataPoint_Bucket_Exemplar) XXX_Size() int {
	return xxx_messageInfo_HistogramDataPoint_Bucket_Exemplar.Size(m)
}
func (m *HistogramDataPoint_Bucket_Exemplar) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramDataPoint_Bucket_Exemplar.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramDataPoint_Bucket_Exemplar proto.InternalMessageInfo

func (m *HistogramDataPoint_Bucket_Exemplar) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *HistogramDataPoint_Bucket_Exemplar) GetTimestampUnixnano() uint64 {
	if m != nil {
		return m.TimestampUnixnano
	}
	return 0
}

func (m *HistogramDataPoint_Bucket_Exemplar) GetAttachments() []*v11.StringKeyValue {
	if m != nil {
		return m.Attachments
	}
	return nil
}

// SummaryDataPoint is a single data point in a timeseries that describes the time-varying
// values of a Summary metric.
type SummaryDataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unixnano is the time when the cumulative value was reset to zero.
	//
	// The cumulative value is over the time interval (start_time_unixnano, timestamp_unixnano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	StartTimeUnixnano uint64 `protobuf:"fixed64,2,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// timestamp_unixnano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimestampUnixnano uint64 `protobuf:"fixed64,3,opt,name=timestamp_unixnano,json=timestampUnixnano,proto3" json:"timestamp_unixnano,omitempty"`
	// The total number of recorded values since start_time. Optional since
	// some systems don't expose this.
	Count uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// The total sum of recorded values since start_time. Optional since some
	// systems don't expose this. If count is zero then this field must be zero.
	Sum float64 `protobuf:"fixed64,5,opt,name=sum,proto3" json:"sum,omitempty"`
	// A list of values at different percentiles of the distribution calculated
	// from the current snapshot. The percentiles must be strictly increasing.
	PercentileValues     []*SummaryDataPoint_ValueAtPercentile `protobuf:"bytes,6,rep,name=percentile_values,json=percentileValues,proto3" json:"percentile_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *SummaryDataPoint) Reset()         { *m = SummaryDataPoint{} }
func (m *SummaryDataPoint) String() string { return proto.CompactTextString(m) }
func (*SummaryDataPoint) ProtoMessage()    {}
func (*SummaryDataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{6}
}

func (m *SummaryDataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryDataPoint.Unmarshal(m, b)
}
func (m *SummaryDataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryDataPoint.Marshal(b, m, deterministic)
}
func (m *SummaryDataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryDataPoint.Merge(m, src)
}
func (m *SummaryDataPoint) XXX_Size() int {
	return xxx_messageInfo_SummaryDataPoint.Size(m)
}
func (m *SummaryDataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryDataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryDataPoint proto.InternalMessageInfo

func (m *SummaryDataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *SummaryDataPoint) GetStartTimeUnixnano() uint64 {
	if m != nil {
		return m.StartTimeUnixnano
	}
	return 0
}

func (m *SummaryDataPoint) GetTimestampUnixnano() uint64 {
	if m != nil {
		return m.TimestampUnixnano
	}
	return 0
}

func (m *SummaryDataPoint) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SummaryDataPoint) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *SummaryDataPoint) GetPercentileValues() []*SummaryDataPoint_ValueAtPercentile {
	if m != nil {
		return m.PercentileValues
	}
	return nil
}

// Represents the value at a given percentile of a distribution.
type SummaryDataPoint_ValueAtPercentile struct {
	// The percentile of a distribution. Must be in the interval
	// [0.0, 100.0].
	Percentile float64 `protobuf:"fixed64,1,opt,name=percentile,proto3" json:"percentile,omitempty"`
	// The value at the given percentile of a distribution.
	Value                float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SummaryDataPoint_ValueAtPercentile) Reset()         { *m = SummaryDataPoint_ValueAtPercentile{} }
func (m *SummaryDataPoint_ValueAtPercentile) String() string { return proto.CompactTextString(m) }
func (*SummaryDataPoint_ValueAtPercentile) ProtoMessage()    {}
func (*SummaryDataPoint_ValueAtPercentile) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{6, 0}
}

func (m *SummaryDataPoint_ValueAtPercentile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryDataPoint_ValueAtPercentile.Unmarshal(m, b)
}
func (m *SummaryDataPoint_ValueAtPercentile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryDataPoint_ValueAtPercentile.Marshal(b, m, deterministic)
}
func (m *SummaryDataPoint_ValueAtPercentile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryDataPoint_ValueAtPercentile.Merge(m, src)
}
func (m *SummaryDataPoint_ValueAtPercentile) XXX_Size() int {
	return xxx_messageInfo_SummaryDataPoint_ValueAtPercentile.Size(m)
}
func (m *SummaryDataPoint_ValueAtPercentile) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryDataPoint_ValueAtPercentile.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryDataPoint_ValueAtPercentile proto.InternalMessageInfo

func (m *SummaryDataPoint_ValueAtPercentile) GetPercentile() float64 {
	if m != nil {
		return m.Percentile
	}
	return 0
}

func (m *SummaryDataPoint_ValueAtPercentile) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// MinMaxSumCountDataPoint is a single data point in a timeseries that
// describes the range, total, and number of time-varying values of a
// MinMaxSumCount metric.
type MinMaxSumCountDataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unixnano is the time when the cumulative values (count and
	// sum) and the range (min, max) were reset to zero.
	//
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the start_time_unixnano is unspecified. In that case
	// the values contained are assumed to incremental instead of cumulative.
	StartTimeUnixnano uint64 `protobuf:"fixed64,2,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// timestamp_unixnano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp_unixnano is unspecified. In that
	// case the timestamp_unixnano should be decided by the backend.
	TimestampUnixnano uint64 `protobuf:"fixed64,3,opt,name=timestamp_unixnano,json=timestampUnixnano,proto3" json:"timestamp_unixnano,omitempty"`
	// The total number of recorded values since start_time. Optional since
	// some systems don't expose this.
	Count uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// The total sum of recorded values since start_time.
	//
	// If count is zero then this field should be ignored.
	Sum float64 `protobuf:"fixed64,5,opt,name=sum,proto3" json:"sum,omitempty"`
	// The maximal value recorded during the recording period.
	//
	// If count is zero then this field should be ignored.
	Maximum float64 `protobuf:"fixed64,6,opt,name=maximum,proto3" json:"maximum,omitempty"`
	// The minimal value recorded during the recording period.
	//
	// If count is zero then this field should be ignored.
	Minimum              float64  `protobuf:"fixed64,7,opt,name=minimum,proto3" json:"minimum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MinMaxSumCountDataPoint) Reset()         { *m = MinMaxSumCountDataPoint{} }
func (m *MinMaxSumCountDataPoint) String() string { return proto.CompactTextString(m) }
func (*MinMaxSumCountDataPoint) ProtoMessage()    {}
func (*MinMaxSumCountDataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{7}
}

func (m *MinMaxSumCountDataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MinMaxSumCountDataPoint.Unmarshal(m, b)
}
func (m *MinMaxSumCountDataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MinMaxSumCountDataPoint.Marshal(b, m, deterministic)
}
func (m *MinMaxSumCountDataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinMaxSumCountDataPoint.Merge(m, src)
}
func (m *MinMaxSumCountDataPoint) XXX_Size() int {
	return xxx_messageInfo_MinMaxSumCountDataPoint.Size(m)
}
func (m *MinMaxSumCountDataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_MinMaxSumCountDataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_MinMaxSumCountDataPoint proto.InternalMessageInfo

func (m *MinMaxSumCountDataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MinMaxSumCountDataPoint) GetStartTimeUnixnano() uint64 {
	if m != nil {
		return m.StartTimeUnixnano
	}
	return 0
}

func (m *MinMaxSumCountDataPoint) GetTimestampUnixnano() uint64 {
	if m != nil {
		return m.TimestampUnixnano
	}
	return 0
}

func (m *MinMaxSumCountDataPoint) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *MinMaxSumCountDataPoint) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *MinMaxSumCountDataPoint) GetMaximum() float64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *MinMaxSumCountDataPoint) GetMinimum() float64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func init() {
	proto.RegisterEnum("opentelemetry.proto.metrics.v1.MetricDescriptor_Type", MetricDescriptor_Type_name, MetricDescriptor_Type_value)
	proto.RegisterType((*ResourceMetrics)(nil), "opentelemetry.proto.metrics.v1.ResourceMetrics")
	proto.RegisterType((*Metric)(nil), "opentelemetry.proto.metrics.v1.Metric")
	proto.RegisterType((*MetricDescriptor)(nil), "opentelemetry.proto.metrics.v1.MetricDescriptor")
	proto.RegisterType((*Int64DataPoint)(nil), "opentelemetry.proto.metrics.v1.Int64DataPoint")
	proto.RegisterType((*DoubleDataPoint)(nil), "opentelemetry.proto.metrics.v1.DoubleDataPoint")
	proto.RegisterType((*HistogramDataPoint)(nil), "opentelemetry.proto.metrics.v1.HistogramDataPoint")
	proto.RegisterType((*HistogramDataPoint_Bucket)(nil), "opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket")
	proto.RegisterType((*HistogramDataPoint_Bucket_Exemplar)(nil), "opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket.Exemplar")
	proto.RegisterType((*SummaryDataPoint)(nil), "opentelemetry.proto.metrics.v1.SummaryDataPoint")
	proto.RegisterType((*SummaryDataPoint_ValueAtPercentile)(nil), "opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtPercentile")
	proto.RegisterType((*MinMaxSumCountDataPoint)(nil), "opentelemetry.proto.metrics.v1.MinMaxSumCountDataPoint")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/metrics/v1/metrics.proto", fileDescriptor_3c3112f9fa006917)
}

var fileDescriptor_3c3112f9fa006917 = []byte{
	// 973 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0xdf, 0x6e, 0x23, 0xb5,
	0x17, 0xfe, 0x4d, 0x26, 0x7f, 0xba, 0x27, 0xfb, 0x6b, 0x26, 0x6e, 0x11, 0xa3, 0x08, 0xad, 0x42,
	0x2e, 0xa0, 0x20, 0x3a, 0xa1, 0x65, 0x59, 0xc4, 0x15, 0x24, 0x4d, 0xe8, 0x46, 0x6c, 0xda, 0xc8,
	0x49, 0x56, 0x2c, 0x02, 0x46, 0x93, 0xc4, 0x4a, 0x2d, 0x62, 0xcf, 0x68, 0xc6, 0x53, 0x92, 0x7b,
	0x9e, 0x02, 0xb8, 0x80, 0x0b, 0xde, 0x80, 0xc7, 0x80, 0x87, 0xe0, 0x4d, 0xd0, 0xd8, 0xf3, 0xaf,
	0xff, 0x08, 0x85, 0xab, 0xdd, 0x3b, 0xfb, 0x3b, 0xe7, 0xfb, 0x3e, 0xfb, 0xf8, 0xc4, 0xce, 0xc0,
	0x7b, 0xae, 0x47, 0xb8, 0x20, 0x2b, 0xc2, 0x88, 0xf0, 0x37, 0x6d, 0xcf, 0x77, 0x85, 0xdb, 0x8e,
	0xc6, 0x74, 0x1e, 0xb4, 0x2f, 0x8f, 0x92, 0xa1, 0x25, 0x03, 0xe8, 0xd1, 0x95, 0x6c, 0x05, 0x5a,
	0x49, 0xca, 0xe5, 0x51, 0xe3, 0xdd, 0xdb, 0xd4, 0xe6, 0x2e, 0x63, 0x2e, 0x8f, 0xc4, 0xd4, 0x48,
	0xd1, 0x1a, 0xd6, 0x6d, 0xb9, 0x3e, 0x09, 0xdc, 0xd0, 0x9f, 0x93, 0x28, 0x3b, 0x19, 0xab, 0xfc,
	0xd6, 0x0f, 0x1a, 0xd4, 0x70, 0x0c, 0x0d, 0x95, 0x25, 0xfa, 0x14, 0x2a, 0xb1, 0xbb, 0xa9, 0x35,
	0xf5, 0x83, 0xea, 0xf1, 0x5b, 0xd6, 0xdf, 0xaf, 0xd0, 0x52, 0x4c, 0x9c, 0xd0, 0x50, 0x1f, 0x76,
	0x12, 0x1f, 0xb3, 0xd0, 0xd4, 0x0e, 0xaa, 0xc7, 0xef, 0xdc, 0x2a, 0x91, 0x2e, 0xe6, 0xf2, 0xc8,
	0x4a, 0x56, 0x81, 0x53, 0x6a, 0xeb, 0xcf, 0x22, 0x94, 0x95, 0x34, 0xfa, 0x1a, 0xea, 0x4a, 0xdc,
	0x5e, 0x90, 0x60, 0xee, 0x53, 0x4f, 0xb8, 0xbe, 0xa9, 0x49, 0xe9, 0xf7, 0xff, 0xd9, 0xea, 0x7a,
	0x29, 0x0f, 0x1b, 0xec, 0x1a, 0x82, 0x5e, 0x80, 0x41, 0xb9, 0x78, 0xf2, 0xd8, 0x5e, 0x38, 0xc2,
	0xf1, 0x5c, 0xca, 0x45, 0x60, 0x16, 0xe4, 0xde, 0xad, 0x6d, 0xea, 0x83, 0x88, 0xd7, 0x73, 0x84,
	0x33, 0x8a, 0x68, 0xb8, 0x46, 0x93, 0xb9, 0x92, 0x41, 0x5f, 0x41, 0x7d, 0xe1, 0x86, 0xb3, 0x15,
	0xc9, 0x6b, 0xeb, 0x52, 0xbb, 0xbd, 0x4d, 0xbb, 0x27, 0x89, 0x99, 0xb8, 0xb1, 0x48, 0x81, 0x58,
	0x9d, 0xc0, 0xfe, 0x05, 0x0d, 0x84, 0xbb, 0xf4, 0x1d, 0x96, 0x37, 0x28, 0x4a, 0x83, 0xe3, 0x6d,
	0x06, 0x4f, 0x13, 0x6e, 0xe6, 0xb1, 0x77, 0x91, 0xc7, 0x62, 0x1b, 0x1b, 0x50, 0x10, 0x32, 0xe6,
	0xf8, 0x9b, 0xbc, 0x49, 0x49, 0x9a, 0x6c, 0xad, 0xff, 0x58, 0x31, 0x33, 0x8b, 0x7a, 0x90, 0x21,
	0xb1, 0xc1, 0x77, 0xf0, 0x06, 0xa3, 0xdc, 0x66, 0xce, 0xda, 0x0e, 0x42, 0x66, 0xcf, 0xdd, 0x90,
	0x8b, 0xbc, 0x55, 0x59, 0x5a, 0x7d, 0xb4, 0xf5, 0xa8, 0x29, 0x1f, 0x3a, 0xeb, 0x71, 0xc8, 0x4e,
	0x22, 0x81, 0xcc, 0xd1, 0x64, 0x37, 0x02, 0x4a, 0xb8, 0xf5, 0xab, 0x0e, 0xc6, 0xf5, 0x06, 0x41,
	0x08, 0x8a, 0xdc, 0x61, 0x44, 0x36, 0xd8, 0x03, 0x2c, 0xc7, 0xa8, 0x09, 0xd5, 0xa4, 0xf5, 0xa8,
	0xcb, 0x65, 0x5b, 0x3f, 0xc0, 0x79, 0x28, 0x62, 0x85, 0x9c, 0x0a, 0x53, 0x57, 0xac, 0x68, 0x8c,
	0x06, 0x50, 0x14, 0x1b, 0x8f, 0x98, 0xc5, 0xa6, 0x76, 0xb0, 0x7b, 0xfc, 0xe1, 0x7d, 0x5b, 0xd5,
	0x9a, 0x6c, 0x3c, 0x82, 0xa5, 0x04, 0xea, 0x43, 0x79, 0xe5, 0xcc, 0xc8, 0x2a, 0xa9, 0xfb, 0xe1,
	0xad, 0x62, 0xf1, 0x6d, 0x10, 0x95, 0x5d, 0xf8, 0x94, 0x2f, 0x3f, 0x27, 0x9b, 0xe7, 0xce, 0x2a,
	0x24, 0x38, 0x26, 0xb7, 0x7e, 0xd3, 0xa0, 0x18, 0xa9, 0xa2, 0x1a, 0x54, 0xa7, 0x67, 0xe3, 0x51,
	0xff, 0x64, 0xf0, 0xd9, 0xa0, 0xdf, 0x33, 0xfe, 0x17, 0x01, 0xa7, 0x9d, 0xe9, 0x69, 0xdf, 0x1e,
	0x9c, 0x4d, 0x9e, 0x3c, 0x36, 0x34, 0x64, 0xc0, 0x43, 0x05, 0xf4, 0xce, 0xa7, 0xdd, 0x67, 0x7d,
	0xa3, 0x80, 0xf6, 0xa0, 0xa6, 0x90, 0xa7, 0x83, 0xf1, 0xe4, 0xfc, 0x14, 0x77, 0x86, 0x86, 0x8e,
	0xea, 0xf0, 0xff, 0x93, 0xf3, 0xe9, 0xd9, 0xa4, 0x8f, 0x63, 0x66, 0x11, 0x21, 0xd8, 0x4d, 0xa0,
	0x98, 0x5b, 0x42, 0x26, 0xec, 0x9f, 0x4c, 0x87, 0xd3, 0x67, 0x9d, 0xc9, 0xe0, 0x79, 0x5e, 0xa0,
	0x8c, 0xaa, 0x50, 0x19, 0x4f, 0x87, 0xc3, 0x0e, 0x7e, 0x61, 0x54, 0xd0, 0x6b, 0x50, 0x1f, 0x0e,
	0xce, 0xec, 0x61, 0xe7, 0x0b, 0x7b, 0x3c, 0x1d, 0xda, 0x52, 0xc6, 0xd8, 0x69, 0xfd, 0xae, 0xc1,
	0xee, 0xd5, 0x9f, 0x5a, 0xae, 0x20, 0xda, 0x7f, 0x28, 0x08, 0xb2, 0x60, 0x2f, 0x10, 0x8e, 0x2f,
	0x6c, 0x41, 0x19, 0xb1, 0x43, 0x4e, 0xd7, 0xdc, 0xe1, 0xae, 0x3c, 0xe0, 0x32, 0xae, 0xcb, 0xd0,
	0x84, 0x32, 0x32, 0x8d, 0x03, 0xe8, 0x10, 0x50, 0x94, 0x19, 0x08, 0x87, 0x79, 0x59, 0xba, 0xae,
	0xd2, 0xd3, 0x48, 0x9a, 0xbe, 0x0f, 0xa5, 0xcb, 0xc8, 0x4f, 0xb6, 0x80, 0x8e, 0xd5, 0xa4, 0xf5,
	0x87, 0x06, 0xb5, 0x6b, 0xbf, 0xee, 0x97, 0x71, 0x3f, 0x5a, 0xb2, 0x9f, 0xef, 0x4b, 0x80, 0x6e,
	0x5e, 0x26, 0x2f, 0xcf, 0x96, 0xe4, 0x85, 0x23, 0xb7, 0x54, 0xc4, 0x6a, 0x82, 0x0c, 0xd0, 0x83,
	0x90, 0x99, 0x25, 0xb9, 0xcd, 0x68, 0x88, 0xc6, 0x50, 0x99, 0x85, 0xf3, 0x6f, 0x49, 0x7a, 0x1f,
	0x7d, 0x7c, 0xff, 0xfb, 0xd5, 0xea, 0x4a, 0x05, 0x9c, 0x28, 0xa1, 0xb7, 0xa1, 0x46, 0xd6, 0xde,
	0x8a, 0xce, 0xa9, 0xb0, 0x67, 0x6e, 0xc8, 0x17, 0x81, 0x59, 0x69, 0xea, 0x07, 0x1a, 0xde, 0x4d,
	0xe0, 0xae, 0x44, 0x1b, 0xbf, 0x14, 0xa0, 0xac, 0xc8, 0xd9, 0x82, 0xb5, 0xfc, 0x82, 0xbf, 0x81,
	0x1d, 0xb2, 0x26, 0xcc, 0x5b, 0x39, 0x7e, 0xfc, 0xea, 0x76, 0xff, 0xf5, 0xfa, 0xac, 0x7e, 0xac,
	0x84, 0x53, 0xcd, 0xc6, 0xcf, 0x1a, 0xec, 0x24, 0x70, 0xd6, 0x06, 0x5a, 0xae, 0x0d, 0xee, 0x28,
	0x7c, 0xe1, 0xae, 0xc2, 0x9f, 0x43, 0xd5, 0x11, 0xc2, 0x99, 0x5f, 0x30, 0x92, 0xbd, 0x8a, 0xf7,
	0xec, 0x91, 0xbc, 0x42, 0xeb, 0x27, 0x1d, 0x8c, 0xeb, 0xcf, 0xcd, 0x2b, 0xd6, 0x84, 0x2e, 0xd4,
	0x3d, 0xe2, 0xcf, 0x09, 0x17, 0x74, 0x45, 0x6c, 0x59, 0xf6, 0xa4, 0x1d, 0xbb, 0xf7, 0x7d, 0x89,
	0x2d, 0xb9, 0xc3, 0x8e, 0x18, 0xa5, 0x82, 0xd8, 0xc8, 0xc4, 0x65, 0x30, 0x68, 0x0c, 0xa0, 0x7e,
	0x23, 0x0d, 0x3d, 0x02, 0xc8, 0x12, 0xe3, 0x1e, 0xc8, 0x21, 0x59, 0x7b, 0x14, 0xf2, 0xb7, 0xc4,
	0x8f, 0x05, 0x78, 0xfd, 0x8e, 0x27, 0xfa, 0x15, 0x3b, 0x25, 0x13, 0x2a, 0xcc, 0x59, 0x53, 0x16,
	0x32, 0xb3, 0x2c, 0xd1, 0x64, 0x2a, 0x23, 0x94, 0xcb, 0x48, 0x25, 0x8e, 0xa8, 0x69, 0x57, 0xc0,
	0x9b, 0xd4, 0xdd, 0x72, 0x84, 0xdd, 0x87, 0xf1, 0xbf, 0xf4, 0x51, 0x14, 0x18, 0x69, 0x5f, 0x7e,
	0xb2, 0xa4, 0xe2, 0x22, 0x9c, 0x45, 0x85, 0x69, 0x47, 0xd4, 0xc3, 0xec, 0xcf, 0xff, 0x15, 0xa5,
	0x43, 0xf5, 0x29, 0xb0, 0x24, 0xbc, 0xbd, 0xcc, 0x7f, 0x8b, 0xcc, 0xca, 0x32, 0xf0, 0xc1, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x39, 0x88, 0xce, 0x2e, 0xb4, 0x0c, 0x00, 0x00,
}
