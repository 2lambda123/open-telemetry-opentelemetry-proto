// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.9.1
// source: opentelemetry/proto/metrics/v1/metrics.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	v11 "github.com/open-telemetry/opentelemetry-proto/gen/go/common/v1"
	v1 "github.com/open-telemetry/opentelemetry-proto/gen/go/resource/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ValueType is the type of values a metric has.  ValueType determines
// which field of the DataPoint will be used for Metrics with this
// descriptor.
type MetricDescriptor_ValueType int32

const (
	// INVALID_TYPE is the default ValueType, it MUST not be used.
	MetricDescriptor_INVALID_VALUE_TYPE MetricDescriptor_ValueType = 0
	// ScalarInt64 implies that the value is found in Metric.scalar_data_points[].value_int64.
	//
	// When paired with GROUPING kind, the value corresponds with an
	// individual measurement. Paired with ADDING kind, the value
	//
	// .  When paired with ADDING kind, the value
	//
	//
	// When INSTANTANEOUS, this
	MetricDescriptor_SCALAR_INT64 MetricDescriptor_ValueType = 1
	// ScalarDouble implies that the value is found in Metric.scalar_data_points[].value_double.
	MetricDescriptor_SCALAR_DOUBLE MetricDescriptor_ValueType = 2
	// Histogram implies that the value is found in Metric.histogram_data_points[].histogram.
	MetricDescriptor_HISTOGRAM MetricDescriptor_ValueType = 3
	// Summary implies that the value is found in Metric.summary_data_points[].summary.
	MetricDescriptor_SUMMARY MetricDescriptor_ValueType = 4
)

// Enum value maps for MetricDescriptor_ValueType.
var (
	MetricDescriptor_ValueType_name = map[int32]string{
		0: "INVALID_VALUE_TYPE",
		1: "SCALAR_INT64",
		2: "SCALAR_DOUBLE",
		3: "HISTOGRAM",
		4: "SUMMARY",
	}
	MetricDescriptor_ValueType_value = map[string]int32{
		"INVALID_VALUE_TYPE": 0,
		"SCALAR_INT64":       1,
		"SCALAR_DOUBLE":      2,
		"HISTOGRAM":          3,
		"SUMMARY":            4,
	}
)

func (x MetricDescriptor_ValueType) Enum() *MetricDescriptor_ValueType {
	p := new(MetricDescriptor_ValueType)
	*p = x
	return p
}

func (x MetricDescriptor_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricDescriptor_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_enumTypes[0].Descriptor()
}

func (MetricDescriptor_ValueType) Type() protoreflect.EnumType {
	return &file_opentelemetry_proto_metrics_v1_metrics_proto_enumTypes[0]
}

func (x MetricDescriptor_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricDescriptor_ValueType.Descriptor instead.
func (MetricDescriptor_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{3, 0}
}

// KindElement contains a set of bit masks used to construct Kind
// enum values.  There are 7 bits used presently, broken into
// groups:
//
//   _Temporality_ is the temporal quality of a metric, indicating
//   how values relate to the time interval over which they are
//   reported.  One of the 3 Temporality values MUST be set:
//   CUMULATIVE, DELTA, or INSTANTANEOUS.
//
//   _Structure_ is the structural quality of a metric, indicating
//   whether metric data describes a sum of measurements (ADDING) or
//   a collection of individual measurements (GROUPING).  Value
//   types may be interpreted differently depending on Structure.
//   For example, a Histogram DataPoint may be computed for a
//   Counter (ADDING) instrument or a ValueRecorder (GROUPING)
//   instrument, and the Sum and Count of the resulting aggregation
//   may be interpreted differently depending on structure.
//
//   MONOTONIC is a boolean option that may be applied to
//   ADDING-structure metrics.
//
//   ASYNCHRONOUS is a boolean option that may be applied to all
//   metrics.  When set, an ASYNCHRONOUS kind indicates that the
//   corresponding measurement was made through a callback called by
//   the SDK.  TimeUnixNano is deliberate, not the result of an
//   application-level event.
//
//   When measurements originate from an OpenTelemetry API, the
//   ASYNCHRONOUS kind allows the interpreter to recognize values
//   that were emitted by the same callback invokation, as
//   identified by equal an Resource and TimeUnixNano.
//   OpenTelemetry callbacks are permitted to record at most one
//   value per label set under the specification.  This property can
//   be safetly disregarded and not set when importing data from
//   other sources, but when set its presence is always meaningful.
//
//   ASYNCHRONOUS means that:
//   - The count of events is a measure of the rate of SDK collection
//     times the aggregated cardinality, therefore cannot be used
//     to extrapolate application-specific rate information.
//   - Measurements with the same Resource and TimeUnixNano
//     form a meaningful ratio, and the set of measurements at this
//     instant are coherent, resulting from a single callback.
//   - Trace context MUST not be set in exemplars.
//     TODO(#159): raw values.
//
//   ASYNCHRONOUS is incompatible with INSTANTANEOUS.
type MetricDescriptor_KindElement int32

const (
	// INVALID_KIND_MASK is not used.
	MetricDescriptor_INVALID_KIND_MASK MetricDescriptor_KindElement = 0
	// INSTANTANEOUS is a metric whose values are measured at a particular
	// instant. The values are not aggregated over any time interval and are
	// unique per timestamp. As such, these metrics are not expected to have
	// an associated start time.
	MetricDescriptor_INSTANTANEOUS MetricDescriptor_KindElement = 1
	// DELTA is a metric whose values are the aggregation of measurements
	// made over a time interval. Successive metrics contain aggregation of
	// values from continuous and non-overlapping intervals.
	//
	// The values for a DELTA metric are based only on the time interval
	// associated with one measurement cycle. There is no dependency on
	// previous measurements like is the case for CUMULATIVE metrics.
	//
	// For example, consider a system measuring the number of requests that
	// it receives and reports the sum of these requests every second as a
	// DELTA metric:
	//
	//   1. The system starts receiving at time=t_0.
	//   2. A request is received, the system measures 1 request.
	//   3. A request is received, the system measures 1 request.
	//   4. A request is received, the system measures 1 request.
	//   5. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0 to
	//      t_0+1 with a value of 3.
	//   6. A request is received, the system measures 1 request.
	//   7. A request is received, the system measures 1 request.
	//   8. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0+1 to
	//      t_0+2 with a value of 2.
	MetricDescriptor_DELTA MetricDescriptor_KindElement = 2
	// CUMULATIVE is a metric whose values are the aggregation of
	// successively made measurements from a fixed start time until the last
	// reported measurement. This means that current values of a CUMULATIVE
	// metric depend on all previous measurements since the start time.
	// Because of this, the sender is required to retain this state in some
	// form. If this state is lost or invalidated, the CUMULATIVE metric
	// values MUST be reset and a new fixed start time following the last
	// reported measurement time sent MUST be used.
	//
	// For example, consider a system measuring the number of requests that
	// it receives and reports the sum of these requests every second as a
	// CUMULATIVE metric:
	//
	//   1. The system starts receiving at time=t_0.
	//   2. A request is received, the system measures 1 request.
	//   3. A request is received, the system measures 1 request.
	//   4. A request is received, the system measures 1 request.
	//   5. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0 to
	//      t_0+1 with a value of 3.
	//   6. A request is received, the system measures 1 request.
	//   7. A request is received, the system measures 1 request.
	//   8. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0 to
	//      t_0+2 with a value of 5.
	//   9. The system experiences a fault and loses state.
	//   10. The system recovers and resumes receiving at time=t_1.
	//   11. A request is received, the system measures 1 request.
	//   12. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_1 to
	//      t_0+1 with a value of 1.
	//
	// Note that the first value in a sequence of CUMULATIVE metrics
	// after a reset is equivalent in value to a DELTA metric for the
	// period since the reset.  Although a CUMULATIVE metric could
	// technically be reset after every collection event and still be
	// described as CUMULATIVE, exporters should use DELTA if there is
	// no intention of repeating the StartTimeUnixNano timestamp.
	MetricDescriptor_CUMULATIVE MetricDescriptor_KindElement = 4
	// ADDING structure means the measurement determines a sum.  For
	// DELTA kind this is expressed as the change in sum since the
	// last collection.  For CUMULATIVE kind this is expressed as the
	// last collected value of the sum.  For INSTANTANEOUS kind this
	// is expressed as a scalar value that would be added into a Sum.
	MetricDescriptor_ADDING MetricDescriptor_KindElement = 8
	// GROUPING structure means the value has been computed by
	// combining individual values through a meaningful aggregation.
	// GROUPING structure implies the sum of measurements is not
	// necessarily meaningful.  These may be expressed as DELTA
	// kind, indicating an aggregation of values since the last
	// collection, or as CUMULATIVE kind, indicating an aggregation
	// of values since the last StartTimeUnixNano reset.  These may
	// also be expressed as INSTANTANEOUS kind when reporting a
	// scalar value type.  TODO(#159) or raw value.
	MetricDescriptor_GROUPING MetricDescriptor_KindElement = 16
	// MONOTONIC may be set in conjunction with ADDING kinds.  When
	// set, MONOTONIC indicates that the calculated sum is
	// non-decreasing, therefore can be monitored as a non-negative
	// rate of change.
	MetricDescriptor_MONOTONIC MetricDescriptor_KindElement = 32
	// ASYNCHRONOUS may be set for any kind of metric, indicating it
	// was generated through callbacks, willed by the SDK.  In
	// ASYNCHRONOUS measurements, TimeUnixNano results deliberately
	// from the SDK, not from the application.
	//
	// When ASYNCHRONOUS is not set, it implies the event originated
	// from the application calling the SDK.
	MetricDescriptor_ASYNCHRONOUS MetricDescriptor_KindElement = 64
)

// Enum value maps for MetricDescriptor_KindElement.
var (
	MetricDescriptor_KindElement_name = map[int32]string{
		0:  "INVALID_KIND_MASK",
		1:  "INSTANTANEOUS",
		2:  "DELTA",
		4:  "CUMULATIVE",
		8:  "ADDING",
		16: "GROUPING",
		32: "MONOTONIC",
		64: "ASYNCHRONOUS",
	}
	MetricDescriptor_KindElement_value = map[string]int32{
		"INVALID_KIND_MASK": 0,
		"INSTANTANEOUS":     1,
		"DELTA":             2,
		"CUMULATIVE":        4,
		"ADDING":            8,
		"GROUPING":          16,
		"MONOTONIC":         32,
		"ASYNCHRONOUS":      64,
	}
)

func (x MetricDescriptor_KindElement) Enum() *MetricDescriptor_KindElement {
	p := new(MetricDescriptor_KindElement)
	*p = x
	return p
}

func (x MetricDescriptor_KindElement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricDescriptor_KindElement) Descriptor() protoreflect.EnumDescriptor {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_enumTypes[1].Descriptor()
}

func (MetricDescriptor_KindElement) Type() protoreflect.EnumType {
	return &file_opentelemetry_proto_metrics_v1_metrics_proto_enumTypes[1]
}

func (x MetricDescriptor_KindElement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricDescriptor_KindElement.Descriptor instead.
func (MetricDescriptor_KindElement) EnumDescriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{3, 1}
}

// Kind explains how the DataPoint was produced (called
// "Structure"), how the point was aggregated with resepect to time
// (called "Temporality"), whether it was computed asynchronously,
// and (when the Structure is ADDING) whether the sum is not
// monotonic.
//
// Kind names are generated from valid combinations of KindElement
// by joining the effective KindElements using underscores.  There
// are:
//
// - 3 possibilities for Temporality
// - 3 possibilities for Structure/Monotonicity: Adding Monotonic,
//     Adding Non-Monotonic, and Grouping
// - 2 possibilities of being Asynchronous or not.
//
// Exclusing the asynchronous instantaneous combinations, this makes
// 15 valid values.
type MetricDescriptor_Kind int32

const (
	// INVALID_KIND is the default Kind, it MUST not be used.
	MetricDescriptor_INVALID_KIND MetricDescriptor_Kind = 0
	// ADDING_MONOTONIC_INSTANTANEOUS kind describes the change in a
	// sum as measured at an instant (TimeUnixNano).  The value MUST
	// be non-negative.  Generally this is the value of an
	// OpenTelemetry Counter instrument without aggregation.
	// Typically expressed as a scalar (TODO(#159): or raw) value.
	MetricDescriptor_ADDING_MONOTONIC_INSTANTANEOUS MetricDescriptor_Kind = 41 // ADDING|INSTANTANEOUS|MONOTONIC
	// ADDING_MONOTONIC_DELTA describes the change in a sum
	// accumulated since the metric was last collected
	// (StartTimeUnixNano) through the measured time (TimeUnixNano).
	// The value MUST be non-negative.  Generally this is the result
	// of aggregating an OpenTelemetry Counter instrument since the
	// last collection.  Typically expressed as a scalar or histogram
	// value.
	MetricDescriptor_ADDING_MONOTONIC_DELTA MetricDescriptor_Kind = 42 // ADDING|DELTA|MONOTONIC
	// ADDING_MONOTONIC_DELTA_ASYNCHRONOUS is ADDING_MONOTONIC_DELTA
	// with asynchronous semantics specified by the OpenTelemetry API,
	// indicating the value was collected through a callback.
	// Generally this is the temporal difference between values of an
	// OpenTelemetry SumObserver instrument.  Typically expressed as a
	// scalar or histogram value.
	MetricDescriptor_ADDING_MONOTONIC_DELTA_ASYNCHRONOUS MetricDescriptor_Kind = 106 // ADDING|DELTA|MONOTONIC|ASYNCHRONOUS
	// ADDING_MONOTONIC_CUMULATIVE describes the current value of a
	// sum accumulated from the reset time (StartTimeUnixNano) through
	// the measured time (TimeUnixNano).  The value must be
	// non-negative and not less than the previously reported value of
	// the same metric.  Generally this is the result of aggregating an
	// OpenTelemetry Counter instrument since the last reset time.
	// Typically expressed as a scalar or histogram value.
	MetricDescriptor_ADDING_MONOTONIC_CUMULATIVE MetricDescriptor_Kind = 44 // ADDING|CUMULATIVE|MONOTONIC
	// ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS is
	// ADDING_MONOTONIC_CUMULATIVE with asynchronous semantics
	// specified by the OpenTelemetry API, indicating the value was
	// collected through a callback.  Generally this is the sum of
	// measurements of an OpenTelemetry SumObserver instrument.
	// Typically expressed as a scalar or histogram value.
	MetricDescriptor_ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS MetricDescriptor_Kind = 108 // ADDING|CUMULATIVE|MONOTONIC|ASYNCHRONOUS
	MetricDescriptor_ADDING_INSTANTANEOUS                     MetricDescriptor_Kind = 9   // ADDING|INSTANTANEOUS
	MetricDescriptor_ADDING_DELTA                             MetricDescriptor_Kind = 10  // ADDING|DELTA
	MetricDescriptor_ADDING_DELTA_ASYNCHRONOUS                MetricDescriptor_Kind = 74  // ADDING|DELTA|ASYNCHRONOUS
	MetricDescriptor_ADDING_CUMULATIVE                        MetricDescriptor_Kind = 12  // ADDING|CUMULATIVE
	MetricDescriptor_ADDING_CUMULATIVE_ASYNCHRONOUS           MetricDescriptor_Kind = 76  // ADDING|CUMULATIVE|ASYNCHRONOUS
	// GROUPING_INSTANTANEOUS kind describes an individual value
	// measured at an instant (TimeUnixNano).  Generally this is the value of an
	// OpenTelemetry ValueRecorder instrument without aggregation.
	// Typically expressed as a scalar (TODO(#159): or raw) value.
	MetricDescriptor_GROUPING_INSTANTANEOUS MetricDescriptor_Kind = 17 // GROUPING|INSTANTANEOUS
	// GROUPING_DELTA kind describes a set of individual values
	// measured from the most recent collection (StartTimeUnixNano)
	// through the measured time (TimeUnixNano).  Generally this is
	// the aggregated value of an OpenTelemetry ValueRecorder
	// instrument.  Typically expressed as a scalar, histogram, or
	// summary value.  When expressed as a scalar value, this is
	// specified to mean the most recent (i.e., "last") value to occur
	// within the collection interval.
	MetricDescriptor_GROUPING_DELTA MetricDescriptor_Kind = 18 // GROUPING|DELTA
	// GROUPING_DELTA_ASYNCHRONOUS is GROUPING_DELTA with asynchronous
	// semantics specified by the OpenTelemetry API, indicating the
	// value was collected through a callback.  Generally this is the
	// aggregated value of an OpenTelemetry ValueObserver instrument.
	// Typically expressed as a scalar, histogram, or summary value.
	MetricDescriptor_GROUPING_DELTA_ASYNCHRONOUS MetricDescriptor_Kind = 82 // GROUPING|DELTA|ASYNCHRONOUS
	// GROUPING_CUMULATIVE kind describes a set of individual values
	// measured from the last reset time (StartTimeUnixNano) through
	// the measured time (TimeUnixNano).  Generally this is the
	// aggregated value of an OpenTelemetry ValueRecorder instrument.
	// Typically expressed as a scalar or histogram value.  When
	// expressed as a scalar value, this is specified to mean the most
	// recent (i.e., "last") value to occur since the reset time,
	// which may have occurred prior to the most recent collection
	// interval.
	MetricDescriptor_GROUPING_CUMULATIVE MetricDescriptor_Kind = 20 // GROUPING|CUMULATIVE
	// GROUPING_CUMULATIVE_ASYNCHRONOUS is GROUPING_CUMULATIVE with
	// asynchronous semantics specified by the OpenTelemetry API,
	// indicating the value was collected through a callback.
	// Generally this is the aggregated value of an OpenTelemetry
	// ValueObserver instrument.  Typically expressed as a scalar or
	// histogram value.
	MetricDescriptor_GROUPING_CUMULATIVE_ASYNCHRONOUS MetricDescriptor_Kind = 84 // GROUPING|CUMULATIVE|ASYNCHRONOUS
)

// Enum value maps for MetricDescriptor_Kind.
var (
	MetricDescriptor_Kind_name = map[int32]string{
		0:   "INVALID_KIND",
		41:  "ADDING_MONOTONIC_INSTANTANEOUS",
		42:  "ADDING_MONOTONIC_DELTA",
		106: "ADDING_MONOTONIC_DELTA_ASYNCHRONOUS",
		44:  "ADDING_MONOTONIC_CUMULATIVE",
		108: "ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS",
		9:   "ADDING_INSTANTANEOUS",
		10:  "ADDING_DELTA",
		74:  "ADDING_DELTA_ASYNCHRONOUS",
		12:  "ADDING_CUMULATIVE",
		76:  "ADDING_CUMULATIVE_ASYNCHRONOUS",
		17:  "GROUPING_INSTANTANEOUS",
		18:  "GROUPING_DELTA",
		82:  "GROUPING_DELTA_ASYNCHRONOUS",
		20:  "GROUPING_CUMULATIVE",
		84:  "GROUPING_CUMULATIVE_ASYNCHRONOUS",
	}
	MetricDescriptor_Kind_value = map[string]int32{
		"INVALID_KIND":                             0,
		"ADDING_MONOTONIC_INSTANTANEOUS":           41,
		"ADDING_MONOTONIC_DELTA":                   42,
		"ADDING_MONOTONIC_DELTA_ASYNCHRONOUS":      106,
		"ADDING_MONOTONIC_CUMULATIVE":              44,
		"ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS": 108,
		"ADDING_INSTANTANEOUS":                     9,
		"ADDING_DELTA":                             10,
		"ADDING_DELTA_ASYNCHRONOUS":                74,
		"ADDING_CUMULATIVE":                        12,
		"ADDING_CUMULATIVE_ASYNCHRONOUS":           76,
		"GROUPING_INSTANTANEOUS":                   17,
		"GROUPING_DELTA":                           18,
		"GROUPING_DELTA_ASYNCHRONOUS":              82,
		"GROUPING_CUMULATIVE":                      20,
		"GROUPING_CUMULATIVE_ASYNCHRONOUS":         84,
	}
)

func (x MetricDescriptor_Kind) Enum() *MetricDescriptor_Kind {
	p := new(MetricDescriptor_Kind)
	*p = x
	return p
}

func (x MetricDescriptor_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricDescriptor_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_enumTypes[2].Descriptor()
}

func (MetricDescriptor_Kind) Type() protoreflect.EnumType {
	return &file_opentelemetry_proto_metrics_v1_metrics_proto_enumTypes[2]
}

func (x MetricDescriptor_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricDescriptor_Kind.Descriptor instead.
func (MetricDescriptor_Kind) EnumDescriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{3, 2}
}

// A collection of InstrumentationLibraryMetrics from a Resource.
type ResourceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource for the metrics in this message.
	// If this field is not set then no resource info is known.
	Resource *v1.Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// A list of metrics that originate from a resource.
	InstrumentationLibraryMetrics []*InstrumentationLibraryMetrics `protobuf:"bytes,2,rep,name=instrumentation_library_metrics,json=instrumentationLibraryMetrics,proto3" json:"instrumentation_library_metrics,omitempty"`
}

func (x *ResourceMetrics) Reset() {
	*x = ResourceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetrics) ProtoMessage() {}

func (x *ResourceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetrics.ProtoReflect.Descriptor instead.
func (*ResourceMetrics) Descriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceMetrics) GetResource() *v1.Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ResourceMetrics) GetInstrumentationLibraryMetrics() []*InstrumentationLibraryMetrics {
	if x != nil {
		return x.InstrumentationLibraryMetrics
	}
	return nil
}

// A collection of Metrics produced by an InstrumentationLibrary.
type InstrumentationLibraryMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The instrumentation library information for the metrics in this message.
	// If this field is not set then no library info is known.
	InstrumentationLibrary *v11.InstrumentationLibrary `protobuf:"bytes,1,opt,name=instrumentation_library,json=instrumentationLibrary,proto3" json:"instrumentation_library,omitempty"`
	// A list of metrics that originate from an instrumentation library.
	Metrics []*Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *InstrumentationLibraryMetrics) Reset() {
	*x = InstrumentationLibraryMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentationLibraryMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentationLibraryMetrics) ProtoMessage() {}

func (x *InstrumentationLibraryMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentationLibraryMetrics.ProtoReflect.Descriptor instead.
func (*InstrumentationLibraryMetrics) Descriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *InstrumentationLibraryMetrics) GetInstrumentationLibrary() *v11.InstrumentationLibrary {
	if x != nil {
		return x.InstrumentationLibrary
	}
	return nil
}

func (x *InstrumentationLibraryMetrics) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Metric contains one or more timeseries.
//
// The data model and relation between entities is shown in the
// diagram below.  Here, "DataPoint" is the term used to refer to any
// one of the specific data point kinds, and "points" is the term use
// to refer to any one of the lists of points contained in the Metric.
//
// - Metric is composed of a MetricDescriptor and a list of data points.
// - MetricDescriptor contains a name, description, unit, kind, and value type.
// - Points is a list of DataPoints (shown vertically).
// - DataPoint contains timestamps, labels, and one of the value type fields.
//
//     Metric
//  +----------+         +------------------------+
//  |descriptor|-------->| MetricDescriptor       |
//  |          |         | name                   |
//  |          |         | description            |
//  |          |         | unit                   |
//  |    points|--+      | kind                   |
//  +----------+  |      | value type             |
//                |      +------------------------+
//                |
//                |      +---------------------------+
//                |      |DataPoint 1                |
//                v      |+------+------+   +------+ |
//             +-----+   ||label |label |...|label | |
//             |  1  |-->||value1|value2|...|valueN| |
//             +-----+   |+------+------+   +------+ |
//             |  .  |   |+-----+                    |
//             |  .  |   ||value|                    |
//             |  .  |   |+-----+                    |
//             |  .  |   +---------------------------+
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |   +---------------------------+
//             |  .  |   |DataPoint M                |
//             +-----+   |+------+------+   +------+ |
//             |  M  |-->||label |label |...|label | |
//             +-----+   ||value1|value2|...|valueN| |
//                       |+------+------+   +------+ |
//                       |+-----+                    |
//                       ||value|                    |
//                       |+-----+                    |
//                       +---------------------------+
//
// All DataPoint types have includes three common fields:
// - Labels are the optional key-value pairs associated with the data point.
// - StartTimeUnixNano MUST be set to the start of the interval when the
//   descriptor kind includes CUMULATIVE or DELTA.  This field is not set
//   for INSTANTANEOUS timeseries, where instead the TimeUnixNano field is
//   set for individual points.
// - TimeUnixNano MUST be set to:
//   - the end of the interval (CUMULATIVE or DELTA)
//   - the instantaneous time of the event (INSTANTANEOUS).
//
// The ValueType of the descriptor determines which of the repeated points
// fields is used.
type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Descriptor describes the Metric.
	//
	// N.B. "Descriptor" is a reserved term in protobuf, protoc
	// generates a field named "Descriptor_" thus we use "metric_descriptor".
	MetricDescriptor    *MetricDescriptor     `protobuf:"bytes,1,opt,name=metric_descriptor,json=metricDescriptor,proto3" json:"metric_descriptor,omitempty"`
	ScalarDataPoints    []*ScalarDataPoint    `protobuf:"bytes,2,rep,name=scalar_data_points,json=scalarDataPoints,proto3" json:"scalar_data_points,omitempty"`
	HistogramDataPoints []*HistogramDataPoint `protobuf:"bytes,3,rep,name=histogram_data_points,json=histogramDataPoints,proto3" json:"histogram_data_points,omitempty"`
	SummaryDataPoints   []*SummaryDataPoint   `protobuf:"bytes,4,rep,name=summary_data_points,json=summaryDataPoints,proto3" json:"summary_data_points,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *Metric) GetMetricDescriptor() *MetricDescriptor {
	if x != nil {
		return x.MetricDescriptor
	}
	return nil
}

func (x *Metric) GetScalarDataPoints() []*ScalarDataPoint {
	if x != nil {
		return x.ScalarDataPoints
	}
	return nil
}

func (x *Metric) GetHistogramDataPoints() []*HistogramDataPoint {
	if x != nil {
		return x.HistogramDataPoints
	}
	return nil
}

func (x *Metric) GetSummaryDataPoints() []*SummaryDataPoint {
	if x != nil {
		return x.SummaryDataPoints
	}
	return nil
}

// Defines a metric type and its schema.
type MetricDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the metric, including its DNS name prefix. It must be unique.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Unit in which the metric value is reported. Follows the format
	// described by http://unitsofmeasure.org/ucum.html.
	Unit string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	// ValueType is the type of values this metric has.
	ValueType MetricDescriptor_ValueType `protobuf:"varint,4,opt,name=value_type,json=valueType,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_ValueType" json:"value_type,omitempty"`
	// Kind describes properties of the Metric that are necessary to
	// interpret the data and/or describe how it was produced.
	Kind MetricDescriptor_Kind `protobuf:"varint,5,opt,name=kind,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_Kind" json:"kind,omitempty"`
}

func (x *MetricDescriptor) Reset() {
	*x = MetricDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricDescriptor) ProtoMessage() {}

func (x *MetricDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricDescriptor.ProtoReflect.Descriptor instead.
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *MetricDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MetricDescriptor) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *MetricDescriptor) GetValueType() MetricDescriptor_ValueType {
	if x != nil {
		return x.ValueType
	}
	return MetricDescriptor_INVALID_VALUE_TYPE
}

func (x *MetricDescriptor) GetKind() MetricDescriptor_Kind {
	if x != nil {
		return x.Kind
	}
	return MetricDescriptor_INVALID_KIND
}

// ScalarDataPoint is a single data point in a timeseries that
// describes the time-varying values of a SCALAR_INT64 or
// SCALAR_DOUBLE metric.
type ScalarDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unix_nano is the time when the value was reset to zero
	// for CUMULATIVE or DELTA metrics.
	//
	// The value is measured over the time interval
	// (start_time_unix_nano, time_unix_nano].  Value is UNIX Epoch time
	// in nanoseconds since 00:00:00 UTC on 1 January 1970.  The value
	// MUST be set when the instrument descriptor Kind includes either
	// CUMULATIVE or DELTA and MUST NOT be set when Kind includes
	// INSTANTANOUS.
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// time_unix_nano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// value itself, if SCALAR_INT64.
	ValueInt64 int64 `protobuf:"varint,4,opt,name=value_int64,json=valueInt64,proto3" json:"value_int64,omitempty"`
	// value itself, if SCALAR_DOUBLE.
	ValueDouble float64 `protobuf:"fixed64,5,opt,name=value_double,json=valueDouble,proto3" json:"value_double,omitempty"`
}

func (x *ScalarDataPoint) Reset() {
	*x = ScalarDataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarDataPoint) ProtoMessage() {}

func (x *ScalarDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarDataPoint.ProtoReflect.Descriptor instead.
func (*ScalarDataPoint) Descriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *ScalarDataPoint) GetLabels() []*v11.StringKeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ScalarDataPoint) GetStartTimeUnixNano() uint64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *ScalarDataPoint) GetTimeUnixNano() uint64 {
	if x != nil {
		return x.TimeUnixNano
	}
	return 0
}

func (x *ScalarDataPoint) GetValueInt64() int64 {
	if x != nil {
		return x.ValueInt64
	}
	return 0
}

func (x *ScalarDataPoint) GetValueDouble() float64 {
	if x != nil {
		return x.ValueDouble
	}
	return 0
}

// HistogramDataPoint is a single data point in a timeseries that describes the time-varying
// values of a Histogram. A Histogram contains summary statistics for a population of values,
// it may optionally contain the distribution of those values across a set of buckets.
type HistogramDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unix_nano is the time when the cumulative value was reset to zero.
	//
	// The cumulative value is over the time interval (start_time_unix_nano, time_unix_nano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	// Note: this field is always unspecified and ignored if MetricDescriptor.type==GAUGE_HISTOGRAM.
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// time_unix_nano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// count is the number of values in the population. Must be non-negative. This value
	// must be equal to the sum of the "count" fields in buckets if a histogram is provided.
	Count uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// sum of the values in the population. If count is zero then this field
	// must be zero. This value must be equal to the sum of the "sum" fields in buckets if
	// a histogram is provided.
	Sum float64 `protobuf:"fixed64,5,opt,name=sum,proto3" json:"sum,omitempty"`
	// buckets is an optional field contains the values of histogram for each bucket.
	//
	// The sum of the values in the buckets "count" field must equal the value in the count field.
	//
	// The number of elements in buckets array must be by one greater than the
	// number of elements in bucket_bounds array.
	//
	// Note: if HistogramDataPoint.bucket_options defines bucket bounds then this field
	// must also be present and number of elements in this field must be equal to the
	// number of buckets defined by bucket_options.
	Buckets []*HistogramDataPoint_Bucket `protobuf:"bytes,6,rep,name=buckets,proto3" json:"buckets,omitempty"`
	// explicit_bounds specifies buckets with explicitly defined bounds for values.
	// The bucket boundaries are described by "bounds" field.
	//
	// This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
	// at index i are:
	//
	// [0, bounds[i]) for i == 0
	// [bounds[i-1], bounds[i]) for 0 < i < N-1
	// [bounds[i], +infinity) for i == N-1
	// The values in bounds array must be strictly increasing and > 0.
	//
	// Note: only [a, b) intervals are currently supported for each bucket. If we decides
	// to also support (a, b] intervals we should add support for these by defining a boolean
	// value which decides what type of intervals to use.
	ExplicitBounds []float64 `protobuf:"fixed64,7,rep,packed,name=explicit_bounds,json=explicitBounds,proto3" json:"explicit_bounds,omitempty"`
}

func (x *HistogramDataPoint) Reset() {
	*x = HistogramDataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramDataPoint) ProtoMessage() {}

func (x *HistogramDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramDataPoint.ProtoReflect.Descriptor instead.
func (*HistogramDataPoint) Descriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *HistogramDataPoint) GetLabels() []*v11.StringKeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *HistogramDataPoint) GetStartTimeUnixNano() uint64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *HistogramDataPoint) GetTimeUnixNano() uint64 {
	if x != nil {
		return x.TimeUnixNano
	}
	return 0
}

func (x *HistogramDataPoint) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *HistogramDataPoint) GetSum() float64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *HistogramDataPoint) GetBuckets() []*HistogramDataPoint_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *HistogramDataPoint) GetExplicitBounds() []float64 {
	if x != nil {
		return x.ExplicitBounds
	}
	return nil
}

// SummaryDataPoint is a single data point in a timeseries that describes the time-varying
// values of a Summary metric.
type SummaryDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unix_nano is the time when the cumulative value was reset to zero.
	//
	// The cumulative value is over the time interval (start_time_unix_nano, time_unix_nano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// time_unix_nano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// The total number of recorded values since start_time. Optional since
	// some systems don't expose this.
	Count uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// The total sum of recorded values since start_time. Optional since some
	// systems don't expose this. If count is zero then this field must be zero.
	Sum float64 `protobuf:"fixed64,5,opt,name=sum,proto3" json:"sum,omitempty"`
	// A list of values at different percentiles of the distribution calculated
	// from the current snapshot. The percentiles must be strictly increasing.
	PercentileValues []*SummaryDataPoint_ValueAtPercentile `protobuf:"bytes,6,rep,name=percentile_values,json=percentileValues,proto3" json:"percentile_values,omitempty"`
}

func (x *SummaryDataPoint) Reset() {
	*x = SummaryDataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryDataPoint) ProtoMessage() {}

func (x *SummaryDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryDataPoint.ProtoReflect.Descriptor instead.
func (*SummaryDataPoint) Descriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{6}
}

func (x *SummaryDataPoint) GetLabels() []*v11.StringKeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SummaryDataPoint) GetStartTimeUnixNano() uint64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *SummaryDataPoint) GetTimeUnixNano() uint64 {
	if x != nil {
		return x.TimeUnixNano
	}
	return 0
}

func (x *SummaryDataPoint) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SummaryDataPoint) GetSum() float64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *SummaryDataPoint) GetPercentileValues() []*SummaryDataPoint_ValueAtPercentile {
	if x != nil {
		return x.PercentileValues
	}
	return nil
}

// Bucket contains values for a bucket.
type HistogramDataPoint_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of values in each bucket of the histogram, as described by
	// bucket_options.
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// exemplar is an optional representative value of the bucket.
	Exemplar *HistogramDataPoint_Bucket_Exemplar `protobuf:"bytes,2,opt,name=exemplar,proto3" json:"exemplar,omitempty"`
}

func (x *HistogramDataPoint_Bucket) Reset() {
	*x = HistogramDataPoint_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramDataPoint_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramDataPoint_Bucket) ProtoMessage() {}

func (x *HistogramDataPoint_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramDataPoint_Bucket.ProtoReflect.Descriptor instead.
func (*HistogramDataPoint_Bucket) Descriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{5, 0}
}

func (x *HistogramDataPoint_Bucket) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *HistogramDataPoint_Bucket) GetExemplar() *HistogramDataPoint_Bucket_Exemplar {
	if x != nil {
		return x.Exemplar
	}
	return nil
}

// Exemplars are example points that may be used to annotate aggregated
// Histogram values. They are metadata that gives information about a
// particular value added to a Histogram bucket.
type HistogramDataPoint_Bucket_Exemplar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of the exemplar point. It determines which bucket the exemplar belongs to.
	// If bucket_options define bounds for this bucket then this value must be within
	// the defined bounds.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// time_unix_nano is the moment when this exemplar was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// exemplar_attachments are contextual information about the example value.
	// Keys in this list must be unique.
	Attachments []*v11.StringKeyValue `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *HistogramDataPoint_Bucket_Exemplar) Reset() {
	*x = HistogramDataPoint_Bucket_Exemplar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramDataPoint_Bucket_Exemplar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramDataPoint_Bucket_Exemplar) ProtoMessage() {}

func (x *HistogramDataPoint_Bucket_Exemplar) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramDataPoint_Bucket_Exemplar.ProtoReflect.Descriptor instead.
func (*HistogramDataPoint_Bucket_Exemplar) Descriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *HistogramDataPoint_Bucket_Exemplar) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *HistogramDataPoint_Bucket_Exemplar) GetTimeUnixNano() uint64 {
	if x != nil {
		return x.TimeUnixNano
	}
	return 0
}

func (x *HistogramDataPoint_Bucket_Exemplar) GetAttachments() []*v11.StringKeyValue {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// Represents the value at a given percentile of a distribution.
//
// To record Min and Max values following conventions are used:
// - The 100th percentile is equivalent to the maximum value observed.
// - The 0th percentile is equivalent to the minimum value observed.
//
// See the following issue for more context:
// https://github.com/open-telemetry/opentelemetry-proto/issues/125
type SummaryDataPoint_ValueAtPercentile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentile of a distribution. Must be in the interval
	// [0.0, 100.0].
	Percentile float64 `protobuf:"fixed64,1,opt,name=percentile,proto3" json:"percentile,omitempty"`
	// The value at the given percentile of a distribution.
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SummaryDataPoint_ValueAtPercentile) Reset() {
	*x = SummaryDataPoint_ValueAtPercentile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryDataPoint_ValueAtPercentile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryDataPoint_ValueAtPercentile) ProtoMessage() {}

func (x *SummaryDataPoint_ValueAtPercentile) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryDataPoint_ValueAtPercentile.ProtoReflect.Descriptor instead.
func (*SummaryDataPoint_ValueAtPercentile) Descriptor() ([]byte, []int) {
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SummaryDataPoint_ValueAtPercentile) GetPercentile() float64 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

func (x *SummaryDataPoint_ValueAtPercentile) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_opentelemetry_proto_metrics_v1_metrics_proto protoreflect.FileDescriptor

var file_opentelemetry_proto_metrics_v1_metrics_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x2a,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x45,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x1f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x1d,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xd1, 0x01,
	0x0a, 0x1d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x6e, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12,
	0x40, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0x90, 0x03, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x5d, 0x0a, 0x11,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x12, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x15, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x13, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x11, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0xe1, 0x07, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x59, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x64, 0x0a, 0x09, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x04, 0x22,
	0x8d, 0x01, 0x0a, 0x0b, 0x4b, 0x69, 0x6e, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x4d, 0x41, 0x53, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x54, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x4c,
	0x54, 0x41, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x08,
	0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x20, 0x12, 0x10, 0x0a,
	0x0c, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x40, 0x22,
	0xe6, 0x03, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x44,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x10, 0x29, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e,
	0x49, 0x43, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x2a, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x44,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x44,
	0x45, 0x4c, 0x54, 0x41, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55,
	0x53, 0x10, 0x6a, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f,
	0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x2c, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53,
	0x10, 0x6c, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x54, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c,
	0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x0a, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x41,
	0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x4a, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x48,
	0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x4c, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x41, 0x4e, 0x45, 0x4f,
	0x55, 0x53, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47,
	0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43,
	0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x52, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x14, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x48,
	0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x10, 0x54, 0x22, 0xf3, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78,
	0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x22, 0xf3,
	0x04, 0x0a, 0x12, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x14,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f,
	0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e,
	0x61, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x53, 0x0a, 0x07, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0x98, 0x02, 0x0a, 0x06, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x08, 0x65, 0x78,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72,
	0x52, 0x08, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x1a, 0x97, 0x01, 0x0a, 0x08, 0x45,
	0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e,
	0x61, 0x6e, 0x6f, 0x12, 0x4f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x10, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e,
	0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e,
	0x61, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12,
	0x6f, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x10,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0x49, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x0a, 0x21, 0x69,
	0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x42, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescOnce sync.Once
	file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescData = file_opentelemetry_proto_metrics_v1_metrics_proto_rawDesc
)

func file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescGZIP() []byte {
	file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescOnce.Do(func() {
		file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescData)
	})
	return file_opentelemetry_proto_metrics_v1_metrics_proto_rawDescData
}

var file_opentelemetry_proto_metrics_v1_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_opentelemetry_proto_metrics_v1_metrics_proto_goTypes = []interface{}{
	(MetricDescriptor_ValueType)(0),            // 0: opentelemetry.proto.metrics.v1.MetricDescriptor.ValueType
	(MetricDescriptor_KindElement)(0),          // 1: opentelemetry.proto.metrics.v1.MetricDescriptor.KindElement
	(MetricDescriptor_Kind)(0),                 // 2: opentelemetry.proto.metrics.v1.MetricDescriptor.Kind
	(*ResourceMetrics)(nil),                    // 3: opentelemetry.proto.metrics.v1.ResourceMetrics
	(*InstrumentationLibraryMetrics)(nil),      // 4: opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics
	(*Metric)(nil),                             // 5: opentelemetry.proto.metrics.v1.Metric
	(*MetricDescriptor)(nil),                   // 6: opentelemetry.proto.metrics.v1.MetricDescriptor
	(*ScalarDataPoint)(nil),                    // 7: opentelemetry.proto.metrics.v1.ScalarDataPoint
	(*HistogramDataPoint)(nil),                 // 8: opentelemetry.proto.metrics.v1.HistogramDataPoint
	(*SummaryDataPoint)(nil),                   // 9: opentelemetry.proto.metrics.v1.SummaryDataPoint
	(*HistogramDataPoint_Bucket)(nil),          // 10: opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket
	(*HistogramDataPoint_Bucket_Exemplar)(nil), // 11: opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket.Exemplar
	(*SummaryDataPoint_ValueAtPercentile)(nil), // 12: opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtPercentile
	(*v1.Resource)(nil),                        // 13: opentelemetry.proto.resource.v1.Resource
	(*v11.InstrumentationLibrary)(nil),         // 14: opentelemetry.proto.common.v1.InstrumentationLibrary
	(*v11.StringKeyValue)(nil),                 // 15: opentelemetry.proto.common.v1.StringKeyValue
}
var file_opentelemetry_proto_metrics_v1_metrics_proto_depIdxs = []int32{
	13, // 0: opentelemetry.proto.metrics.v1.ResourceMetrics.resource:type_name -> opentelemetry.proto.resource.v1.Resource
	4,  // 1: opentelemetry.proto.metrics.v1.ResourceMetrics.instrumentation_library_metrics:type_name -> opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics
	14, // 2: opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.instrumentation_library:type_name -> opentelemetry.proto.common.v1.InstrumentationLibrary
	5,  // 3: opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.metrics:type_name -> opentelemetry.proto.metrics.v1.Metric
	6,  // 4: opentelemetry.proto.metrics.v1.Metric.metric_descriptor:type_name -> opentelemetry.proto.metrics.v1.MetricDescriptor
	7,  // 5: opentelemetry.proto.metrics.v1.Metric.scalar_data_points:type_name -> opentelemetry.proto.metrics.v1.ScalarDataPoint
	8,  // 6: opentelemetry.proto.metrics.v1.Metric.histogram_data_points:type_name -> opentelemetry.proto.metrics.v1.HistogramDataPoint
	9,  // 7: opentelemetry.proto.metrics.v1.Metric.summary_data_points:type_name -> opentelemetry.proto.metrics.v1.SummaryDataPoint
	0,  // 8: opentelemetry.proto.metrics.v1.MetricDescriptor.value_type:type_name -> opentelemetry.proto.metrics.v1.MetricDescriptor.ValueType
	2,  // 9: opentelemetry.proto.metrics.v1.MetricDescriptor.kind:type_name -> opentelemetry.proto.metrics.v1.MetricDescriptor.Kind
	15, // 10: opentelemetry.proto.metrics.v1.ScalarDataPoint.labels:type_name -> opentelemetry.proto.common.v1.StringKeyValue
	15, // 11: opentelemetry.proto.metrics.v1.HistogramDataPoint.labels:type_name -> opentelemetry.proto.common.v1.StringKeyValue
	10, // 12: opentelemetry.proto.metrics.v1.HistogramDataPoint.buckets:type_name -> opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket
	15, // 13: opentelemetry.proto.metrics.v1.SummaryDataPoint.labels:type_name -> opentelemetry.proto.common.v1.StringKeyValue
	12, // 14: opentelemetry.proto.metrics.v1.SummaryDataPoint.percentile_values:type_name -> opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtPercentile
	11, // 15: opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket.exemplar:type_name -> opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket.Exemplar
	15, // 16: opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket.Exemplar.attachments:type_name -> opentelemetry.proto.common.v1.StringKeyValue
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_opentelemetry_proto_metrics_v1_metrics_proto_init() }
func file_opentelemetry_proto_metrics_v1_metrics_proto_init() {
	if File_opentelemetry_proto_metrics_v1_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentationLibraryMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarDataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramDataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryDataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramDataPoint_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramDataPoint_Bucket_Exemplar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryDataPoint_ValueAtPercentile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opentelemetry_proto_metrics_v1_metrics_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opentelemetry_proto_metrics_v1_metrics_proto_goTypes,
		DependencyIndexes: file_opentelemetry_proto_metrics_v1_metrics_proto_depIdxs,
		EnumInfos:         file_opentelemetry_proto_metrics_v1_metrics_proto_enumTypes,
		MessageInfos:      file_opentelemetry_proto_metrics_v1_metrics_proto_msgTypes,
	}.Build()
	File_opentelemetry_proto_metrics_v1_metrics_proto = out.File
	file_opentelemetry_proto_metrics_v1_metrics_proto_rawDesc = nil
	file_opentelemetry_proto_metrics_v1_metrics_proto_goTypes = nil
	file_opentelemetry_proto_metrics_v1_metrics_proto_depIdxs = nil
}
