// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opentelemetry/proto/metrics/v1/metrics.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v11 "github.com/open-telemetry/opentelemetry-proto/gen/go/common/v1"
	v1 "github.com/open-telemetry/opentelemetry-proto/gen/go/resource/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ValueType is the type of values a metric has.  ValueType determines
// which field of the DataPoint will be used for Metrics with this
// descriptor.
type MetricDescriptor_ValueType int32

const (
	// INVALID_TYPE is the default ValueType, it MUST not be used.
	MetricDescriptor_INVALID_VALUE_TYPE MetricDescriptor_ValueType = 0
	// Metric.Points MUST use DataPoint.value_int64.
	MetricDescriptor_SCALAR_INT64 MetricDescriptor_ValueType = 2
	// Metric.Points MUST use DataPoint.value_double.
	MetricDescriptor_SCALAR_DOUBLE MetricDescriptor_ValueType = 3
	// Metric.Points MUST use DataPoint.histogram with int64 boundaries.
	MetricDescriptor_HISTOGRAM_INT64 MetricDescriptor_ValueType = 4
	// Metric.Points MUST use DataPoint.histogram with floating point boundaries.
	MetricDescriptor_HISTOGRAM_DOUBLE MetricDescriptor_ValueType = 5
	// Metric.Points MUST use DataPoint.summary with int64 min/max/sum/last values.
	MetricDescriptor_SUMMARY_INT64 MetricDescriptor_ValueType = 6
	// Metric.Points MUST use DataPoint.summary with double min/max/sum/last values.
	MetricDescriptor_SUMMARY_DOUBLE MetricDescriptor_ValueType = 7
	// Metric.Points MUST use DataPoint.raw with int64 values.
	MetricDescriptor_RAW_INT64 MetricDescriptor_ValueType = 8
	// Metric.Points MUST use DataPoint.raw with double value.
	MetricDescriptor_RAW_DOUBLE MetricDescriptor_ValueType = 9
)

var MetricDescriptor_ValueType_name = map[int32]string{
	0: "INVALID_VALUE_TYPE",
	2: "SCALAR_INT64",
	3: "SCALAR_DOUBLE",
	4: "HISTOGRAM_INT64",
	5: "HISTOGRAM_DOUBLE",
	6: "SUMMARY_INT64",
	7: "SUMMARY_DOUBLE",
	8: "RAW_INT64",
	9: "RAW_DOUBLE",
}

var MetricDescriptor_ValueType_value = map[string]int32{
	"INVALID_VALUE_TYPE": 0,
	"SCALAR_INT64":       2,
	"SCALAR_DOUBLE":      3,
	"HISTOGRAM_INT64":    4,
	"HISTOGRAM_DOUBLE":   5,
	"SUMMARY_INT64":      6,
	"SUMMARY_DOUBLE":     7,
	"RAW_INT64":          8,
	"RAW_DOUBLE":         9,
}

func (x MetricDescriptor_ValueType) String() string {
	return proto.EnumName(MetricDescriptor_ValueType_name, int32(x))
}

func (MetricDescriptor_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3, 0}
}

// KindMask contains a set of bit masks used to construct Kind enum values.
// There are 7 bits used presently.
type MetricDescriptor_KindMask int32

const (
	// INVALID_KIND_MASK is not used.
	MetricDescriptor_INVALID_KIND_MASK MetricDescriptor_KindMask = 0
	// INSTANTANEOUS is a metric whose values are measured at a particular
	// instant. The values are not aggregated over any time interval and are
	// unique per timestamp. As such, these metrics are not expected to have
	// an associated start time.
	MetricDescriptor_INSTANTANEOUS MetricDescriptor_KindMask = 1
	// DELTA is a metric whose values are the aggregation of measurements
	// made over a time interval. Successive metrics contain aggregation of
	// values from continuous and non-overlapping intervals.
	//
	// The values for a DELTA metric are based only on the time interval
	// associated with one measurement cycle. There is no dependency on
	// previous measurements like is the case for CUMULATIVE metrics.
	//
	// For example, consider a system measuring the number of requests that
	// it receives and reports the sum of these requests every second as a
	// DELTA metric:
	//
	//   1. The system starts receiving at time=t_0.
	//   2. A request is received, the system measures 1 request.
	//   3. A request is received, the system measures 1 request.
	//   4. A request is received, the system measures 1 request.
	//   5. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0 to
	//      t_0+1 with a value of 3.
	//   6. A request is received, the system measures 1 request.
	//   7. A request is received, the system measures 1 request.
	//   8. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0+1 to
	//      t_0+2 with a value of 2.
	MetricDescriptor_DELTA MetricDescriptor_KindMask = 4
	// CUMULATIVE is a metric whose values are the aggregation of
	// successively made measurements from a fixed start time until the last
	// reported measurement. This means that current values of a CUMULATIVE
	// metric depend on all previous measurements since the start time.
	// Because of this, the sender is required to retain this state in some
	// form. If this state is lost or invalidated, the CUMULATIVE metric
	// values MUST be reset and a new fixed start time following the last
	// reported measurement time sent MUST be used.
	//
	// For example, consider a system measuring the number of requests that
	// it receives and reports the sum of these requests every second as a
	// CUMULATIVE metric:
	//
	//   1. The system starts receiving at time=t_0.
	//   2. A request is received, the system measures 1 request.
	//   3. A request is received, the system measures 1 request.
	//   4. A request is received, the system measures 1 request.
	//   5. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0 to
	//      t_0+1 with a value of 3.
	//   6. A request is received, the system measures 1 request.
	//   7. A request is received, the system measures 1 request.
	//   8. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_0 to
	//      t_0+2 with a value of 5.
	//   9. The system experiences a fault and loses state.
	//   10. The system recovers and resumes receiving at time=t_1.
	//   11. A request is received, the system measures 1 request.
	//   12. The 1 second collection cycle ends. A metric is exported for the
	//      number of requests received over the interval of time t_1 to
	//      t_0+1 with a value of 1.
	MetricDescriptor_CUMULATIVE MetricDescriptor_KindMask = 2
	// GROUPING structure means the value has been computed by combining
	// individual values in a meaningful aggregation.
	// [TODO MrAlias wrote a good comment, use it]
	MetricDescriptor_GROUPING MetricDescriptor_KindMask = 8
	// ADDING structure means the value has been computed
	// [TODO MrAlias wrote a good comment, use it]
	MetricDescriptor_ADDING MetricDescriptor_KindMask = 16
	// MONOTONIC may be set in conjunction with ADDING kinds.
	MetricDescriptor_MONOTONIC MetricDescriptor_KindMask = 32
	// SYNCHRONOUS may be set for any kind of metric, indicating it was generated
	// through synchronous events in which the application calls the API.  If
	// SYNCHRONOUS is not set, it implies the event originated in a callback
	// where the SDK called the application.
	MetricDescriptor_SYNCHRONOUS MetricDescriptor_KindMask = 64
)

var MetricDescriptor_KindMask_name = map[int32]string{
	0:  "INVALID_KIND_MASK",
	1:  "INSTANTANEOUS",
	4:  "DELTA",
	2:  "CUMULATIVE",
	8:  "GROUPING",
	16: "ADDING",
	32: "MONOTONIC",
	64: "SYNCHRONOUS",
}

var MetricDescriptor_KindMask_value = map[string]int32{
	"INVALID_KIND_MASK": 0,
	"INSTANTANEOUS":     1,
	"DELTA":             4,
	"CUMULATIVE":        2,
	"GROUPING":          8,
	"ADDING":            16,
	"MONOTONIC":         32,
	"SYNCHRONOUS":       64,
}

func (x MetricDescriptor_KindMask) String() string {
	return proto.EnumName(MetricDescriptor_KindMask_name, int32(x))
}

func (MetricDescriptor_KindMask) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3, 1}
}

// Kind explains how the DataPoint was produced (Structure), how
// the point was aggregated with resepect to time (Temporality), and
// whether it was computed synchronously, and when the Structure is
// ADDING, whether the captured Sum is also monotonic.
//
// Kind names are generated from valid combinations of KindMask
// by joining the effective KindMasks using underscores.  There
// are:
//
// - 3 possibilities for Temporality
// - 2 possibilities for Synchronous/Asynchronous
// - 3 possibilities for Structure/Monotonicity: Grouping, Adding
//   Monotonic, and Adding (not monotonic)
//
// This makes 18 valid values.
type MetricDescriptor_Kind int32

const (
	// INVALID_KIND is the default Kind, it MUST not be used.
	MetricDescriptor_INVALID_KIND                                MetricDescriptor_Kind = 0
	MetricDescriptor_ADDING_MONOTONIC_INSTANTANEOUS_SYNCHRONOUS  MetricDescriptor_Kind = 113
	MetricDescriptor_ADDING_MONOTONIC_INSTANTANEOUS_ASYNCHRONOUS MetricDescriptor_Kind = 49
	MetricDescriptor_ADDING_MONOTONIC_CUMULATIVE_SYNCHRONOUS     MetricDescriptor_Kind = 114
	MetricDescriptor_ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS    MetricDescriptor_Kind = 50
	MetricDescriptor_ADDING_MONOTONIC_DELTA_SYNCHRONOUS          MetricDescriptor_Kind = 116
	MetricDescriptor_ADDING_MONOTONIC_DELTA_ASYNCHRONOUS         MetricDescriptor_Kind = 52
	MetricDescriptor_ADDING_INSTANTANEOUS_SYNCHRONOUS            MetricDescriptor_Kind = 81
	MetricDescriptor_ADDING_INSTANTANEOUS_ASYNCHRONOUS           MetricDescriptor_Kind = 17
	MetricDescriptor_ADDING_CUMULATIVE_SYNCHRONOUS               MetricDescriptor_Kind = 82
	MetricDescriptor_ADDING_CUMULATIVE_ASYNCHRONOUS              MetricDescriptor_Kind = 18
	MetricDescriptor_ADDING_DELTA_SYNCHRONOUS                    MetricDescriptor_Kind = 84
	MetricDescriptor_ADDING_DELTA_ASYNCHRONOUS                   MetricDescriptor_Kind = 20
	MetricDescriptor_GROUPING_INSTANTANEOUS_SYNCHRONOUS          MetricDescriptor_Kind = 73
	MetricDescriptor_GROUPING_INSTANTANEOUS_ASYNCHRONOUS         MetricDescriptor_Kind = 9
	MetricDescriptor_GROUPING_CUMULATIVE_SYNCHRONOUS             MetricDescriptor_Kind = 74
	MetricDescriptor_GROUPING_CUMULATIVE_ASYNCHRONOUS            MetricDescriptor_Kind = 10
	MetricDescriptor_GROUPING_DELTA_SYNCHRONOUS                  MetricDescriptor_Kind = 76
	MetricDescriptor_GROUPING_DELTA_ASYNCHRONOUS                 MetricDescriptor_Kind = 12
)

var MetricDescriptor_Kind_name = map[int32]string{
	0:   "INVALID_KIND",
	113: "ADDING_MONOTONIC_INSTANTANEOUS_SYNCHRONOUS",
	49:  "ADDING_MONOTONIC_INSTANTANEOUS_ASYNCHRONOUS",
	114: "ADDING_MONOTONIC_CUMULATIVE_SYNCHRONOUS",
	50:  "ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS",
	116: "ADDING_MONOTONIC_DELTA_SYNCHRONOUS",
	52:  "ADDING_MONOTONIC_DELTA_ASYNCHRONOUS",
	81:  "ADDING_INSTANTANEOUS_SYNCHRONOUS",
	17:  "ADDING_INSTANTANEOUS_ASYNCHRONOUS",
	82:  "ADDING_CUMULATIVE_SYNCHRONOUS",
	18:  "ADDING_CUMULATIVE_ASYNCHRONOUS",
	84:  "ADDING_DELTA_SYNCHRONOUS",
	20:  "ADDING_DELTA_ASYNCHRONOUS",
	73:  "GROUPING_INSTANTANEOUS_SYNCHRONOUS",
	9:   "GROUPING_INSTANTANEOUS_ASYNCHRONOUS",
	74:  "GROUPING_CUMULATIVE_SYNCHRONOUS",
	10:  "GROUPING_CUMULATIVE_ASYNCHRONOUS",
	76:  "GROUPING_DELTA_SYNCHRONOUS",
	12:  "GROUPING_DELTA_ASYNCHRONOUS",
}

var MetricDescriptor_Kind_value = map[string]int32{
	"INVALID_KIND": 0,
	"ADDING_MONOTONIC_INSTANTANEOUS_SYNCHRONOUS":  113,
	"ADDING_MONOTONIC_INSTANTANEOUS_ASYNCHRONOUS": 49,
	"ADDING_MONOTONIC_CUMULATIVE_SYNCHRONOUS":     114,
	"ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS":    50,
	"ADDING_MONOTONIC_DELTA_SYNCHRONOUS":          116,
	"ADDING_MONOTONIC_DELTA_ASYNCHRONOUS":         52,
	"ADDING_INSTANTANEOUS_SYNCHRONOUS":            81,
	"ADDING_INSTANTANEOUS_ASYNCHRONOUS":           17,
	"ADDING_CUMULATIVE_SYNCHRONOUS":               82,
	"ADDING_CUMULATIVE_ASYNCHRONOUS":              18,
	"ADDING_DELTA_SYNCHRONOUS":                    84,
	"ADDING_DELTA_ASYNCHRONOUS":                   20,
	"GROUPING_INSTANTANEOUS_SYNCHRONOUS":          73,
	"GROUPING_INSTANTANEOUS_ASYNCHRONOUS":         9,
	"GROUPING_CUMULATIVE_SYNCHRONOUS":             74,
	"GROUPING_CUMULATIVE_ASYNCHRONOUS":            10,
	"GROUPING_DELTA_SYNCHRONOUS":                  76,
	"GROUPING_DELTA_ASYNCHRONOUS":                 12,
}

func (x MetricDescriptor_Kind) String() string {
	return proto.EnumName(MetricDescriptor_Kind_name, int32(x))
}

func (MetricDescriptor_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3, 2}
}

// A collection of InstrumentationLibraryMetrics from a Resource.
type ResourceMetrics struct {
	// The resource for the metrics in this message.
	// If this field is not set then no resource info is known.
	Resource *v1.Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// A list of metrics that originate from a resource.
	InstrumentationLibraryMetrics []*InstrumentationLibraryMetrics `protobuf:"bytes,2,rep,name=instrumentation_library_metrics,json=instrumentationLibraryMetrics,proto3" json:"instrumentation_library_metrics,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                         `json:"-"`
	XXX_unrecognized              []byte                           `json:"-"`
	XXX_sizecache                 int32                            `json:"-"`
}

func (m *ResourceMetrics) Reset()         { *m = ResourceMetrics{} }
func (m *ResourceMetrics) String() string { return proto.CompactTextString(m) }
func (*ResourceMetrics) ProtoMessage()    {}
func (*ResourceMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{0}
}

func (m *ResourceMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceMetrics.Unmarshal(m, b)
}
func (m *ResourceMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceMetrics.Marshal(b, m, deterministic)
}
func (m *ResourceMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceMetrics.Merge(m, src)
}
func (m *ResourceMetrics) XXX_Size() int {
	return xxx_messageInfo_ResourceMetrics.Size(m)
}
func (m *ResourceMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceMetrics proto.InternalMessageInfo

func (m *ResourceMetrics) GetResource() *v1.Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceMetrics) GetInstrumentationLibraryMetrics() []*InstrumentationLibraryMetrics {
	if m != nil {
		return m.InstrumentationLibraryMetrics
	}
	return nil
}

// A collection of Metrics produced by an InstrumentationLibrary.
type InstrumentationLibraryMetrics struct {
	// The instrumentation library information for the metrics in this message.
	// If this field is not set then no library info is known.
	InstrumentationLibrary *v11.InstrumentationLibrary `protobuf:"bytes,1,opt,name=instrumentation_library,json=instrumentationLibrary,proto3" json:"instrumentation_library,omitempty"`
	// A list of metrics that originate from an instrumentation library.
	Metrics              []*Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *InstrumentationLibraryMetrics) Reset()         { *m = InstrumentationLibraryMetrics{} }
func (m *InstrumentationLibraryMetrics) String() string { return proto.CompactTextString(m) }
func (*InstrumentationLibraryMetrics) ProtoMessage()    {}
func (*InstrumentationLibraryMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{1}
}

func (m *InstrumentationLibraryMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentationLibraryMetrics.Unmarshal(m, b)
}
func (m *InstrumentationLibraryMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentationLibraryMetrics.Marshal(b, m, deterministic)
}
func (m *InstrumentationLibraryMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentationLibraryMetrics.Merge(m, src)
}
func (m *InstrumentationLibraryMetrics) XXX_Size() int {
	return xxx_messageInfo_InstrumentationLibraryMetrics.Size(m)
}
func (m *InstrumentationLibraryMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentationLibraryMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentationLibraryMetrics proto.InternalMessageInfo

func (m *InstrumentationLibraryMetrics) GetInstrumentationLibrary() *v11.InstrumentationLibrary {
	if m != nil {
		return m.InstrumentationLibrary
	}
	return nil
}

func (m *InstrumentationLibraryMetrics) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Metric contains one or more timeseries.
//
// The data model and relation between entities is shown in the diagram below.
//
// - Metric is composed of a MetricDescriptor and a list of data points.
// - MetricDescriptor contains a name, description, unit, kind, and value type.
// - Points is a list of DataPoints (shown vertically).
// - DataPoint contains timestamps, labels, and one of the value type fields.
//
//     Metric
//  +----------+         +------------------------+
//  |descriptor|-------->| MetricDescriptor       |
//  |          |         | name                   |
//  |          |         | description            |
//  |          |         | unit                   |
//  |    points|--+      | kind                   |
//  +----------+  |      | value type             |
//                |      +------------------------+
//                |
//                |      +---------------------------+
//                |      |DataPoint 1                |
//                v      |+------+------+   +------+ |
//             +-----+   ||label |label |...|label | |
//             |  1  |-->||value1|value2|...|valueN| |
//             +-----+   |+------+------+   +------+ |
//             |  .  |   |+-----+                    |
//             |  .  |   ||value|                    |
//             |  .  |   |+-----+                    |
//             |  .  |   +---------------------------+
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |   +---------------------------+
//             |  .  |   |DataPoint M                |
//             +-----+   |+------+------+   +------+ |
//             |  M  |-->||label |label |...|label | |
//             +-----+   ||value1|value2|...|valueN| |
//                       |+------+------+   +------+ |
//                       |+-----+                    |
//                       ||value|                    |
//                       |+-----+                    |
//                       +---------------------------+
//
//-----------------------------------------------------------------------
// DataPoint is a general type that includes three common fields:
// - Labels are the optional key, value pairs associated with the data point.
// - StartTimeUnixNano MUST be set to the start of the interval when the
//   descriptor kind includes MASK_CUMULATIVE or MASK_DELTA.
// - TimeUnixNano MUST be set to:
//   - the end of the interval (MASK_CUMULATIVE or MASK_DELTA)
//   - the instantaneous time of the event (MASK_INSTANTANEOUS).
//
// DataPoint values are strongly typed: each DataPoint uses a specific field
// depending on the value type of the metric.  The scalar value types
// (SCALAR_INT64, SCALAR_DOUBLE) use fields of the DataPoint directly, while
// there are currently 3 DataPoint sub-messages (Histogram, Summary, RawValue).
type Metric struct {
	// Descriptor describes the Metric.
	Descriptor_ *MetricDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	// Points is a list of one or more DataPoints for a single metric.
	Points               []*DataPoint `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{2}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetDescriptor_() *MetricDescriptor {
	if m != nil {
		return m.Descriptor_
	}
	return nil
}

func (m *Metric) GetPoints() []*DataPoint {
	if m != nil {
		return m.Points
	}
	return nil
}

// Defines a metric type and its schema.
type MetricDescriptor struct {
	// name of the metric, including its DNS name prefix. It must be unique.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// unit in which the metric value is reported. Follows the format
	// described by http://unitsofmeasure.org/ucum.html.
	Unit string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	// value_type is the type of values this metric has.
	ValueType MetricDescriptor_ValueType `protobuf:"varint,4,opt,name=value_type,json=valueType,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_ValueType" json:"value_type,omitempty"`
	// Kind describes properties of the Metric that are necessary to
	// interpret the data and/or describe how it was produced.
	Kind                 MetricDescriptor_Kind `protobuf:"varint,5,opt,name=kind,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_Kind" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MetricDescriptor) Reset()         { *m = MetricDescriptor{} }
func (m *MetricDescriptor) String() string { return proto.CompactTextString(m) }
func (*MetricDescriptor) ProtoMessage()    {}
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3}
}

func (m *MetricDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDescriptor.Unmarshal(m, b)
}
func (m *MetricDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDescriptor.Marshal(b, m, deterministic)
}
func (m *MetricDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDescriptor.Merge(m, src)
}
func (m *MetricDescriptor) XXX_Size() int {
	return xxx_messageInfo_MetricDescriptor.Size(m)
}
func (m *MetricDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDescriptor proto.InternalMessageInfo

func (m *MetricDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDescriptor) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MetricDescriptor) GetValueType() MetricDescriptor_ValueType {
	if m != nil {
		return m.ValueType
	}
	return MetricDescriptor_INVALID_VALUE_TYPE
}

func (m *MetricDescriptor) GetKind() MetricDescriptor_Kind {
	if m != nil {
		return m.Kind
	}
	return MetricDescriptor_INVALID_KIND
}

// DataPoint is a point of raw or aggregate metric data, generally containing
// the labels, one or two timestamps, and a single value field.  The value field
// that is used is determined by the descriptor ValueType.
type DataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unix_nano is the start of the interval for which a CUMULATIVE or
	// DELTA kind of metric was computed.
	// reset.
	//
	// This must not be set for INSTANTANEOUS metric kinds.
	//
	// The cumulative or delta value is over the time interval (start_time_unix_nano, time_unix_nano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// TODO: Can we omit this when all metrics in a report share the same start time?
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// time_unix_nano is the end of the interval for CUMULATIVE and DELTA kinds,
	// or it is the event timestamp for INSTANTANEOUS kinds.
	//
	// TODO: Can we omit this when a non-instantaneous metric has the same end time
	// as others in the report?
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// SCALAR_INT64 uses this.
	ValueInt64 int64 `protobuf:"varint,4,opt,name=value_int64,json=valueInt64,proto3" json:"value_int64,omitempty"`
	// SCALAR_DOUBLE uses this.
	ValueDouble float64 `protobuf:"fixed64,5,opt,name=value_double,json=valueDouble,proto3" json:"value_double,omitempty"`
	// HISTOGRAM_INT64 and HISTOGRAM_DOUBLE use this.
	Histogram *Histogram `protobuf:"bytes,6,opt,name=histogram,proto3" json:"histogram,omitempty"`
	// SUMMARY_INT64 and SUMMARU_DOUBLE use this.
	Summary *Summary `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
	// Exemplars are the value for RAW_INT64 and RAW_DOUBLE ValueTypes.
	//
	// Exemplars may also be set alongside any other ValueType than RAW_INT64
	// or RAW_DOUBLE, in which case the exemplars carry additional information,
	// including the full label set, exact timestamp, and optional trace context
	// and sampling information.
	Exemplars            []*RawValue `protobuf:"bytes,8,rep,name=exemplars,proto3" json:"exemplars,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DataPoint) Reset()         { *m = DataPoint{} }
func (m *DataPoint) String() string { return proto.CompactTextString(m) }
func (*DataPoint) ProtoMessage()    {}
func (*DataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{4}
}

func (m *DataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataPoint.Unmarshal(m, b)
}
func (m *DataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataPoint.Marshal(b, m, deterministic)
}
func (m *DataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataPoint.Merge(m, src)
}
func (m *DataPoint) XXX_Size() int {
	return xxx_messageInfo_DataPoint.Size(m)
}
func (m *DataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_DataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_DataPoint proto.InternalMessageInfo

func (m *DataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *DataPoint) GetStartTimeUnixNano() uint64 {
	if m != nil {
		return m.StartTimeUnixNano
	}
	return 0
}

func (m *DataPoint) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *DataPoint) GetValueInt64() int64 {
	if m != nil {
		return m.ValueInt64
	}
	return 0
}

func (m *DataPoint) GetValueDouble() float64 {
	if m != nil {
		return m.ValueDouble
	}
	return 0
}

func (m *DataPoint) GetHistogram() *Histogram {
	if m != nil {
		return m.Histogram
	}
	return nil
}

func (m *DataPoint) GetSummary() *Summary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *DataPoint) GetExemplars() []*RawValue {
	if m != nil {
		return m.Exemplars
	}
	return nil
}

// Histogram is a single data point in a timeseries that describes the time-varying
// values of a Histogram. A Histogram contains summary statistics for a population of values,
// it may optionally contain the distribution of those values across a set of buckets.
type Histogram struct {
	// count is the number of values in the population. Must be non-negative. This value
	// must be equal to the sum of the "count" fields in buckets if a histogram is provided.
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// sum of the values in the population. If count is zero then this field
	// must be zero. This value must be equal to the sum of the "sum" fields in buckets if
	// a histogram is provided.
	SumInt64  int64   `protobuf:"varint,2,opt,name=sum_int64,json=sumInt64,proto3" json:"sum_int64,omitempty"`
	SumDouble float64 `protobuf:"fixed64,3,opt,name=sum_double,json=sumDouble,proto3" json:"sum_double,omitempty"`
	// buckets is an optional field contains the values of histogram for each bucket.
	//
	// The sum of the values in the buckets "count" field must equal the value in the count field.
	//
	// The number of elements in buckets array must be by one greater than the
	// number of elements in bucket_bounds array.
	//
	// Note: if HistogramDataPoint.bucket_options defines bucket bounds then this field
	// must also be present and number of elements in this field must be equal to the
	// number of buckets defined by bucket_options.
	Buckets []*Histogram_Bucket `protobuf:"bytes,6,rep,name=buckets,proto3" json:"buckets,omitempty"`
	// explicit_bounds specifies buckets with explicitly defined bounds for values.
	// The bucket boundaries are described by "bounds" field.
	//
	// This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
	// at index i are:
	//
	// [0, bounds[i]) for i == 0
	// [bounds[i-1], bounds[i]) for 0 < i < N-1
	// [bounds[i], +infinity) for i == N-1
	// The values in bounds array must be strictly increasing and > 0.
	//
	// Note: only [a, b) intervals are currently supported for each bucket. If we decides
	// to also support (a, b] intervals we should add support for these by defining a boolean
	// value which decides what type of intervals to use.
	ExplicitBoundsInt64  []int64   `protobuf:"varint,7,rep,packed,name=explicit_bounds_int64,json=explicitBoundsInt64,proto3" json:"explicit_bounds_int64,omitempty"`
	ExplicitBoundsDouble []float64 `protobuf:"fixed64,8,rep,packed,name=explicit_bounds_double,json=explicitBoundsDouble,proto3" json:"explicit_bounds_double,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Histogram) Reset()         { *m = Histogram{} }
func (m *Histogram) String() string { return proto.CompactTextString(m) }
func (*Histogram) ProtoMessage()    {}
func (*Histogram) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{5}
}

func (m *Histogram) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Histogram.Unmarshal(m, b)
}
func (m *Histogram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Histogram.Marshal(b, m, deterministic)
}
func (m *Histogram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Histogram.Merge(m, src)
}
func (m *Histogram) XXX_Size() int {
	return xxx_messageInfo_Histogram.Size(m)
}
func (m *Histogram) XXX_DiscardUnknown() {
	xxx_messageInfo_Histogram.DiscardUnknown(m)
}

var xxx_messageInfo_Histogram proto.InternalMessageInfo

func (m *Histogram) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Histogram) GetSumInt64() int64 {
	if m != nil {
		return m.SumInt64
	}
	return 0
}

func (m *Histogram) GetSumDouble() float64 {
	if m != nil {
		return m.SumDouble
	}
	return 0
}

func (m *Histogram) GetBuckets() []*Histogram_Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

func (m *Histogram) GetExplicitBoundsInt64() []int64 {
	if m != nil {
		return m.ExplicitBoundsInt64
	}
	return nil
}

func (m *Histogram) GetExplicitBoundsDouble() []float64 {
	if m != nil {
		return m.ExplicitBoundsDouble
	}
	return nil
}

// Bucket contains values for a bucket.
type Histogram_Bucket struct {
	// The number of values in each bucket of the histogram, as described by
	// bucket_options.
	Count                uint64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Histogram_Bucket) Reset()         { *m = Histogram_Bucket{} }
func (m *Histogram_Bucket) String() string { return proto.CompactTextString(m) }
func (*Histogram_Bucket) ProtoMessage()    {}
func (*Histogram_Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{5, 0}
}

func (m *Histogram_Bucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Histogram_Bucket.Unmarshal(m, b)
}
func (m *Histogram_Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Histogram_Bucket.Marshal(b, m, deterministic)
}
func (m *Histogram_Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Histogram_Bucket.Merge(m, src)
}
func (m *Histogram_Bucket) XXX_Size() int {
	return xxx_messageInfo_Histogram_Bucket.Size(m)
}
func (m *Histogram_Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_Histogram_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_Histogram_Bucket proto.InternalMessageInfo

func (m *Histogram_Bucket) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// Summary is a single data point in a timeseries that describes the time-varying
// values of a Summary metric.
type Summary struct {
	// Remove the labels, start_time, and time TODO.
	//
	// fields: Add min, max, last fields
	// as described in https://github.com/open-telemetry/oteps/pull/117
	//
	// (Same comment)
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// (Same comment)
	SumInt64  int64   `protobuf:"varint,2,opt,name=sum_int64,json=sumInt64,proto3" json:"sum_int64,omitempty"`
	SumDouble float64 `protobuf:"fixed64,3,opt,name=sum_double,json=sumDouble,proto3" json:"sum_double,omitempty"`
	// MIN, MAX, LAST value
	MinInt64   int64   `protobuf:"varint,4,opt,name=min_int64,json=minInt64,proto3" json:"min_int64,omitempty"`
	MinDouble  float64 `protobuf:"fixed64,5,opt,name=min_double,json=minDouble,proto3" json:"min_double,omitempty"`
	MaxInt64   int64   `protobuf:"varint,6,opt,name=max_int64,json=maxInt64,proto3" json:"max_int64,omitempty"`
	MaxDouble  float64 `protobuf:"fixed64,7,opt,name=max_double,json=maxDouble,proto3" json:"max_double,omitempty"`
	LastInt64  int64   `protobuf:"varint,8,opt,name=last_int64,json=lastInt64,proto3" json:"last_int64,omitempty"`
	LastDouble float64 `protobuf:"fixed64,9,opt,name=last_double,json=lastDouble,proto3" json:"last_double,omitempty"`
	// (Same comment)
	QuantileValues       []*Summary_ValueAtQuantile `protobuf:"bytes,10,rep,name=quantile_values,json=quantileValues,proto3" json:"quantile_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Summary) Reset()         { *m = Summary{} }
func (m *Summary) String() string { return proto.CompactTextString(m) }
func (*Summary) ProtoMessage()    {}
func (*Summary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{6}
}

func (m *Summary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Summary.Unmarshal(m, b)
}
func (m *Summary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Summary.Marshal(b, m, deterministic)
}
func (m *Summary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summary.Merge(m, src)
}
func (m *Summary) XXX_Size() int {
	return xxx_messageInfo_Summary.Size(m)
}
func (m *Summary) XXX_DiscardUnknown() {
	xxx_messageInfo_Summary.DiscardUnknown(m)
}

var xxx_messageInfo_Summary proto.InternalMessageInfo

func (m *Summary) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Summary) GetSumInt64() int64 {
	if m != nil {
		return m.SumInt64
	}
	return 0
}

func (m *Summary) GetSumDouble() float64 {
	if m != nil {
		return m.SumDouble
	}
	return 0
}

func (m *Summary) GetMinInt64() int64 {
	if m != nil {
		return m.MinInt64
	}
	return 0
}

func (m *Summary) GetMinDouble() float64 {
	if m != nil {
		return m.MinDouble
	}
	return 0
}

func (m *Summary) GetMaxInt64() int64 {
	if m != nil {
		return m.MaxInt64
	}
	return 0
}

func (m *Summary) GetMaxDouble() float64 {
	if m != nil {
		return m.MaxDouble
	}
	return 0
}

func (m *Summary) GetLastInt64() int64 {
	if m != nil {
		return m.LastInt64
	}
	return 0
}

func (m *Summary) GetLastDouble() float64 {
	if m != nil {
		return m.LastDouble
	}
	return 0
}

func (m *Summary) GetQuantileValues() []*Summary_ValueAtQuantile {
	if m != nil {
		return m.QuantileValues
	}
	return nil
}

// (Similar comments)
type Summary_ValueAtQuantile struct {
	Quantile             float64  `protobuf:"fixed64,1,opt,name=quantile,proto3" json:"quantile,omitempty"`
	ValueInt64           int64    `protobuf:"varint,2,opt,name=value_int64,json=valueInt64,proto3" json:"value_int64,omitempty"`
	ValueDouble          float64  `protobuf:"fixed64,3,opt,name=value_double,json=valueDouble,proto3" json:"value_double,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Summary_ValueAtQuantile) Reset()         { *m = Summary_ValueAtQuantile{} }
func (m *Summary_ValueAtQuantile) String() string { return proto.CompactTextString(m) }
func (*Summary_ValueAtQuantile) ProtoMessage()    {}
func (*Summary_ValueAtQuantile) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{6, 0}
}

func (m *Summary_ValueAtQuantile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Summary_ValueAtQuantile.Unmarshal(m, b)
}
func (m *Summary_ValueAtQuantile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Summary_ValueAtQuantile.Marshal(b, m, deterministic)
}
func (m *Summary_ValueAtQuantile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summary_ValueAtQuantile.Merge(m, src)
}
func (m *Summary_ValueAtQuantile) XXX_Size() int {
	return xxx_messageInfo_Summary_ValueAtQuantile.Size(m)
}
func (m *Summary_ValueAtQuantile) XXX_DiscardUnknown() {
	xxx_messageInfo_Summary_ValueAtQuantile.DiscardUnknown(m)
}

var xxx_messageInfo_Summary_ValueAtQuantile proto.InternalMessageInfo

func (m *Summary_ValueAtQuantile) GetQuantile() float64 {
	if m != nil {
		return m.Quantile
	}
	return 0
}

func (m *Summary_ValueAtQuantile) GetValueInt64() int64 {
	if m != nil {
		return m.ValueInt64
	}
	return 0
}

func (m *Summary_ValueAtQuantile) GetValueDouble() float64 {
	if m != nil {
		return m.ValueDouble
	}
	return 0
}

type RawValue struct {
	// Numerical value of the measurement that was recorded. Only one of these
	// two fields is used for the data, based on MetricDescriptor.measurement_type
	ValueDouble float64 `protobuf:"fixed64,1,opt,name=value_double,json=valueDouble,proto3" json:"value_double,omitempty"`
	ValueInt64  int64   `protobuf:"varint,2,opt,name=value_int64,json=valueInt64,proto3" json:"value_int64,omitempty"`
	// Exact time that the measurement was recorded
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// Labels that were passed with the measurement, but not included in the DataPoint's labels
	AdditionalLabels []*v11.StringKeyValue `protobuf:"bytes,4,rep,name=additional_labels,json=additionalLabels,proto3" json:"additional_labels,omitempty"`
	// (Optional) Span ID of the current trace
	SpanId []byte `protobuf:"bytes,5,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// (Optional) Trace ID of the current trace
	TraceId []byte `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// (Optional) When sample_count is non-zero, this exemplar has been chosen in a statistically
	// unbiased way such that the exemplar is representative of `sample_count` individual events
	SampleCount          float64  `protobuf:"fixed64,7,opt,name=sample_count,json=sampleCount,proto3" json:"sample_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawValue) Reset()         { *m = RawValue{} }
func (m *RawValue) String() string { return proto.CompactTextString(m) }
func (*RawValue) ProtoMessage()    {}
func (*RawValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{7}
}

func (m *RawValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawValue.Unmarshal(m, b)
}
func (m *RawValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawValue.Marshal(b, m, deterministic)
}
func (m *RawValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawValue.Merge(m, src)
}
func (m *RawValue) XXX_Size() int {
	return xxx_messageInfo_RawValue.Size(m)
}
func (m *RawValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RawValue.DiscardUnknown(m)
}

var xxx_messageInfo_RawValue proto.InternalMessageInfo

func (m *RawValue) GetValueDouble() float64 {
	if m != nil {
		return m.ValueDouble
	}
	return 0
}

func (m *RawValue) GetValueInt64() int64 {
	if m != nil {
		return m.ValueInt64
	}
	return 0
}

func (m *RawValue) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *RawValue) GetAdditionalLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.AdditionalLabels
	}
	return nil
}

func (m *RawValue) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *RawValue) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *RawValue) GetSampleCount() float64 {
	if m != nil {
		return m.SampleCount
	}
	return 0
}

func init() {
	proto.RegisterEnum("opentelemetry.proto.metrics.v1.MetricDescriptor_ValueType", MetricDescriptor_ValueType_name, MetricDescriptor_ValueType_value)
	proto.RegisterEnum("opentelemetry.proto.metrics.v1.MetricDescriptor_KindMask", MetricDescriptor_KindMask_name, MetricDescriptor_KindMask_value)
	proto.RegisterEnum("opentelemetry.proto.metrics.v1.MetricDescriptor_Kind", MetricDescriptor_Kind_name, MetricDescriptor_Kind_value)
	proto.RegisterType((*ResourceMetrics)(nil), "opentelemetry.proto.metrics.v1.ResourceMetrics")
	proto.RegisterType((*InstrumentationLibraryMetrics)(nil), "opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics")
	proto.RegisterType((*Metric)(nil), "opentelemetry.proto.metrics.v1.Metric")
	proto.RegisterType((*MetricDescriptor)(nil), "opentelemetry.proto.metrics.v1.MetricDescriptor")
	proto.RegisterType((*DataPoint)(nil), "opentelemetry.proto.metrics.v1.DataPoint")
	proto.RegisterType((*Histogram)(nil), "opentelemetry.proto.metrics.v1.Histogram")
	proto.RegisterType((*Histogram_Bucket)(nil), "opentelemetry.proto.metrics.v1.Histogram.Bucket")
	proto.RegisterType((*Summary)(nil), "opentelemetry.proto.metrics.v1.Summary")
	proto.RegisterType((*Summary_ValueAtQuantile)(nil), "opentelemetry.proto.metrics.v1.Summary.ValueAtQuantile")
	proto.RegisterType((*RawValue)(nil), "opentelemetry.proto.metrics.v1.RawValue")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/metrics/v1/metrics.proto", fileDescriptor_3c3112f9fa006917)
}

var fileDescriptor_3c3112f9fa006917 = []byte{
	// 1366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcd, 0x72, 0xda, 0x56,
	0x14, 0x8e, 0x00, 0x03, 0x3a, 0x76, 0x6c, 0xf9, 0xc6, 0x49, 0x88, 0x53, 0xdb, 0x98, 0xa4, 0x89,
	0xf3, 0x07, 0xb1, 0xeb, 0xa4, 0x33, 0x9d, 0xe9, 0x34, 0xb2, 0xa1, 0x8e, 0x62, 0x7e, 0x9c, 0x0b,
	0xb8, 0xe3, 0x6c, 0x54, 0x01, 0x1a, 0x47, 0x13, 0x24, 0x11, 0xe9, 0xca, 0xc5, 0x0f, 0xd0, 0x45,
	0x1f, 0xa2, 0x33, 0xdd, 0xf5, 0x01, 0xba, 0xea, 0xb2, 0x8f, 0xd0, 0xe9, 0x0b, 0x74, 0xd9, 0xc7,
	0xe8, 0xdc, 0x1f, 0x01, 0x32, 0x60, 0x9c, 0xce, 0x74, 0x77, 0x75, 0xce, 0xf7, 0x7d, 0xf7, 0x9c,
	0x4f, 0x57, 0x47, 0x12, 0x3c, 0x75, 0x7b, 0xa6, 0x43, 0xcc, 0xae, 0x69, 0x9b, 0xc4, 0x3b, 0x2f,
	0xf4, 0x3c, 0x97, 0xb8, 0x05, 0xba, 0xb6, 0xda, 0x7e, 0xe1, 0x6c, 0x3b, 0x5c, 0xe6, 0x59, 0x02,
	0xad, 0x47, 0xd0, 0x3c, 0x98, 0x0f, 0x21, 0x67, 0xdb, 0xab, 0x8f, 0x27, 0xa9, 0xb5, 0x5d, 0xdb,
	0x76, 0x1d, 0x2a, 0xc6, 0x57, 0x9c, 0xb6, 0x9a, 0x9f, 0x84, 0xf5, 0x4c, 0xdf, 0x0d, 0xbc, 0xb6,
	0x49, 0xd1, 0xe1, 0x9a, 0xe3, 0x73, 0x7f, 0x4b, 0xb0, 0x84, 0x45, 0xa8, 0xc2, 0xb7, 0x44, 0x25,
	0x48, 0x87, 0xa8, 0x8c, 0x94, 0x95, 0xb6, 0xe6, 0x77, 0x1e, 0xe5, 0x27, 0x95, 0x38, 0x90, 0x3a,
	0xdb, 0xce, 0x87, 0x1a, 0x78, 0x40, 0x45, 0x3f, 0x4a, 0xb0, 0x61, 0x39, 0x3e, 0xf1, 0x02, 0xdb,
	0x74, 0x88, 0x41, 0x2c, 0xd7, 0xd1, 0xbb, 0x56, 0xcb, 0x33, 0xbc, 0x73, 0x5d, 0x74, 0x97, 0x89,
	0x65, 0xe3, 0x5b, 0xf3, 0x3b, 0x5f, 0xe7, 0x2f, 0x77, 0x20, 0xaf, 0x45, 0x65, 0xca, 0x5c, 0x45,
	0xd4, 0x8b, 0xd7, 0xac, 0xcb, 0xd2, 0xb9, 0x3f, 0x25, 0x58, 0xbb, 0x54, 0x00, 0x39, 0x70, 0x7b,
	0x4a, 0xa1, 0xa2, 0xff, 0x17, 0x13, 0x0b, 0x14, 0xc6, 0x4f, 0xad, 0x0f, 0xdf, 0x9a, 0x5c, 0x18,
	0x7a, 0x05, 0xa9, 0xa8, 0x01, 0x0f, 0x66, 0x19, 0xc0, 0x2b, 0xc5, 0x21, 0x2d, 0xf7, 0xb3, 0x04,
	0x49, 0x1e, 0x43, 0x47, 0x00, 0x1d, 0xd3, 0x6f, 0x7b, 0x56, 0x8f, 0xb8, 0x9e, 0xa8, 0xf7, 0xf9,
	0xd5, 0xf4, 0x8a, 0x03, 0x1e, 0x1e, 0xd1, 0x40, 0x2a, 0x24, 0x7b, 0xae, 0xe5, 0x90, 0xb0, 0xba,
	0x47, 0xb3, 0xd4, 0x8a, 0x06, 0x31, 0x8e, 0x28, 0x03, 0x0b, 0x62, 0xee, 0x17, 0x00, 0xe5, 0xe2,
	0x1e, 0x08, 0x41, 0xc2, 0x31, 0x6c, 0x7e, 0xa6, 0x64, 0xcc, 0xd6, 0x28, 0x0b, 0xf3, 0xe1, 0xce,
	0x96, 0xeb, 0x64, 0x62, 0x2c, 0x35, 0x1a, 0xa2, 0xac, 0xc0, 0xb1, 0x48, 0x26, 0xce, 0x59, 0x74,
	0x8d, 0x4e, 0x00, 0xce, 0x8c, 0x6e, 0x60, 0xea, 0xe4, 0xbc, 0x67, 0x66, 0x12, 0x59, 0x69, 0x6b,
	0x71, 0xe7, 0xab, 0x4f, 0xed, 0x39, 0x7f, 0x4c, 0x25, 0x1a, 0xe7, 0x3d, 0x13, 0xcb, 0x67, 0xe1,
	0x12, 0x69, 0x90, 0xf8, 0x60, 0x39, 0x9d, 0xcc, 0x1c, 0x13, 0x7d, 0xf1, 0xc9, 0xa2, 0x87, 0x96,
	0xd3, 0xc1, 0x4c, 0x22, 0xf7, 0xbb, 0x04, 0xf2, 0x60, 0x0f, 0x74, 0x0b, 0x90, 0x56, 0x3d, 0x56,
	0xcb, 0x5a, 0x51, 0x3f, 0x56, 0xcb, 0xcd, 0x92, 0xde, 0x38, 0x39, 0x2a, 0x29, 0xd7, 0x90, 0x02,
	0x0b, 0xf5, 0x7d, 0xb5, 0xac, 0x62, 0x5d, 0xab, 0x36, 0x5e, 0xee, 0x2a, 0x31, 0xb4, 0x0c, 0xd7,
	0x45, 0xa4, 0x58, 0x6b, 0xee, 0x95, 0x4b, 0x4a, 0x1c, 0xdd, 0x80, 0xa5, 0xd7, 0x5a, 0xbd, 0x51,
	0x3b, 0xc0, 0x6a, 0x45, 0xe0, 0x12, 0x68, 0x05, 0x94, 0x61, 0x50, 0x40, 0xe7, 0x18, 0xbb, 0x59,
	0xa9, 0xa8, 0xf8, 0x44, 0x00, 0x93, 0x08, 0xc1, 0x62, 0x18, 0x12, 0xb0, 0x14, 0xba, 0x0e, 0x32,
	0x56, 0xbf, 0x13, 0x90, 0x34, 0x5a, 0x04, 0xa0, 0x97, 0x22, 0x2d, 0xe7, 0x7e, 0x92, 0x20, 0x4d,
	0x5b, 0xa9, 0x18, 0xfe, 0x07, 0x74, 0x13, 0x96, 0xc3, 0xd2, 0x0f, 0xb5, 0x6a, 0x51, 0xaf, 0xa8,
	0xf5, 0x43, 0xe5, 0x1a, 0xdd, 0x49, 0xab, 0xd6, 0x1b, 0x6a, 0xb5, 0xa1, 0x56, 0x4b, 0xb5, 0x66,
	0x5d, 0x91, 0x90, 0x0c, 0x73, 0xc5, 0x52, 0xb9, 0xa1, 0x2a, 0x09, 0xaa, 0xb8, 0xdf, 0xac, 0x34,
	0xcb, 0x6a, 0x43, 0x3b, 0x2e, 0x29, 0x31, 0xb4, 0x00, 0xe9, 0x03, 0x5c, 0x6b, 0x1e, 0x69, 0xd5,
	0x03, 0x25, 0x8d, 0x00, 0x92, 0x6a, 0xb1, 0x48, 0xd7, 0x0a, 0x2d, 0xa5, 0x52, 0xab, 0xd6, 0x1a,
	0xb5, 0xaa, 0xb6, 0xaf, 0x64, 0xd1, 0x12, 0xcc, 0xd7, 0x4f, 0xaa, 0xfb, 0xaf, 0x71, 0xad, 0x4a,
	0x45, 0x5f, 0xe5, 0xfe, 0x9a, 0x83, 0x04, 0xad, 0x85, 0x5a, 0x35, 0x5a, 0x87, 0x72, 0x0d, 0xe5,
	0xe1, 0x31, 0x97, 0xd1, 0x07, 0x0a, 0x7a, 0xa4, 0x26, 0x7d, 0x54, 0xea, 0x23, 0x2a, 0xc0, 0x93,
	0x19, 0x78, 0x75, 0x94, 0xb0, 0x8d, 0x9e, 0xc0, 0xc3, 0x31, 0xc2, 0xb0, 0xad, 0x88, 0xba, 0x87,
	0x9e, 0xc2, 0xd6, 0x65, 0xe0, 0x88, 0xf4, 0x0e, 0x7a, 0x00, 0xb9, 0x31, 0x34, 0x33, 0x2f, 0xa2,
	0x4a, 0xd0, 0x43, 0xb8, 0x37, 0x05, 0x17, 0x11, 0xdc, 0x45, 0xf7, 0x21, 0x2b, 0x80, 0xd3, 0x2d,
	0x78, 0x8b, 0x3e, 0x87, 0xcd, 0x89, 0xa8, 0x88, 0xd8, 0x32, 0xda, 0x84, 0x35, 0x01, 0x9b, 0xd2,
	0x2e, 0x46, 0x39, 0x58, 0x1f, 0x87, 0x44, 0x64, 0x10, 0xfa, 0x0c, 0x32, 0x02, 0x33, 0xde, 0x5a,
	0x03, 0xad, 0xc1, 0x9d, 0x48, 0x36, 0x42, 0x5e, 0xa1, 0x0e, 0x85, 0x47, 0xe6, 0x92, 0x96, 0x34,
	0xea, 0xd0, 0x14, 0x5c, 0x44, 0x50, 0x46, 0xf7, 0x60, 0x63, 0x00, 0x9c, 0xd2, 0xd6, 0x1b, 0x6a,
	0xe3, 0x24, 0x50, 0x44, 0x0a, 0xd0, 0x3a, 0xac, 0x0e, 0x50, 0xe3, 0xad, 0x95, 0xd1, 0x06, 0xdc,
	0xbd, 0x90, 0x8f, 0x08, 0x2c, 0xe4, 0xfe, 0x88, 0x83, 0x3c, 0x18, 0x9c, 0xa8, 0x04, 0xc9, 0xae,
	0xd1, 0x32, 0xbb, 0x7e, 0x46, 0x62, 0x33, 0xf7, 0xd9, 0x8c, 0x37, 0x4e, 0x9d, 0x78, 0x96, 0x73,
	0x7a, 0x68, 0x9e, 0xb3, 0x01, 0x83, 0x05, 0x19, 0x15, 0x60, 0xc5, 0x27, 0x86, 0x47, 0x74, 0x62,
	0xd9, 0xa6, 0x1e, 0x38, 0x56, 0x5f, 0x77, 0x0c, 0xc7, 0x65, 0x73, 0x35, 0x89, 0x97, 0x59, 0xae,
	0x61, 0xd9, 0x66, 0xd3, 0xb1, 0xfa, 0x55, 0xc3, 0x71, 0xd1, 0x7d, 0x58, 0xbc, 0x00, 0x8d, 0x33,
	0xe8, 0x02, 0x19, 0x45, 0x6d, 0xc0, 0x3c, 0x9f, 0xb7, 0x96, 0x43, 0x5e, 0xee, 0xb2, 0x81, 0x1b,
	0xc7, 0x7c, 0x04, 0x6b, 0x34, 0x82, 0x36, 0x61, 0x81, 0x03, 0x3a, 0x6e, 0xd0, 0xea, 0x9a, 0x6c,
	0x7a, 0x4a, 0x98, 0x93, 0x8a, 0x2c, 0x84, 0x0e, 0x40, 0x7e, 0x6f, 0xf9, 0xc4, 0x3d, 0xf5, 0x0c,
	0x3b, 0x93, 0xbc, 0xe4, 0xb3, 0x62, 0x64, 0xba, 0xbe, 0x0e, 0x09, 0x78, 0xc8, 0x45, 0x2a, 0xa4,
	0xfc, 0xc0, 0xb6, 0xe9, 0xdb, 0x39, 0xc5, 0x64, 0x1e, 0xce, 0x92, 0xa9, 0x73, 0x38, 0x0e, 0x79,
	0xe8, 0x5b, 0x90, 0xcd, 0xbe, 0x69, 0xf7, 0xba, 0x86, 0xe7, 0x67, 0xd2, 0xcc, 0xf0, 0xad, 0x59,
	0x22, 0xd8, 0xf8, 0x81, 0x7b, 0x3d, 0xa4, 0xe6, 0x7e, 0x8b, 0x81, 0x3c, 0xa8, 0x11, 0xad, 0xc0,
	0x5c, 0xdb, 0x0d, 0x1c, 0xc2, 0x5e, 0x70, 0x09, 0xcc, 0x2f, 0xd0, 0x5d, 0x90, 0xfd, 0xc0, 0x16,
	0xce, 0xc5, 0x98, 0x73, 0x69, 0x3f, 0xb0, 0xb9, 0x6f, 0x6b, 0x00, 0x34, 0x29, 0x5c, 0x8b, 0x33,
	0xd7, 0x28, 0x5c, 0x78, 0xf6, 0x06, 0x52, 0xad, 0xa0, 0xfd, 0xc1, 0x24, 0x7e, 0x26, 0xc9, 0xaa,
	0x7c, 0x7e, 0x65, 0xc7, 0xf2, 0x7b, 0x8c, 0x88, 0x43, 0x01, 0xb4, 0x03, 0x37, 0xcd, 0x7e, 0xaf,
	0x6b, 0xb5, 0x2d, 0xa2, 0xb7, 0xdc, 0xc0, 0xe9, 0xf8, 0xa2, 0xa6, 0x54, 0x36, 0xbe, 0x15, 0xc7,
	0x37, 0xc2, 0xe4, 0x1e, 0xcb, 0xf1, 0xf2, 0x76, 0xe1, 0xd6, 0x45, 0x8e, 0x28, 0x95, 0x9a, 0x26,
	0xe1, 0x95, 0x28, 0x89, 0x57, 0xbd, 0xba, 0x0e, 0x49, 0xbe, 0xf9, 0x64, 0x47, 0x72, 0xff, 0xc4,
	0x21, 0x25, 0x6e, 0xc9, 0xff, 0xe0, 0xd9, 0x5d, 0x90, 0x6d, 0xcb, 0x89, 0x9c, 0xd4, 0xb4, 0x6d,
	0x39, 0x03, 0x2e, 0x4d, 0x46, 0x4e, 0x29, 0x85, 0x8f, 0x70, 0x8d, 0xbe, 0xe0, 0x26, 0x05, 0xd7,
	0xe8, 0x0f, 0xb9, 0x46, 0x3f, 0xe4, 0xa6, 0x04, 0xd7, 0xe8, 0x0b, 0xee, 0x1a, 0x40, 0xd7, 0xf0,
	0x89, 0x20, 0xa7, 0x19, 0x59, 0xa6, 0x11, 0xce, 0xde, 0x80, 0x79, 0x96, 0x16, 0x74, 0x99, 0xd1,
	0x19, 0x43, 0xf0, 0xbf, 0x87, 0xa5, 0x8f, 0x81, 0xe1, 0x10, 0xab, 0x6b, 0xea, 0xec, 0xb9, 0xf1,
	0x33, 0xc0, 0xee, 0xf9, 0x97, 0x57, 0x3c, 0xde, 0xfc, 0x7b, 0x46, 0x25, 0x6f, 0x85, 0x0a, 0x5e,
	0x0c, 0xf5, 0x58, 0xc2, 0x5f, 0xfd, 0x08, 0x4b, 0x17, 0x20, 0x68, 0x15, 0xd2, 0x21, 0x88, 0xdd,
	0x01, 0x09, 0x0f, 0xae, 0x2f, 0x3e, 0xf4, 0xb1, 0x99, 0x0f, 0x7d, 0x7c, 0xec, 0xa1, 0xcf, 0xfd,
	0x1a, 0x83, 0x74, 0xf8, 0xe0, 0x8c, 0xe1, 0xa5, 0xf1, 0x21, 0x31, 0x73, 0xcf, 0xab, 0xcd, 0xab,
	0x77, 0xb0, 0x6c, 0x74, 0x3a, 0x16, 0xfd, 0x7e, 0x34, 0xba, 0xba, 0x18, 0xac, 0x89, 0xff, 0x32,
	0x58, 0x95, 0xa1, 0x4e, 0x99, 0x8f, 0xd8, 0xdb, 0x90, 0xf2, 0x7b, 0x86, 0xa3, 0x5b, 0xfc, 0x1b,
	0x71, 0x01, 0x27, 0xe9, 0xa5, 0xd6, 0x41, 0x77, 0x20, 0x4d, 0x3c, 0xa3, 0x6d, 0xd2, 0x4c, 0x92,
	0x65, 0x52, 0xec, 0x5a, 0xeb, 0xd0, 0xce, 0x7d, 0xc3, 0xee, 0x75, 0x4d, 0x9d, 0x1f, 0x76, 0x7e,
	0x78, 0xe6, 0x79, 0x6c, 0x9f, 0x86, 0xf6, 0x08, 0x6c, 0x5a, 0xee, 0x8c, 0x3b, 0xbd, 0xb7, 0x20,
	0xfe, 0x58, 0x8e, 0x68, 0xe2, 0x48, 0x7a, 0xf7, 0xcd, 0xa9, 0x45, 0xde, 0x07, 0x2d, 0x5a, 0x7e,
	0x81, 0x52, 0x9f, 0x0d, 0xff, 0xfc, 0x22, 0x4a, 0xcf, 0xf8, 0x7f, 0xe0, 0xa9, 0xe9, 0x14, 0x4e,
	0x47, 0x7f, 0x44, 0x5b, 0x49, 0x96, 0xf8, 0xe2, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xfd,
	0xf0, 0xf2, 0xb1, 0x0e, 0x00, 0x00,
}
