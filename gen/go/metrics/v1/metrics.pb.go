// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opentelemetry/proto/metrics/v1/metrics.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v11 "github.com/open-telemetry/opentelemetry-proto/gen/go/common/v1"
	v1 "github.com/open-telemetry/opentelemetry-proto/gen/go/resource/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type is the type of values a metric has.
type MetricDescriptor_Type int32

const (
	// INVALID_TYPE is the default Type, it MUST not be used.
	MetricDescriptor_INVALID_TYPE MetricDescriptor_Type = 0
	// INT64 values are signed 64-bit integers.
	//
	// A Metric of this Type MUST store its values as Int64DataPoint.
	MetricDescriptor_INT64 MetricDescriptor_Type = 1
	// MONOTONIC_INT64 values are monotonically increasing signed 64-bit
	// integers.
	//
	// A Metric of this Type MUST store its values as Int64DataPoint.
	MetricDescriptor_MONOTONIC_INT64 MetricDescriptor_Type = 2
	// DOUBLE values are double-precision floating-point numbers.
	//
	// A Metric of this Type MUST store its values as DoubleDataPoint.
	MetricDescriptor_DOUBLE MetricDescriptor_Type = 3
	// MONOTONIC_DOUBLE values are monotonically increasing double-precision
	// floating-point numbers.
	//
	// A Metric of this Type MUST store its values as DoubleDataPoint.
	MetricDescriptor_MONOTONIC_DOUBLE MetricDescriptor_Type = 4
	// Histogram measurement.
	// Corresponding values are stored in HistogramDataPoint.
	MetricDescriptor_HISTOGRAM MetricDescriptor_Type = 5
	// Summary value. Some frameworks implemented Histograms as a summary of observations
	// (usually things like request durations and response sizes). While it
	// also provides a total count of observations and a sum of all observed
	// values, it calculates configurable percentiles over a sliding time
	// window.
	// Corresponding values are stored in SummaryDataPoint.
	MetricDescriptor_SUMMARY MetricDescriptor_Type = 6
)

var MetricDescriptor_Type_name = map[int32]string{
	0: "INVALID_TYPE",
	1: "INT64",
	2: "MONOTONIC_INT64",
	3: "DOUBLE",
	4: "MONOTONIC_DOUBLE",
	5: "HISTOGRAM",
	6: "SUMMARY",
}

var MetricDescriptor_Type_value = map[string]int32{
	"INVALID_TYPE":     0,
	"INT64":            1,
	"MONOTONIC_INT64":  2,
	"DOUBLE":           3,
	"MONOTONIC_DOUBLE": 4,
	"HISTOGRAM":        5,
	"SUMMARY":          6,
}

func (x MetricDescriptor_Type) String() string {
	return proto.EnumName(MetricDescriptor_Type_name, int32(x))
}

func (MetricDescriptor_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3, 0}
}

// Structure describes the relation between data of a Metric. This
// relation is expressed by the operation(s) supported by the data. The
// Structure of data is important to know if further analysis or roll-up
// of the data is to be performed. Without knowledge of data Structure
// meaningless results could be produced from these tasks.
//
// Note:
// Knowing the Structure of data does not guarantee meaningfully results
// for arbitrary operations on the data, rather it means that the results
// of performing the operation(s) related to the data Structure COULD
// produce meaningful results.
//
// Take for example adding together two different the measurements of
// request counts from a server. This data has ADDING structure, but if
// the two measurements were for different services, or even different
// servers, this result is likely meaningless.
type MetricDescriptor_Structure int32

const (
	// GROUPING data does not support a combination operation, rather it is
	// the arrangement of values by some dimension of association like time,
	// label(s), or location.
	//
	// GROUPING is the default Structure. It SHOULD be used when the data
	// does not support any operation(s) or it is unknown.
	//
	// Examples of GROUPING data:
	// - CPU core number that was the hottest.
	// - If a system was stopped, crashed, or running (represented by the
	//   integers '0', '1', or '2' respectively).
	// - The average power consumption of a server.
	// - CPU fan speed.
	MetricDescriptor_GROUPING MetricDescriptor_Structure = 0
	// ADDING data can be combined meaningfully when added together.
	//
	// Examples of ADDING data:
	// - CPU core temperature.
	// - Number or requests to a server.
	// - Number of errors.
	MetricDescriptor_ADDING MetricDescriptor_Structure = 1
)

var MetricDescriptor_Structure_name = map[int32]string{
	0: "GROUPING",
	1: "ADDING",
}

var MetricDescriptor_Structure_value = map[string]int32{
	"GROUPING": 0,
	"ADDING":   1,
}

func (x MetricDescriptor_Structure) String() string {
	return proto.EnumName(MetricDescriptor_Structure_name, int32(x))
}

func (MetricDescriptor_Structure) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3, 1}
}

// A collection of InstrumentationLibraryMetrics from a Resource.
type ResourceMetrics struct {
	// The resource for the metrics in this message.
	// If this field is not set then no resource info is known.
	Resource *v1.Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// A list of metrics that originate from a resource.
	InstrumentationLibraryMetrics []*InstrumentationLibraryMetrics `protobuf:"bytes,2,rep,name=instrumentation_library_metrics,json=instrumentationLibraryMetrics,proto3" json:"instrumentation_library_metrics,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                         `json:"-"`
	XXX_unrecognized              []byte                           `json:"-"`
	XXX_sizecache                 int32                            `json:"-"`
}

func (m *ResourceMetrics) Reset()         { *m = ResourceMetrics{} }
func (m *ResourceMetrics) String() string { return proto.CompactTextString(m) }
func (*ResourceMetrics) ProtoMessage()    {}
func (*ResourceMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{0}
}

func (m *ResourceMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceMetrics.Unmarshal(m, b)
}
func (m *ResourceMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceMetrics.Marshal(b, m, deterministic)
}
func (m *ResourceMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceMetrics.Merge(m, src)
}
func (m *ResourceMetrics) XXX_Size() int {
	return xxx_messageInfo_ResourceMetrics.Size(m)
}
func (m *ResourceMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceMetrics proto.InternalMessageInfo

func (m *ResourceMetrics) GetResource() *v1.Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceMetrics) GetInstrumentationLibraryMetrics() []*InstrumentationLibraryMetrics {
	if m != nil {
		return m.InstrumentationLibraryMetrics
	}
	return nil
}

// A collection of Metrics produced by an InstrumentationLibrary.
type InstrumentationLibraryMetrics struct {
	// The instrumentation library information for the metrics in this message.
	// If this field is not set then no library info is known.
	InstrumentationLibrary *v11.InstrumentationLibrary `protobuf:"bytes,1,opt,name=instrumentation_library,json=instrumentationLibrary,proto3" json:"instrumentation_library,omitempty"`
	// A list of metrics that originate from an instrumentation library.
	Metrics              []*Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *InstrumentationLibraryMetrics) Reset()         { *m = InstrumentationLibraryMetrics{} }
func (m *InstrumentationLibraryMetrics) String() string { return proto.CompactTextString(m) }
func (*InstrumentationLibraryMetrics) ProtoMessage()    {}
func (*InstrumentationLibraryMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{1}
}

func (m *InstrumentationLibraryMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentationLibraryMetrics.Unmarshal(m, b)
}
func (m *InstrumentationLibraryMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentationLibraryMetrics.Marshal(b, m, deterministic)
}
func (m *InstrumentationLibraryMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentationLibraryMetrics.Merge(m, src)
}
func (m *InstrumentationLibraryMetrics) XXX_Size() int {
	return xxx_messageInfo_InstrumentationLibraryMetrics.Size(m)
}
func (m *InstrumentationLibraryMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentationLibraryMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentationLibraryMetrics proto.InternalMessageInfo

func (m *InstrumentationLibraryMetrics) GetInstrumentationLibrary() *v11.InstrumentationLibrary {
	if m != nil {
		return m.InstrumentationLibrary
	}
	return nil
}

func (m *InstrumentationLibraryMetrics) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Defines a Metric which has one or more timeseries.
//
// The data model and relation between entities is shown in the diagram below.
//
// - Metric is composed of a MetricDescriptor and a list of data points.
// - MetricDescriptor contains a list of label keys (shown horizontally).
// - Data is a list of DataPoints (shown vertically).
// - DataPoint contains a list of label values and a value.
//
//     Metric
//  +----------+         +------------------------+
//  |descriptor|-------->| MetricDescriptor       |
//  |          |         |+-----+-----+   +-----+ |
//  |          |         ||label|label|...|label| |
//  |      data|--+      ||key1 |key2 |   |keyN | |
//  +----------+  |      |+-----+-----+   +-----+ |
//                |      +------------------------+
//                |
//                |      +---------------------------+
//                |      |DataPoint 1                |
//                v      |+------+------+   +------+ |
//             +-----+   ||label |label |...|label | |
//             |  1  |-->||value1|value2|...|valueN| |
//             +-----+   |+------+------+   +------+ |
//             |  .  |   |+-----+                    |
//             |  .  |   ||value|                    |
//             |  .  |   |+-----+                    |
//             |  .  |   +---------------------------+
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |   +---------------------------+
//             |  .  |   |DataPoint M                |
//             +-----+   |+------+------+   +------+ |
//             |  M  |-->||label |label |...|label | |
//             +-----+   ||value1|value2|...|valueN| |
//                       |+------+------+   +------+ |
//                       |+-----+                    |
//                       ||value|                    |
//                       |+-----+                    |
//                       +---------------------------+
//
//-----------------------------------------------------------------------
// DataPoint is a value of specific type corresponding to a given moment in
// time. Each DataPoint is timestamped.
//
// DataPoint is strongly typed: each DataPoint type has a specific Protobuf message
// depending on the value type of the metric and thus there are currently 4 DataPoint
// messages, which correspond to the types of metric values.
type Metric struct {
	// metric_descriptor describes the Metric.
	MetricDescriptor *MetricDescriptor `protobuf:"bytes,1,opt,name=metric_descriptor,json=metricDescriptor,proto3" json:"metric_descriptor,omitempty"`
	// Data is a list of one or more DataPoints for a single metric. Only one of the
	// following fields is used for the data, depending on the type of the metric defined
	// by MetricDescriptor.type field.
	Int64DataPoints      []*Int64DataPoint     `protobuf:"bytes,2,rep,name=int64_data_points,json=int64DataPoints,proto3" json:"int64_data_points,omitempty"`
	DoubleDataPoints     []*DoubleDataPoint    `protobuf:"bytes,3,rep,name=double_data_points,json=doubleDataPoints,proto3" json:"double_data_points,omitempty"`
	HistogramDataPoints  []*HistogramDataPoint `protobuf:"bytes,4,rep,name=histogram_data_points,json=histogramDataPoints,proto3" json:"histogram_data_points,omitempty"`
	SummaryDataPoints    []*SummaryDataPoint   `protobuf:"bytes,5,rep,name=summary_data_points,json=summaryDataPoints,proto3" json:"summary_data_points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{2}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetMetricDescriptor() *MetricDescriptor {
	if m != nil {
		return m.MetricDescriptor
	}
	return nil
}

func (m *Metric) GetInt64DataPoints() []*Int64DataPoint {
	if m != nil {
		return m.Int64DataPoints
	}
	return nil
}

func (m *Metric) GetDoubleDataPoints() []*DoubleDataPoint {
	if m != nil {
		return m.DoubleDataPoints
	}
	return nil
}

func (m *Metric) GetHistogramDataPoints() []*HistogramDataPoint {
	if m != nil {
		return m.HistogramDataPoints
	}
	return nil
}

func (m *Metric) GetSummaryDataPoints() []*SummaryDataPoint {
	if m != nil {
		return m.SummaryDataPoints
	}
	return nil
}

// Defines a metric type and its schema.
type MetricDescriptor struct {
	// name of the metric, including its DNS name prefix. It must be unique.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// unit in which the metric value is reported. Follows the format
	// described by http://unitsofmeasure.org/ucum.html.
	Unit string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	// type is the type of values this metric has.
	Type MetricDescriptor_Type `protobuf:"varint,4,opt,name=type,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_Type" json:"type,omitempty"`
	// structure is the Structure of the values this metric has.
	Structure            MetricDescriptor_Structure `protobuf:"varint,5,opt,name=structure,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_Structure" json:"structure,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MetricDescriptor) Reset()         { *m = MetricDescriptor{} }
func (m *MetricDescriptor) String() string { return proto.CompactTextString(m) }
func (*MetricDescriptor) ProtoMessage()    {}
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3}
}

func (m *MetricDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDescriptor.Unmarshal(m, b)
}
func (m *MetricDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDescriptor.Marshal(b, m, deterministic)
}
func (m *MetricDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDescriptor.Merge(m, src)
}
func (m *MetricDescriptor) XXX_Size() int {
	return xxx_messageInfo_MetricDescriptor.Size(m)
}
func (m *MetricDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDescriptor proto.InternalMessageInfo

func (m *MetricDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDescriptor) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MetricDescriptor) GetType() MetricDescriptor_Type {
	if m != nil {
		return m.Type
	}
	return MetricDescriptor_INVALID_TYPE
}

func (m *MetricDescriptor) GetStructure() MetricDescriptor_Structure {
	if m != nil {
		return m.Structure
	}
	return MetricDescriptor_GROUPING
}

// Int64DataPoint is a single data point in a timeseries that describes the time-varying
// values of a int64 metric.
type Int64DataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unix_nano is the time when the cumulative value was reset to zero.
	// This is used for Counter type only. For Gauge the value is not specified and
	// defaults to 0.
	//
	// The cumulative value is over the time interval (start_time_unix_nano, time_unix_nano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// time_unix_nano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// value itself.
	Value                int64    `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Int64DataPoint) Reset()         { *m = Int64DataPoint{} }
func (m *Int64DataPoint) String() string { return proto.CompactTextString(m) }
func (*Int64DataPoint) ProtoMessage()    {}
func (*Int64DataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{4}
}

func (m *Int64DataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Int64DataPoint.Unmarshal(m, b)
}
func (m *Int64DataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Int64DataPoint.Marshal(b, m, deterministic)
}
func (m *Int64DataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int64DataPoint.Merge(m, src)
}
func (m *Int64DataPoint) XXX_Size() int {
	return xxx_messageInfo_Int64DataPoint.Size(m)
}
func (m *Int64DataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Int64DataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_Int64DataPoint proto.InternalMessageInfo

func (m *Int64DataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Int64DataPoint) GetStartTimeUnixNano() uint64 {
	if m != nil {
		return m.StartTimeUnixNano
	}
	return 0
}

func (m *Int64DataPoint) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *Int64DataPoint) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// DoubleDataPoint is a single data point in a timeseries that describes the time-varying
// value of a double metric.
type DoubleDataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unix_nano is the time when the cumulative value was reset to zero.
	// This is used for Counter type only. For Gauge the value is not specified and
	// defaults to 0.
	//
	// The cumulative value is over the time interval (start_time_unix_nano, time_unix_nano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// time_unix_nano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// value itself.
	Value                float64  `protobuf:"fixed64,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoubleDataPoint) Reset()         { *m = DoubleDataPoint{} }
func (m *DoubleDataPoint) String() string { return proto.CompactTextString(m) }
func (*DoubleDataPoint) ProtoMessage()    {}
func (*DoubleDataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{5}
}

func (m *DoubleDataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoubleDataPoint.Unmarshal(m, b)
}
func (m *DoubleDataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoubleDataPoint.Marshal(b, m, deterministic)
}
func (m *DoubleDataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleDataPoint.Merge(m, src)
}
func (m *DoubleDataPoint) XXX_Size() int {
	return xxx_messageInfo_DoubleDataPoint.Size(m)
}
func (m *DoubleDataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleDataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleDataPoint proto.InternalMessageInfo

func (m *DoubleDataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *DoubleDataPoint) GetStartTimeUnixNano() uint64 {
	if m != nil {
		return m.StartTimeUnixNano
	}
	return 0
}

func (m *DoubleDataPoint) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *DoubleDataPoint) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// HistogramDataPoint is a single data point in a timeseries that describes the time-varying
// values of a Histogram. A Histogram contains summary statistics for a population of values,
// it may optionally contain the distribution of those values across a set of buckets.
type HistogramDataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unix_nano is the time when the cumulative value was reset to zero.
	//
	// The cumulative value is over the time interval (start_time_unix_nano, time_unix_nano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	// Note: this field is always unspecified and ignored if MetricDescriptor.type==GAUGE_HISTOGRAM.
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// time_unix_nano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// count is the number of values in the population. Must be non-negative. This value
	// must be equal to the sum of the "count" fields in buckets if a histogram is provided.
	Count uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// sum of the values in the population. If count is zero then this field
	// must be zero. This value must be equal to the sum of the "sum" fields in buckets if
	// a histogram is provided.
	Sum float64 `protobuf:"fixed64,5,opt,name=sum,proto3" json:"sum,omitempty"`
	// buckets is an optional field contains the values of histogram for each bucket.
	//
	// The sum of the values in the buckets "count" field must equal the value in the count field.
	//
	// The number of elements in buckets array must be by one greater than the
	// number of elements in bucket_bounds array.
	//
	// Note: if HistogramDataPoint.bucket_options defines bucket bounds then this field
	// must also be present and number of elements in this field must be equal to the
	// number of buckets defined by bucket_options.
	Buckets []*HistogramDataPoint_Bucket `protobuf:"bytes,6,rep,name=buckets,proto3" json:"buckets,omitempty"`
	// explicit_bounds specifies buckets with explicitly defined bounds for values.
	// The bucket boundaries are described by "bounds" field.
	//
	// This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
	// at index i are:
	//
	// [0, bounds[i]) for i == 0
	// [bounds[i-1], bounds[i]) for 0 < i < N-1
	// [bounds[i], +infinity) for i == N-1
	// The values in bounds array must be strictly increasing and > 0.
	//
	// Note: only [a, b) intervals are currently supported for each bucket. If we decides
	// to also support (a, b] intervals we should add support for these by defining a boolean
	// value which decides what type of intervals to use.
	ExplicitBounds       []float64 `protobuf:"fixed64,7,rep,packed,name=explicit_bounds,json=explicitBounds,proto3" json:"explicit_bounds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HistogramDataPoint) Reset()         { *m = HistogramDataPoint{} }
func (m *HistogramDataPoint) String() string { return proto.CompactTextString(m) }
func (*HistogramDataPoint) ProtoMessage()    {}
func (*HistogramDataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{6}
}

func (m *HistogramDataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramDataPoint.Unmarshal(m, b)
}
func (m *HistogramDataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramDataPoint.Marshal(b, m, deterministic)
}
func (m *HistogramDataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramDataPoint.Merge(m, src)
}
func (m *HistogramDataPoint) XXX_Size() int {
	return xxx_messageInfo_HistogramDataPoint.Size(m)
}
func (m *HistogramDataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramDataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramDataPoint proto.InternalMessageInfo

func (m *HistogramDataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *HistogramDataPoint) GetStartTimeUnixNano() uint64 {
	if m != nil {
		return m.StartTimeUnixNano
	}
	return 0
}

func (m *HistogramDataPoint) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *HistogramDataPoint) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HistogramDataPoint) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *HistogramDataPoint) GetBuckets() []*HistogramDataPoint_Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

func (m *HistogramDataPoint) GetExplicitBounds() []float64 {
	if m != nil {
		return m.ExplicitBounds
	}
	return nil
}

// Bucket contains values for a bucket.
type HistogramDataPoint_Bucket struct {
	// The number of values in each bucket of the histogram, as described by
	// bucket_options.
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// exemplar is an optional representative value of the bucket.
	Exemplar             *HistogramDataPoint_Bucket_Exemplar `protobuf:"bytes,2,opt,name=exemplar,proto3" json:"exemplar,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *HistogramDataPoint_Bucket) Reset()         { *m = HistogramDataPoint_Bucket{} }
func (m *HistogramDataPoint_Bucket) String() string { return proto.CompactTextString(m) }
func (*HistogramDataPoint_Bucket) ProtoMessage()    {}
func (*HistogramDataPoint_Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{6, 0}
}

func (m *HistogramDataPoint_Bucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramDataPoint_Bucket.Unmarshal(m, b)
}
func (m *HistogramDataPoint_Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramDataPoint_Bucket.Marshal(b, m, deterministic)
}
func (m *HistogramDataPoint_Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramDataPoint_Bucket.Merge(m, src)
}
func (m *HistogramDataPoint_Bucket) XXX_Size() int {
	return xxx_messageInfo_HistogramDataPoint_Bucket.Size(m)
}
func (m *HistogramDataPoint_Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramDataPoint_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramDataPoint_Bucket proto.InternalMessageInfo

func (m *HistogramDataPoint_Bucket) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HistogramDataPoint_Bucket) GetExemplar() *HistogramDataPoint_Bucket_Exemplar {
	if m != nil {
		return m.Exemplar
	}
	return nil
}

// Exemplars are example points that may be used to annotate aggregated
// Histogram values. They are metadata that gives information about a
// particular value added to a Histogram bucket.
type HistogramDataPoint_Bucket_Exemplar struct {
	// Value of the exemplar point. It determines which bucket the exemplar belongs to.
	// If bucket_options define bounds for this bucket then this value must be within
	// the defined bounds.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// time_unix_nano is the moment when this exemplar was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// exemplar_attachments are contextual information about the example value.
	// Keys in this list must be unique.
	Attachments          []*v11.StringKeyValue `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *HistogramDataPoint_Bucket_Exemplar) Reset()         { *m = HistogramDataPoint_Bucket_Exemplar{} }
func (m *HistogramDataPoint_Bucket_Exemplar) String() string { return proto.CompactTextString(m) }
func (*HistogramDataPoint_Bucket_Exemplar) ProtoMessage()    {}
func (*HistogramDataPoint_Bucket_Exemplar) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{6, 0, 0}
}

func (m *HistogramDataPoint_Bucket_Exemplar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramDataPoint_Bucket_Exemplar.Unmarshal(m, b)
}
func (m *HistogramDataPoint_Bucket_Exemplar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramDataPoint_Bucket_Exemplar.Marshal(b, m, deterministic)
}
func (m *HistogramDataPoint_Bucket_Exemplar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramDataPoint_Bucket_Exemplar.Merge(m, src)
}
func (m *HistogramDataPoint_Bucket_Exemplar) XXX_Size() int {
	return xxx_messageInfo_HistogramDataPoint_Bucket_Exemplar.Size(m)
}
func (m *HistogramDataPoint_Bucket_Exemplar) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramDataPoint_Bucket_Exemplar.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramDataPoint_Bucket_Exemplar proto.InternalMessageInfo

func (m *HistogramDataPoint_Bucket_Exemplar) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *HistogramDataPoint_Bucket_Exemplar) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *HistogramDataPoint_Bucket_Exemplar) GetAttachments() []*v11.StringKeyValue {
	if m != nil {
		return m.Attachments
	}
	return nil
}

// SummaryDataPoint is a single data point in a timeseries that describes the time-varying
// values of a Summary metric.
type SummaryDataPoint struct {
	// The set of labels that uniquely identify this timeseries.
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// start_time_unix_nano is the time when the cumulative value was reset to zero.
	//
	// The cumulative value is over the time interval (start_time_unix_nano, time_unix_nano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// time_unix_nano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// The total number of recorded values since start_time. Optional since
	// some systems don't expose this.
	Count uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// The total sum of recorded values since start_time. Optional since some
	// systems don't expose this. If count is zero then this field must be zero.
	Sum float64 `protobuf:"fixed64,5,opt,name=sum,proto3" json:"sum,omitempty"`
	// A list of values at different percentiles of the distribution calculated
	// from the current snapshot. The percentiles must be strictly increasing.
	PercentileValues     []*SummaryDataPoint_ValueAtPercentile `protobuf:"bytes,6,rep,name=percentile_values,json=percentileValues,proto3" json:"percentile_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *SummaryDataPoint) Reset()         { *m = SummaryDataPoint{} }
func (m *SummaryDataPoint) String() string { return proto.CompactTextString(m) }
func (*SummaryDataPoint) ProtoMessage()    {}
func (*SummaryDataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{7}
}

func (m *SummaryDataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryDataPoint.Unmarshal(m, b)
}
func (m *SummaryDataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryDataPoint.Marshal(b, m, deterministic)
}
func (m *SummaryDataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryDataPoint.Merge(m, src)
}
func (m *SummaryDataPoint) XXX_Size() int {
	return xxx_messageInfo_SummaryDataPoint.Size(m)
}
func (m *SummaryDataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryDataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryDataPoint proto.InternalMessageInfo

func (m *SummaryDataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *SummaryDataPoint) GetStartTimeUnixNano() uint64 {
	if m != nil {
		return m.StartTimeUnixNano
	}
	return 0
}

func (m *SummaryDataPoint) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *SummaryDataPoint) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SummaryDataPoint) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *SummaryDataPoint) GetPercentileValues() []*SummaryDataPoint_ValueAtPercentile {
	if m != nil {
		return m.PercentileValues
	}
	return nil
}

// Represents the value at a given percentile of a distribution.
//
// To record Min and Max values following conventions are used:
// - The 100th percentile is equivalent to the maximum value observed.
// - The 0th percentile is equivalent to the minimum value observed.
//
// See the following issue for more context:
// https://github.com/open-telemetry/opentelemetry-proto/issues/125
type SummaryDataPoint_ValueAtPercentile struct {
	// The percentile of a distribution. Must be in the interval
	// [0.0, 100.0].
	Percentile float64 `protobuf:"fixed64,1,opt,name=percentile,proto3" json:"percentile,omitempty"`
	// The value at the given percentile of a distribution.
	Value                float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SummaryDataPoint_ValueAtPercentile) Reset()         { *m = SummaryDataPoint_ValueAtPercentile{} }
func (m *SummaryDataPoint_ValueAtPercentile) String() string { return proto.CompactTextString(m) }
func (*SummaryDataPoint_ValueAtPercentile) ProtoMessage()    {}
func (*SummaryDataPoint_ValueAtPercentile) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{7, 0}
}

func (m *SummaryDataPoint_ValueAtPercentile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SummaryDataPoint_ValueAtPercentile.Unmarshal(m, b)
}
func (m *SummaryDataPoint_ValueAtPercentile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SummaryDataPoint_ValueAtPercentile.Marshal(b, m, deterministic)
}
func (m *SummaryDataPoint_ValueAtPercentile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryDataPoint_ValueAtPercentile.Merge(m, src)
}
func (m *SummaryDataPoint_ValueAtPercentile) XXX_Size() int {
	return xxx_messageInfo_SummaryDataPoint_ValueAtPercentile.Size(m)
}
func (m *SummaryDataPoint_ValueAtPercentile) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryDataPoint_ValueAtPercentile.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryDataPoint_ValueAtPercentile proto.InternalMessageInfo

func (m *SummaryDataPoint_ValueAtPercentile) GetPercentile() float64 {
	if m != nil {
		return m.Percentile
	}
	return 0
}

func (m *SummaryDataPoint_ValueAtPercentile) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterEnum("opentelemetry.proto.metrics.v1.MetricDescriptor_Type", MetricDescriptor_Type_name, MetricDescriptor_Type_value)
	proto.RegisterEnum("opentelemetry.proto.metrics.v1.MetricDescriptor_Structure", MetricDescriptor_Structure_name, MetricDescriptor_Structure_value)
	proto.RegisterType((*ResourceMetrics)(nil), "opentelemetry.proto.metrics.v1.ResourceMetrics")
	proto.RegisterType((*InstrumentationLibraryMetrics)(nil), "opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics")
	proto.RegisterType((*Metric)(nil), "opentelemetry.proto.metrics.v1.Metric")
	proto.RegisterType((*MetricDescriptor)(nil), "opentelemetry.proto.metrics.v1.MetricDescriptor")
	proto.RegisterType((*Int64DataPoint)(nil), "opentelemetry.proto.metrics.v1.Int64DataPoint")
	proto.RegisterType((*DoubleDataPoint)(nil), "opentelemetry.proto.metrics.v1.DoubleDataPoint")
	proto.RegisterType((*HistogramDataPoint)(nil), "opentelemetry.proto.metrics.v1.HistogramDataPoint")
	proto.RegisterType((*HistogramDataPoint_Bucket)(nil), "opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket")
	proto.RegisterType((*HistogramDataPoint_Bucket_Exemplar)(nil), "opentelemetry.proto.metrics.v1.HistogramDataPoint.Bucket.Exemplar")
	proto.RegisterType((*SummaryDataPoint)(nil), "opentelemetry.proto.metrics.v1.SummaryDataPoint")
	proto.RegisterType((*SummaryDataPoint_ValueAtPercentile)(nil), "opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtPercentile")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/metrics/v1/metrics.proto", fileDescriptor_3c3112f9fa006917)
}

var fileDescriptor_3c3112f9fa006917 = []byte{
	// 978 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xed, 0x6e, 0xe3, 0x44,
	0x17, 0x5e, 0xc7, 0x49, 0xda, 0x9c, 0xf4, 0x6d, 0x9c, 0x69, 0x5f, 0x88, 0x22, 0xed, 0x12, 0x22,
	0x3e, 0x0a, 0xa2, 0x0e, 0x2d, 0xa5, 0x12, 0x48, 0x08, 0x12, 0x12, 0x75, 0x23, 0x9a, 0x0f, 0x4d,
	0xd2, 0x15, 0xbb, 0xd2, 0x62, 0x1c, 0x67, 0x48, 0x47, 0xc4, 0x33, 0x91, 0x3d, 0x8e, 0x9a, 0x0b,
	0xe0, 0x0e, 0x90, 0xe0, 0x27, 0x17, 0x03, 0x17, 0xc0, 0x1d, 0x70, 0x01, 0xfc, 0xe3, 0x06, 0x90,
	0xc7, 0x76, 0x1c, 0xa7, 0x69, 0x43, 0xf9, 0x05, 0xfc, 0x3b, 0x7e, 0xe6, 0x9c, 0xe7, 0x3c, 0xe7,
	0xc3, 0xf6, 0xc0, 0x7b, 0x7c, 0x46, 0x98, 0x20, 0x53, 0x62, 0x13, 0xe1, 0x2c, 0x6a, 0x33, 0x87,
	0x0b, 0x5e, 0xf3, 0x6d, 0x6a, 0xb9, 0xb5, 0xf9, 0x49, 0x64, 0xea, 0xf2, 0x00, 0x3d, 0x49, 0x78,
	0x07, 0xa0, 0x1e, 0xb9, 0xcc, 0x4f, 0xca, 0xef, 0x6e, 0x62, 0xb3, 0xb8, 0x6d, 0x73, 0xe6, 0x93,
	0x05, 0x56, 0x10, 0x56, 0xd6, 0x37, 0xf9, 0x3a, 0xc4, 0xe5, 0x9e, 0x63, 0x11, 0xdf, 0x3b, 0xb2,
	0x03, 0xff, 0xea, 0x6f, 0x0a, 0x14, 0x70, 0x08, 0x75, 0x82, 0x94, 0xa8, 0x05, 0xbb, 0x91, 0x57,
	0x49, 0xa9, 0x28, 0x47, 0xf9, 0xd3, 0x77, 0xf4, 0x4d, 0x12, 0x97, 0x54, 0xf3, 0x13, 0x3d, 0xe2,
	0xc0, 0xcb, 0x50, 0xf4, 0x9d, 0x02, 0xaf, 0x51, 0xe6, 0x0a, 0xc7, 0xb3, 0x09, 0x13, 0xa6, 0xa0,
	0x9c, 0x19, 0x53, 0x3a, 0x72, 0x4c, 0x67, 0x61, 0x84, 0xd5, 0x95, 0x52, 0x15, 0xf5, 0x28, 0x7f,
	0xfa, 0x89, 0x7e, 0x7f, 0x07, 0xf4, 0x76, 0x92, 0xe6, 0x32, 0x60, 0x09, 0xf5, 0xe2, 0xc7, 0xf4,
	0xbe, 0xe3, 0xea, 0xaf, 0x0a, 0x3c, 0xbe, 0x97, 0x00, 0x31, 0x78, 0xf5, 0x0e, 0xa1, 0x61, 0xfd,
	0x1f, 0x6e, 0x14, 0x18, 0x36, 0xfe, 0x4e, 0x7d, 0xf8, 0x95, 0xcd, 0xc2, 0xd0, 0x67, 0xb0, 0x93,
	0x6c, 0xc0, 0x5b, 0xdb, 0x1a, 0x10, 0x28, 0xc5, 0x51, 0x58, 0xf5, 0x77, 0x15, 0xb2, 0x01, 0x86,
	0x5e, 0x42, 0x31, 0x40, 0x8d, 0x31, 0x71, 0x2d, 0x87, 0xce, 0x04, 0x77, 0x42, 0xd9, 0xef, 0xff,
	0x35, 0xda, 0xe6, 0x32, 0x0e, 0x6b, 0xf6, 0x1a, 0x82, 0x5e, 0x40, 0x91, 0x32, 0x71, 0x7e, 0x66,
	0x8c, 0x4d, 0x61, 0x1a, 0x33, 0x4e, 0x99, 0x88, 0x54, 0xeb, 0xdb, 0xc7, 0x26, 0xce, 0xcf, 0x9a,
	0xa6, 0x30, 0xfb, 0x7e, 0x18, 0x2e, 0xd0, 0xc4, 0xb3, 0x8b, 0x5e, 0x02, 0x1a, 0x73, 0x6f, 0x34,
	0x25, 0x09, 0x72, 0x55, 0x92, 0xd7, 0xb6, 0x91, 0x37, 0x65, 0x64, 0xcc, 0xae, 0x8d, 0x93, 0x80,
	0x8b, 0xbe, 0x81, 0xff, 0x5f, 0x53, 0x57, 0xf0, 0x89, 0x63, 0xda, 0x89, 0x0c, 0x69, 0x99, 0xe1,
	0x74, 0x5b, 0x86, 0xa7, 0x51, 0x70, 0x9c, 0xe4, 0xe0, 0xfa, 0x16, 0xe6, 0xa2, 0xaf, 0xe1, 0xc0,
	0xf5, 0x6c, 0xdb, 0xdf, 0xeb, 0xd5, 0x2c, 0x19, 0x99, 0x65, 0xeb, 0x0c, 0x06, 0x41, 0x68, 0x9c,
	0xa3, 0xe8, 0xae, 0x21, 0x6e, 0xf5, 0x27, 0x15, 0xb4, 0xf5, 0x59, 0x21, 0x04, 0x69, 0x66, 0xda,
	0xc1, 0x2b, 0x9a, 0xc3, 0xd2, 0x46, 0x15, 0xc8, 0x47, 0x5b, 0x40, 0x39, 0x2b, 0xa5, 0xe4, 0xd1,
	0x2a, 0xe4, 0x47, 0x79, 0x8c, 0x8a, 0x92, 0x1a, 0x44, 0xf9, 0x36, 0x6a, 0x43, 0x5a, 0x2c, 0x66,
	0xa4, 0x94, 0xae, 0x28, 0x47, 0xfb, 0x77, 0x2c, 0xfb, 0x3d, 0x5b, 0xa3, 0x0f, 0x17, 0x33, 0x82,
	0x25, 0x05, 0xfa, 0x12, 0x72, 0xfe, 0xca, 0x5b, 0xc2, 0x73, 0x48, 0x29, 0x23, 0xf9, 0x3e, 0x7e,
	0x30, 0xdf, 0x20, 0x62, 0xc0, 0x31, 0x59, 0x75, 0x0e, 0x69, 0x3f, 0x0f, 0xd2, 0x60, 0xaf, 0xdd,
	0x7d, 0x56, 0xbf, 0x6c, 0x37, 0x8d, 0xe1, 0xf3, 0x7e, 0x4b, 0x7b, 0x84, 0x72, 0x90, 0x69, 0x77,
	0x87, 0xe7, 0x67, 0x9a, 0x82, 0x0e, 0xa0, 0xd0, 0xe9, 0x75, 0x7b, 0xc3, 0x5e, 0xb7, 0xfd, 0xb9,
	0x11, 0x80, 0x29, 0x04, 0x90, 0x6d, 0xf6, 0xae, 0x1a, 0x97, 0x2d, 0x4d, 0x45, 0x87, 0xa0, 0xc5,
	0x0e, 0x21, 0x9a, 0x46, 0xff, 0x83, 0xdc, 0xd3, 0xf6, 0x60, 0xd8, 0xbb, 0xc0, 0xf5, 0x8e, 0x96,
	0x41, 0x79, 0xd8, 0x19, 0x5c, 0x75, 0x3a, 0x75, 0xfc, 0x5c, 0xcb, 0x56, 0xdf, 0x84, 0xdc, 0x52,
	0x0f, 0xda, 0x83, 0xdd, 0x0b, 0xdc, 0xbb, 0xea, 0xb7, 0xbb, 0x17, 0xda, 0x23, 0x9f, 0xb8, 0xde,
	0x6c, 0xfa, 0xb6, 0x52, 0xfd, 0x59, 0x81, 0xfd, 0xe4, 0xbe, 0xa3, 0x16, 0x64, 0xa7, 0xe6, 0x88,
	0x4c, 0xdd, 0x92, 0x22, 0x57, 0xe1, 0x78, 0xcb, 0x57, 0x64, 0x20, 0x1c, 0xca, 0x26, 0x5f, 0x90,
	0xc5, 0x33, 0x73, 0xea, 0x11, 0x1c, 0x06, 0xa3, 0x1a, 0x1c, 0xba, 0xc2, 0x74, 0x84, 0x21, 0xa8,
	0x4d, 0x0c, 0x8f, 0xd1, 0x1b, 0x83, 0x99, 0x8c, 0xcb, 0xe1, 0x66, 0x71, 0x51, 0x9e, 0x0d, 0xa9,
	0x4d, 0xae, 0x18, 0xbd, 0xe9, 0x9a, 0x8c, 0xa3, 0x37, 0x60, 0x7f, 0xcd, 0x55, 0x95, 0xae, 0x7b,
	0x62, 0xd5, 0xeb, 0x10, 0x32, 0x73, 0x3f, 0x8f, 0x9c, 0xba, 0x8a, 0x83, 0x87, 0xea, 0x2f, 0x0a,
	0x14, 0xd6, 0xde, 0xac, 0x7f, 0x53, 0x1d, 0x4a, 0x54, 0xc7, 0x1f, 0x69, 0x40, 0xb7, 0xdf, 0xdf,
	0x7f, 0x7e, 0x29, 0x16, 0xf7, 0x98, 0x90, 0xa5, 0xa4, 0x71, 0xf0, 0x80, 0x34, 0x50, 0x5d, 0xcf,
	0x96, 0x2f, 0x93, 0x82, 0x7d, 0x13, 0x0d, 0x60, 0x67, 0xe4, 0x59, 0xdf, 0x12, 0xe1, 0x96, 0xb2,
	0xb2, 0x8c, 0x8f, 0x1e, 0xfe, 0x29, 0xd3, 0x1b, 0x92, 0x01, 0x47, 0x4c, 0xe8, 0x6d, 0x28, 0x90,
	0x9b, 0xd9, 0x94, 0x5a, 0x54, 0x18, 0x23, 0xee, 0xb1, 0xb1, 0x5b, 0xda, 0xa9, 0xa8, 0x47, 0x0a,
	0xde, 0x8f, 0xe0, 0x86, 0x44, 0xcb, 0x3f, 0xa6, 0x20, 0x1b, 0x04, 0xc7, 0x82, 0x95, 0x55, 0xc1,
	0x5f, 0xc1, 0x2e, 0xb9, 0x21, 0xf6, 0x6c, 0x6a, 0x3a, 0xb2, 0x23, 0xf9, 0xd3, 0xc6, 0xdf, 0xd6,
	0xa7, 0xb7, 0x42, 0x26, 0xbc, 0xe4, 0x2c, 0xff, 0xa0, 0xc0, 0x6e, 0x04, 0xc7, 0xe3, 0x57, 0x56,
	0xc6, 0xbf, 0xa1, 0xdf, 0xa9, 0x0d, 0xfd, 0xee, 0x41, 0xde, 0x14, 0xc2, 0xb4, 0xae, 0xfd, 0x3f,
	0x74, 0xf4, 0xe3, 0x79, 0xe0, 0x4a, 0xac, 0x32, 0x54, 0xbf, 0x57, 0x41, 0x5b, 0xff, 0x9e, 0xff,
	0x47, 0x76, 0x8e, 0x43, 0x71, 0x46, 0x1c, 0x8b, 0x30, 0x41, 0xa7, 0xc4, 0x90, 0x5d, 0x8e, 0xb6,
	0xaf, 0xf1, 0xd0, 0x5f, 0x9c, 0x2e, 0x2b, 0xab, 0x8b, 0xfe, 0x92, 0x10, 0x6b, 0x31, 0xb9, 0x3c,
	0x74, 0xcb, 0x6d, 0x28, 0xde, 0x72, 0x43, 0x4f, 0x00, 0x62, 0xc7, 0x70, 0xe4, 0x2b, 0x48, 0xbc,
	0x0d, 0xa9, 0x95, 0x6d, 0x68, 0x08, 0x78, 0x9d, 0xf2, 0x2d, 0x22, 0x1b, 0x7b, 0xe1, 0x6d, 0xb0,
	0xef, 0x1f, 0xf4, 0x95, 0x17, 0x9f, 0x4e, 0xa8, 0xb8, 0xf6, 0x46, 0xfe, 0x60, 0x6a, 0x7e, 0xe8,
	0x71, 0x7c, 0xab, 0x4e, 0x30, 0x1d, 0x07, 0x77, 0xec, 0x09, 0x61, 0xb5, 0xc9, 0xea, 0x25, 0x7f,
	0x94, 0x95, 0x07, 0x1f, 0xfc, 0x19, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x95, 0x4e, 0x2d, 0x0d, 0x0c,
	0x00, 0x00,
}
