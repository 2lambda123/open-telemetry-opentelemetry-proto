// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opentelemetry/proto/collector/dynamicconfig/v1/dynamicconfig_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v1 "github.com/open-telemetry/opentelemetry-proto/gen/go/resource/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConfigRequest struct {
	// Describe the version of the CS protocol to use. Required.
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The resource whose config we are interested in.
	Resource *v1.Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// Optional. Identifies the last configuration version number
	LastConfigFp int32 `protobuf:"varint,3,opt,name=last_config_fp,json=lastConfigFp,proto3" json:"last_config_fp,omitempty"`
	// An opaque string subject to client’s interpretation.
	// Can includes encoded metadata such as replication level,
	// traffic class, target information
	Metadata             string   `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigRequest) Reset()         { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()    {}
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e977b8829ab81ac2, []int{0}
}

func (m *ConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigRequest.Unmarshal(m, b)
}
func (m *ConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigRequest.Marshal(b, m, deterministic)
}
func (m *ConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigRequest.Merge(m, src)
}
func (m *ConfigRequest) XXX_Size() int {
	return xxx_messageInfo_ConfigRequest.Size(m)
}
func (m *ConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigRequest proto.InternalMessageInfo

func (m *ConfigRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ConfigRequest) GetResource() *v1.Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ConfigRequest) GetLastConfigFp() int32 {
	if m != nil {
		return m.LastConfigFp
	}
	return 0
}

func (m *ConfigRequest) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

type ConfigResponse struct {
	// Describe the version of the CS protocol to use. Should match the
	// request’s version.
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Tell the last configuration’s fingerprint. Required.
	ConfigFp     int32                        `protobuf:"varint,2,opt,name=config_fp,json=configFp,proto3" json:"config_fp,omitempty"`
	MetricConfig *ConfigResponse_MetricConfig `protobuf:"bytes,3,opt,name=metric_config,json=metricConfig,proto3" json:"metric_config,omitempty"`
	// Client is suggested to wait this long (in seconds) before pinging the
	// configuration service again.
	SuggestedWaitTime    int32    `protobuf:"varint,4,opt,name=suggested_wait_time,json=suggestedWaitTime,proto3" json:"suggested_wait_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigResponse) Reset()         { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()    {}
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e977b8829ab81ac2, []int{1}
}

func (m *ConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigResponse.Unmarshal(m, b)
}
func (m *ConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigResponse.Marshal(b, m, deterministic)
}
func (m *ConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResponse.Merge(m, src)
}
func (m *ConfigResponse) XXX_Size() int {
	return xxx_messageInfo_ConfigResponse.Size(m)
}
func (m *ConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResponse proto.InternalMessageInfo

func (m *ConfigResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ConfigResponse) GetConfigFp() int32 {
	if m != nil {
		return m.ConfigFp
	}
	return 0
}

func (m *ConfigResponse) GetMetricConfig() *ConfigResponse_MetricConfig {
	if m != nil {
		return m.MetricConfig
	}
	return nil
}

func (m *ConfigResponse) GetSuggestedWaitTime() int32 {
	if m != nil {
		return m.SuggestedWaitTime
	}
	return 0
}

// Configs specific to metrics. Configs specific to traces should
// be a separate sub-message type.
type ConfigResponse_MetricConfig struct {
	CollectingSchedules []*ConfigResponse_MetricConfig_Schedule `protobuf:"bytes,1,rep,name=collecting_schedules,json=collectingSchedules,proto3" json:"collecting_schedules,omitempty"`
	// A list of patterns to match metric names. Any metric
	// matching any of this pattern should not be collected.
	BlacklistPatterns    []string `protobuf:"bytes,2,rep,name=blacklist_patterns,json=blacklistPatterns,proto3" json:"blacklist_patterns,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigResponse_MetricConfig) Reset()         { *m = ConfigResponse_MetricConfig{} }
func (m *ConfigResponse_MetricConfig) String() string { return proto.CompactTextString(m) }
func (*ConfigResponse_MetricConfig) ProtoMessage()    {}
func (*ConfigResponse_MetricConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e977b8829ab81ac2, []int{1, 0}
}

func (m *ConfigResponse_MetricConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigResponse_MetricConfig.Unmarshal(m, b)
}
func (m *ConfigResponse_MetricConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigResponse_MetricConfig.Marshal(b, m, deterministic)
}
func (m *ConfigResponse_MetricConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResponse_MetricConfig.Merge(m, src)
}
func (m *ConfigResponse_MetricConfig) XXX_Size() int {
	return xxx_messageInfo_ConfigResponse_MetricConfig.Size(m)
}
func (m *ConfigResponse_MetricConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResponse_MetricConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResponse_MetricConfig proto.InternalMessageInfo

func (m *ConfigResponse_MetricConfig) GetCollectingSchedules() []*ConfigResponse_MetricConfig_Schedule {
	if m != nil {
		return m.CollectingSchedules
	}
	return nil
}

func (m *ConfigResponse_MetricConfig) GetBlacklistPatterns() []string {
	if m != nil {
		return m.BlacklistPatterns
	}
	return nil
}

// Schedule is used to apply a particular scheduling configuration to
// a metric
type ConfigResponse_MetricConfig_Schedule struct {
	// this schedule is applied to metric names that follow this pattern
	MetricPattern string `protobuf:"bytes,1,opt,name=metric_pattern,json=metricPattern,proto3" json:"metric_pattern,omitempty"`
	// Collection period (in seconds). Should be one of the following:
	// * 30 seconds
	// * 1 minute
	// * 5 minutes
	// * 10 minutes
	// * 30 minutes
	// * 1 hour
	// * 4 hours
	// * 12 hours
	// * 1 day
	// etc.
	// Please ensure that all longer periods are divisible by all shorter
	// ones.
	Period int32 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	// Additional metadata associated with the schedule
	Properties           string   `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigResponse_MetricConfig_Schedule) Reset()         { *m = ConfigResponse_MetricConfig_Schedule{} }
func (m *ConfigResponse_MetricConfig_Schedule) String() string { return proto.CompactTextString(m) }
func (*ConfigResponse_MetricConfig_Schedule) ProtoMessage()    {}
func (*ConfigResponse_MetricConfig_Schedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_e977b8829ab81ac2, []int{1, 0, 0}
}

func (m *ConfigResponse_MetricConfig_Schedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigResponse_MetricConfig_Schedule.Unmarshal(m, b)
}
func (m *ConfigResponse_MetricConfig_Schedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigResponse_MetricConfig_Schedule.Marshal(b, m, deterministic)
}
func (m *ConfigResponse_MetricConfig_Schedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResponse_MetricConfig_Schedule.Merge(m, src)
}
func (m *ConfigResponse_MetricConfig_Schedule) XXX_Size() int {
	return xxx_messageInfo_ConfigResponse_MetricConfig_Schedule.Size(m)
}
func (m *ConfigResponse_MetricConfig_Schedule) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResponse_MetricConfig_Schedule.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResponse_MetricConfig_Schedule proto.InternalMessageInfo

func (m *ConfigResponse_MetricConfig_Schedule) GetMetricPattern() string {
	if m != nil {
		return m.MetricPattern
	}
	return ""
}

func (m *ConfigResponse_MetricConfig_Schedule) GetPeriod() int32 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *ConfigResponse_MetricConfig_Schedule) GetProperties() string {
	if m != nil {
		return m.Properties
	}
	return ""
}

func init() {
	proto.RegisterType((*ConfigRequest)(nil), "opentelemetry.proto.collector.dynamicconfig.v1.ConfigRequest")
	proto.RegisterType((*ConfigResponse)(nil), "opentelemetry.proto.collector.dynamicconfig.v1.ConfigResponse")
	proto.RegisterType((*ConfigResponse_MetricConfig)(nil), "opentelemetry.proto.collector.dynamicconfig.v1.ConfigResponse.MetricConfig")
	proto.RegisterType((*ConfigResponse_MetricConfig_Schedule)(nil), "opentelemetry.proto.collector.dynamicconfig.v1.ConfigResponse.MetricConfig.Schedule")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/collector/dynamicconfig/v1/dynamicconfig_service.proto", fileDescriptor_e977b8829ab81ac2)
}

var fileDescriptor_e977b8829ab81ac2 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5f, 0x6b, 0x13, 0x41,
	0x10, 0x67, 0x93, 0xb6, 0xe6, 0x26, 0x7f, 0xa0, 0x5b, 0x91, 0x33, 0x82, 0x84, 0xa2, 0x10, 0x1f,
	0xb2, 0x47, 0xe2, 0xb3, 0x3e, 0xd4, 0x7f, 0xa0, 0x88, 0xe1, 0x5a, 0x10, 0x7c, 0x39, 0x2e, 0x9b,
	0xe9, 0x75, 0xf1, 0xee, 0xf6, 0xdc, 0xdd, 0x44, 0xfa, 0x09, 0x04, 0x3f, 0x83, 0x08, 0x7e, 0x85,
	0x7e, 0x42, 0xc9, 0xde, 0xde, 0x25, 0x07, 0xa5, 0x50, 0xed, 0xdb, 0xce, 0x4c, 0x7e, 0x7f, 0x66,
	0x26, 0x37, 0xf0, 0x5e, 0x16, 0x98, 0x1b, 0x4c, 0x31, 0x43, 0xa3, 0x2e, 0x83, 0x42, 0x49, 0x23,
	0x03, 0x2e, 0xd3, 0x14, 0xb9, 0x91, 0x2a, 0x58, 0x5e, 0xe6, 0x71, 0x26, 0x38, 0x97, 0xf9, 0xb9,
	0x48, 0x82, 0xf5, 0xb4, 0x99, 0x88, 0x34, 0xaa, 0xb5, 0xe0, 0xc8, 0x2c, 0x8c, 0xb2, 0x06, 0x57,
	0x99, 0x64, 0x35, 0x17, 0x6b, 0x40, 0xd9, 0x7a, 0x3a, 0x64, 0xd7, 0x69, 0x2b, 0xd4, 0x72, 0xa5,
	0x38, 0x6e, 0xc4, 0xaa, 0x77, 0x49, 0x75, 0x7c, 0x45, 0xa0, 0xff, 0xca, 0xa2, 0x43, 0xfc, 0xb6,
	0x42, 0x6d, 0xa8, 0x0f, 0xf7, 0xd6, 0xa8, 0xb4, 0x90, 0xb9, 0x4f, 0x46, 0x64, 0xbc, 0x1f, 0x56,
	0x21, 0x7d, 0x03, 0x9d, 0x0a, 0xed, 0xb7, 0x46, 0x64, 0xdc, 0x9d, 0x3d, 0xbb, 0xd6, 0x5e, 0x2d,
	0xb1, 0x9e, 0xb2, 0xd0, 0xbd, 0xc3, 0x1a, 0x4a, 0x9f, 0xc0, 0x20, 0x8d, 0xb5, 0x89, 0x5c, 0xbf,
	0xe7, 0x85, 0xdf, 0xb6, 0x3a, 0xbd, 0x4d, 0xb6, 0xf4, 0xf2, 0xb6, 0xa0, 0x43, 0xe8, 0x64, 0x68,
	0xe2, 0x65, 0x6c, 0x62, 0x7f, 0x6f, 0x44, 0xc6, 0x5e, 0x58, 0xc7, 0xc7, 0xbf, 0xf7, 0x60, 0x50,
	0x99, 0xd6, 0x85, 0xcc, 0x35, 0xde, 0xe0, 0xfa, 0x11, 0x78, 0x5b, 0xa5, 0x96, 0xad, 0x75, 0x78,
	0xa5, 0x52, 0x40, 0x7f, 0xe3, 0x5c, 0x70, 0xe7, 0xc6, 0x5a, 0xe9, 0xce, 0x3e, 0xdc, 0x72, 0xec,
	0xac, 0xe9, 0x86, 0x7d, 0xb4, 0x9c, 0x2e, 0xd9, 0xcb, 0x76, 0x22, 0xca, 0xe0, 0x48, 0xaf, 0x92,
	0x04, 0xb5, 0xc1, 0x65, 0xf4, 0x3d, 0x16, 0x26, 0x32, 0x22, 0x43, 0xdb, 0xe2, 0x7e, 0x78, 0x58,
	0x97, 0x3e, 0xc7, 0xc2, 0x9c, 0x89, 0x0c, 0x87, 0x57, 0x2d, 0xe8, 0xed, 0xd2, 0xd1, 0x1f, 0x04,
	0xee, 0x3b, 0x27, 0x22, 0x4f, 0x22, 0xcd, 0x2f, 0x70, 0xb9, 0x4a, 0x51, 0xfb, 0x64, 0xd4, 0x1e,
	0x77, 0x67, 0x67, 0x77, 0x68, 0x9d, 0x9d, 0x3a, 0xf2, 0xf0, 0x68, 0xab, 0x58, 0xe5, 0x34, 0x9d,
	0x00, 0x5d, 0xa4, 0x31, 0xff, 0x9a, 0x0a, 0x6d, 0xa2, 0x22, 0x36, 0x06, 0x55, 0xae, 0xfd, 0xd6,
	0xa8, 0x3d, 0xf6, 0xc2, 0xc3, 0xba, 0x32, 0x77, 0x85, 0xa1, 0x80, 0x4e, 0x85, 0xa5, 0x4f, 0x61,
	0xe0, 0xe6, 0xee, 0x70, 0x76, 0x6b, 0x5e, 0xe8, 0xb6, 0xe1, 0x30, 0xf4, 0x01, 0x1c, 0x14, 0xa8,
	0x84, 0x5c, 0xba, 0xc5, 0xb9, 0x88, 0x3e, 0x06, 0x28, 0x94, 0x2c, 0x50, 0x19, 0x81, 0xda, 0xee,
	0xcc, 0x0b, 0x77, 0x32, 0xb3, 0x5f, 0x04, 0xfa, 0xaf, 0xcb, 0x46, 0xdd, 0xd4, 0x7e, 0x12, 0xf0,
	0xde, 0xa1, 0xfb, 0x7b, 0xd1, 0x17, 0xff, 0x3a, 0x24, 0xfb, 0x89, 0x0c, 0x5f, 0xfe, 0xdf, 0x8c,
	0x4f, 0xfe, 0x10, 0x98, 0x0a, 0x79, 0x4b, 0x92, 0x93, 0x87, 0x8d, 0x8e, 0x4e, 0xcb, 0x33, 0x31,
	0xdf, 0xa0, 0xe6, 0xe4, 0xcb, 0xa7, 0x44, 0x98, 0x8b, 0xd5, 0x82, 0x71, 0x99, 0x05, 0x1b, 0xde,
	0xc9, 0xf6, 0x06, 0x34, 0x64, 0x26, 0xe5, 0x45, 0x48, 0x30, 0x0f, 0x92, 0x9b, 0x8e, 0xd2, 0xe2,
	0xc0, 0xfe, 0xf0, 0xf9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0x96, 0xb1, 0x79, 0xcd, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DynamicConfigClient is the client API for DynamicConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DynamicConfigClient interface {
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type dynamicConfigClient struct {
	cc *grpc.ClientConn
}

func NewDynamicConfigClient(cc *grpc.ClientConn) DynamicConfigClient {
	return &dynamicConfigClient{cc}
}

func (c *dynamicConfigClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/opentelemetry.proto.collector.dynamicconfig.v1.DynamicConfig/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicConfigServer is the server API for DynamicConfig service.
type DynamicConfigServer interface {
	GetConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
}

// UnimplementedDynamicConfigServer can be embedded to have forward compatible implementations.
type UnimplementedDynamicConfigServer struct {
}

func (*UnimplementedDynamicConfigServer) GetConfig(ctx context.Context, req *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}

func RegisterDynamicConfigServer(s *grpc.Server, srv DynamicConfigServer) {
	s.RegisterService(&_DynamicConfig_serviceDesc, srv)
}

func _DynamicConfig_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicConfigServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opentelemetry.proto.collector.dynamicconfig.v1.DynamicConfig/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicConfigServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DynamicConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opentelemetry.proto.collector.dynamicconfig.v1.DynamicConfig",
	HandlerType: (*DynamicConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _DynamicConfig_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opentelemetry/proto/collector/dynamicconfig/v1/dynamicconfig_service.proto",
}
