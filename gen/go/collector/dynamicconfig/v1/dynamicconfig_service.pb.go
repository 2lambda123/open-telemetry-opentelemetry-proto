// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opentelemetry/proto/collector/dynamicconfig/v1/dynamicconfig_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v1 "github.com/open-telemetry/opentelemetry-proto/gen/go/resource/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CollectionPeriod describes the sampling period for each metric. All
// larger units are divisible by all smaller ones.
type ConfigResponse_MetricConfig_Schedule_CollectionPeriod int32

const (
	ConfigResponse_MetricConfig_Schedule_NONE   ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 0
	ConfigResponse_MetricConfig_Schedule_SEC_1  ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 1
	ConfigResponse_MetricConfig_Schedule_SEC_5  ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 5
	ConfigResponse_MetricConfig_Schedule_SEC_10 ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 10
	ConfigResponse_MetricConfig_Schedule_SEC_30 ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 30
	ConfigResponse_MetricConfig_Schedule_MIN_1  ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 60
	ConfigResponse_MetricConfig_Schedule_MIN_5  ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 300
	ConfigResponse_MetricConfig_Schedule_MIN_10 ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 600
	ConfigResponse_MetricConfig_Schedule_MIN_30 ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 1800
	ConfigResponse_MetricConfig_Schedule_HR_1   ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 3600
	ConfigResponse_MetricConfig_Schedule_HR_2   ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 7200
	ConfigResponse_MetricConfig_Schedule_HR_4   ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 14400
	ConfigResponse_MetricConfig_Schedule_HR_12  ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 43200
	ConfigResponse_MetricConfig_Schedule_DAY_1  ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 86400
	ConfigResponse_MetricConfig_Schedule_DAY_7  ConfigResponse_MetricConfig_Schedule_CollectionPeriod = 604800
)

var ConfigResponse_MetricConfig_Schedule_CollectionPeriod_name = map[int32]string{
	0:      "NONE",
	1:      "SEC_1",
	5:      "SEC_5",
	10:     "SEC_10",
	30:     "SEC_30",
	60:     "MIN_1",
	300:    "MIN_5",
	600:    "MIN_10",
	1800:   "MIN_30",
	3600:   "HR_1",
	7200:   "HR_2",
	14400:  "HR_4",
	43200:  "HR_12",
	86400:  "DAY_1",
	604800: "DAY_7",
}

var ConfigResponse_MetricConfig_Schedule_CollectionPeriod_value = map[string]int32{
	"NONE":   0,
	"SEC_1":  1,
	"SEC_5":  5,
	"SEC_10": 10,
	"SEC_30": 30,
	"MIN_1":  60,
	"MIN_5":  300,
	"MIN_10": 600,
	"MIN_30": 1800,
	"HR_1":   3600,
	"HR_2":   7200,
	"HR_4":   14400,
	"HR_12":  43200,
	"DAY_1":  86400,
	"DAY_7":  604800,
}

func (x ConfigResponse_MetricConfig_Schedule_CollectionPeriod) String() string {
	return proto.EnumName(ConfigResponse_MetricConfig_Schedule_CollectionPeriod_name, int32(x))
}

func (ConfigResponse_MetricConfig_Schedule_CollectionPeriod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e977b8829ab81ac2, []int{1, 0, 0, 0}
}

type ConfigRequest struct {
	// Describes the version of the config service protocol to use. Required.
	ProtoVersion int32 `protobuf:"varint,1,opt,name=proto_version,json=protoVersion,proto3" json:"proto_version,omitempty"`
	// The target resource. This resource pings the config server requesting
	// updated configs, and the server responds with the config information.
	Resource *v1.Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// Optional. Identifies the last configuration fingerprint / version number.
	// The fingerprint serves as a quick way for the config server to determine
	// whether an update to the configs had occurred -- if the client request's
	// fingerprint differs from the server's, then the server knows that a change
	// had occurred and an updated configuration should be sent.
	LastFingerprint      string   `protobuf:"bytes,3,opt,name=last_fingerprint,json=lastFingerprint,proto3" json:"last_fingerprint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigRequest) Reset()         { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()    {}
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e977b8829ab81ac2, []int{0}
}

func (m *ConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigRequest.Unmarshal(m, b)
}
func (m *ConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigRequest.Marshal(b, m, deterministic)
}
func (m *ConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigRequest.Merge(m, src)
}
func (m *ConfigRequest) XXX_Size() int {
	return xxx_messageInfo_ConfigRequest.Size(m)
}
func (m *ConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigRequest proto.InternalMessageInfo

func (m *ConfigRequest) GetProtoVersion() int32 {
	if m != nil {
		return m.ProtoVersion
	}
	return 0
}

func (m *ConfigRequest) GetResource() *v1.Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ConfigRequest) GetLastFingerprint() string {
	if m != nil {
		return m.LastFingerprint
	}
	return ""
}

type ConfigResponse struct {
	// Describes the version of the config service protocol to use. Should match
	// the requestâ€™s version.
	ProtoVersion int32 `protobuf:"varint,1,opt,name=proto_version,json=protoVersion,proto3" json:"proto_version,omitempty"`
	// Optional. The fingerprint associated with the current config settings. Each
	// change in configs yields a different fingerprint. The client may cache a
	// fingerprint, then return it on the next request to enable the server to
	// quickly check whether a change in the configs occurred. If no changes
	// occurred, then all other fields in the response are optional.
	Fingerprint  string                       `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	MetricConfig *ConfigResponse_MetricConfig `protobuf:"bytes,3,opt,name=metric_config,json=metricConfig,proto3" json:"metric_config,omitempty"`
	TraceConfig  *ConfigResponse_TraceConfig  `protobuf:"bytes,4,opt,name=trace_config,json=traceConfig,proto3" json:"trace_config,omitempty"`
	// Optional. The client is suggested to wait this long (in seconds) before
	// pinging the configuration service again.
	SuggestedWaitTime    int32    `protobuf:"varint,5,opt,name=suggested_wait_time,json=suggestedWaitTime,proto3" json:"suggested_wait_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigResponse) Reset()         { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()    {}
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e977b8829ab81ac2, []int{1}
}

func (m *ConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigResponse.Unmarshal(m, b)
}
func (m *ConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigResponse.Marshal(b, m, deterministic)
}
func (m *ConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResponse.Merge(m, src)
}
func (m *ConfigResponse) XXX_Size() int {
	return xxx_messageInfo_ConfigResponse.Size(m)
}
func (m *ConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResponse proto.InternalMessageInfo

func (m *ConfigResponse) GetProtoVersion() int32 {
	if m != nil {
		return m.ProtoVersion
	}
	return 0
}

func (m *ConfigResponse) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *ConfigResponse) GetMetricConfig() *ConfigResponse_MetricConfig {
	if m != nil {
		return m.MetricConfig
	}
	return nil
}

func (m *ConfigResponse) GetTraceConfig() *ConfigResponse_TraceConfig {
	if m != nil {
		return m.TraceConfig
	}
	return nil
}

func (m *ConfigResponse) GetSuggestedWaitTime() int32 {
	if m != nil {
		return m.SuggestedWaitTime
	}
	return 0
}

// Dynamic configs specific to metrics, namely the metric collection schedule
type ConfigResponse_MetricConfig struct {
	// A single metric may match multiple schedules. This behavior enables a use
	// case in which metadata properties may distinguish different collection
	// periods for the same metric.
	//
	// For example, suppose an implementation uses a "traffic class" metadata
	// property to determine the priority given to sampling a certain metric.
	// Then one schedule may be applied in which a metric is sampled with high
	// priority at an infrequent period, but another schedule may be applied
	// with low priority at a frequent period.
	//
	// In the event no distinguishing metadata is applied to a metric that
	// matches multiple schedules, the schedule that specifies the smallest
	// period is applied.
	//
	// Note, for optimization purposes, it is best practice to use as few
	// schedules as possible to capture all required metric updates. Where you
	// can be conservative, do take full advantage of the inclusion/exclusion
	// patterns to capture as much of your targeted metrics.
	Schedules            []*ConfigResponse_MetricConfig_Schedule `protobuf:"bytes,1,rep,name=schedules,proto3" json:"schedules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *ConfigResponse_MetricConfig) Reset()         { *m = ConfigResponse_MetricConfig{} }
func (m *ConfigResponse_MetricConfig) String() string { return proto.CompactTextString(m) }
func (*ConfigResponse_MetricConfig) ProtoMessage()    {}
func (*ConfigResponse_MetricConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e977b8829ab81ac2, []int{1, 0}
}

func (m *ConfigResponse_MetricConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigResponse_MetricConfig.Unmarshal(m, b)
}
func (m *ConfigResponse_MetricConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigResponse_MetricConfig.Marshal(b, m, deterministic)
}
func (m *ConfigResponse_MetricConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResponse_MetricConfig.Merge(m, src)
}
func (m *ConfigResponse_MetricConfig) XXX_Size() int {
	return xxx_messageInfo_ConfigResponse_MetricConfig.Size(m)
}
func (m *ConfigResponse_MetricConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResponse_MetricConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResponse_MetricConfig proto.InternalMessageInfo

func (m *ConfigResponse_MetricConfig) GetSchedules() []*ConfigResponse_MetricConfig_Schedule {
	if m != nil {
		return m.Schedules
	}
	return nil
}

// A Schedule is used to apply a particular scheduling configuration to
// a metric. If a metric name matches a schedule's patterns, then the metric
// adopts the configuration specified by the schedule.
type ConfigResponse_MetricConfig_Schedule struct {
	// Metrics with names that match a rule in the inclusion_patterns are
	// targeted by this schedule. Metrics that match the exclusion_patterns
	// are not targeted for this schedule, even if they match an inclusion
	// pattern.
	InclusionPatterns []*ConfigResponse_MetricConfig_Schedule_Pattern       `protobuf:"bytes,1,rep,name=inclusion_patterns,json=inclusionPatterns,proto3" json:"inclusion_patterns,omitempty"`
	ExclusionPatterns []*ConfigResponse_MetricConfig_Schedule_Pattern       `protobuf:"bytes,2,rep,name=exclusion_patterns,json=exclusionPatterns,proto3" json:"exclusion_patterns,omitempty"`
	Period            ConfigResponse_MetricConfig_Schedule_CollectionPeriod `protobuf:"varint,3,opt,name=period,proto3,enum=opentelemetry.proto.collector.dynamicconfig.v1.ConfigResponse_MetricConfig_Schedule_CollectionPeriod" json:"period,omitempty"`
	// Optional. Additional opaque metadata associated with the schedule.
	// Interpreting metadata is implementation specific. A metric backend may
	// implement features not directly supported in this configuration
	// protocol, but still desire to communicate these settings to
	// instrumented applications. An application may in turn piggyback
	// metadata on a vendor's metric exporter to communicate information back
	// to its metric backend. In this way, metadata offers a channel to
	// communicate custom settings.
	//
	// Example use cases may include:
	//  * Specifying quality-of-service priority
	//  * Tweaking configurations beyond collection period
	//  * Using alternate representations for collection schedules, matching
	//    metrics, resources, etc.
	//  * Enabling other optimizations
	Metadata             string   `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigResponse_MetricConfig_Schedule) Reset()         { *m = ConfigResponse_MetricConfig_Schedule{} }
func (m *ConfigResponse_MetricConfig_Schedule) String() string { return proto.CompactTextString(m) }
func (*ConfigResponse_MetricConfig_Schedule) ProtoMessage()    {}
func (*ConfigResponse_MetricConfig_Schedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_e977b8829ab81ac2, []int{1, 0, 0}
}

func (m *ConfigResponse_MetricConfig_Schedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigResponse_MetricConfig_Schedule.Unmarshal(m, b)
}
func (m *ConfigResponse_MetricConfig_Schedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigResponse_MetricConfig_Schedule.Marshal(b, m, deterministic)
}
func (m *ConfigResponse_MetricConfig_Schedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResponse_MetricConfig_Schedule.Merge(m, src)
}
func (m *ConfigResponse_MetricConfig_Schedule) XXX_Size() int {
	return xxx_messageInfo_ConfigResponse_MetricConfig_Schedule.Size(m)
}
func (m *ConfigResponse_MetricConfig_Schedule) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResponse_MetricConfig_Schedule.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResponse_MetricConfig_Schedule proto.InternalMessageInfo

func (m *ConfigResponse_MetricConfig_Schedule) GetInclusionPatterns() []*ConfigResponse_MetricConfig_Schedule_Pattern {
	if m != nil {
		return m.InclusionPatterns
	}
	return nil
}

func (m *ConfigResponse_MetricConfig_Schedule) GetExclusionPatterns() []*ConfigResponse_MetricConfig_Schedule_Pattern {
	if m != nil {
		return m.ExclusionPatterns
	}
	return nil
}

func (m *ConfigResponse_MetricConfig_Schedule) GetPeriod() ConfigResponse_MetricConfig_Schedule_CollectionPeriod {
	if m != nil {
		return m.Period
	}
	return ConfigResponse_MetricConfig_Schedule_NONE
}

func (m *ConfigResponse_MetricConfig_Schedule) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// Pattern dictates a light-weight pattern that can match 1 or more
// metrics, for which this schedule will apply. The string is used to
// match against metric names. It should not exceed 100k characters.
type ConfigResponse_MetricConfig_Schedule_Pattern struct {
	// Types that are valid to be assigned to Match:
	//	*ConfigResponse_MetricConfig_Schedule_Pattern_Equals
	//	*ConfigResponse_MetricConfig_Schedule_Pattern_StartsWith
	Match                isConfigResponse_MetricConfig_Schedule_Pattern_Match `protobuf_oneof:"match"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ConfigResponse_MetricConfig_Schedule_Pattern) Reset() {
	*m = ConfigResponse_MetricConfig_Schedule_Pattern{}
}
func (m *ConfigResponse_MetricConfig_Schedule_Pattern) String() string {
	return proto.CompactTextString(m)
}
func (*ConfigResponse_MetricConfig_Schedule_Pattern) ProtoMessage() {}
func (*ConfigResponse_MetricConfig_Schedule_Pattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_e977b8829ab81ac2, []int{1, 0, 0, 0}
}

func (m *ConfigResponse_MetricConfig_Schedule_Pattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigResponse_MetricConfig_Schedule_Pattern.Unmarshal(m, b)
}
func (m *ConfigResponse_MetricConfig_Schedule_Pattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigResponse_MetricConfig_Schedule_Pattern.Marshal(b, m, deterministic)
}
func (m *ConfigResponse_MetricConfig_Schedule_Pattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResponse_MetricConfig_Schedule_Pattern.Merge(m, src)
}
func (m *ConfigResponse_MetricConfig_Schedule_Pattern) XXX_Size() int {
	return xxx_messageInfo_ConfigResponse_MetricConfig_Schedule_Pattern.Size(m)
}
func (m *ConfigResponse_MetricConfig_Schedule_Pattern) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResponse_MetricConfig_Schedule_Pattern.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResponse_MetricConfig_Schedule_Pattern proto.InternalMessageInfo

type isConfigResponse_MetricConfig_Schedule_Pattern_Match interface {
	isConfigResponse_MetricConfig_Schedule_Pattern_Match()
}

type ConfigResponse_MetricConfig_Schedule_Pattern_Equals struct {
	Equals string `protobuf:"bytes,1,opt,name=equals,proto3,oneof"`
}

type ConfigResponse_MetricConfig_Schedule_Pattern_StartsWith struct {
	StartsWith string `protobuf:"bytes,2,opt,name=starts_with,json=startsWith,proto3,oneof"`
}

func (*ConfigResponse_MetricConfig_Schedule_Pattern_Equals) isConfigResponse_MetricConfig_Schedule_Pattern_Match() {
}

func (*ConfigResponse_MetricConfig_Schedule_Pattern_StartsWith) isConfigResponse_MetricConfig_Schedule_Pattern_Match() {
}

func (m *ConfigResponse_MetricConfig_Schedule_Pattern) GetMatch() isConfigResponse_MetricConfig_Schedule_Pattern_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *ConfigResponse_MetricConfig_Schedule_Pattern) GetEquals() string {
	if x, ok := m.GetMatch().(*ConfigResponse_MetricConfig_Schedule_Pattern_Equals); ok {
		return x.Equals
	}
	return ""
}

func (m *ConfigResponse_MetricConfig_Schedule_Pattern) GetStartsWith() string {
	if x, ok := m.GetMatch().(*ConfigResponse_MetricConfig_Schedule_Pattern_StartsWith); ok {
		return x.StartsWith
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConfigResponse_MetricConfig_Schedule_Pattern) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConfigResponse_MetricConfig_Schedule_Pattern_Equals)(nil),
		(*ConfigResponse_MetricConfig_Schedule_Pattern_StartsWith)(nil),
	}
}

// Dynamic configs specific to trace, like sampling rate of a resource.
type ConfigResponse_TraceConfig struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigResponse_TraceConfig) Reset()         { *m = ConfigResponse_TraceConfig{} }
func (m *ConfigResponse_TraceConfig) String() string { return proto.CompactTextString(m) }
func (*ConfigResponse_TraceConfig) ProtoMessage()    {}
func (*ConfigResponse_TraceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e977b8829ab81ac2, []int{1, 1}
}

func (m *ConfigResponse_TraceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigResponse_TraceConfig.Unmarshal(m, b)
}
func (m *ConfigResponse_TraceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigResponse_TraceConfig.Marshal(b, m, deterministic)
}
func (m *ConfigResponse_TraceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResponse_TraceConfig.Merge(m, src)
}
func (m *ConfigResponse_TraceConfig) XXX_Size() int {
	return xxx_messageInfo_ConfigResponse_TraceConfig.Size(m)
}
func (m *ConfigResponse_TraceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResponse_TraceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResponse_TraceConfig proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("opentelemetry.proto.collector.dynamicconfig.v1.ConfigResponse_MetricConfig_Schedule_CollectionPeriod", ConfigResponse_MetricConfig_Schedule_CollectionPeriod_name, ConfigResponse_MetricConfig_Schedule_CollectionPeriod_value)
	proto.RegisterType((*ConfigRequest)(nil), "opentelemetry.proto.collector.dynamicconfig.v1.ConfigRequest")
	proto.RegisterType((*ConfigResponse)(nil), "opentelemetry.proto.collector.dynamicconfig.v1.ConfigResponse")
	proto.RegisterType((*ConfigResponse_MetricConfig)(nil), "opentelemetry.proto.collector.dynamicconfig.v1.ConfigResponse.MetricConfig")
	proto.RegisterType((*ConfigResponse_MetricConfig_Schedule)(nil), "opentelemetry.proto.collector.dynamicconfig.v1.ConfigResponse.MetricConfig.Schedule")
	proto.RegisterType((*ConfigResponse_MetricConfig_Schedule_Pattern)(nil), "opentelemetry.proto.collector.dynamicconfig.v1.ConfigResponse.MetricConfig.Schedule.Pattern")
	proto.RegisterType((*ConfigResponse_TraceConfig)(nil), "opentelemetry.proto.collector.dynamicconfig.v1.ConfigResponse.TraceConfig")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/collector/dynamicconfig/v1/dynamicconfig_service.proto", fileDescriptor_e977b8829ab81ac2)
}

var fileDescriptor_e977b8829ab81ac2 = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xae, 0xd3, 0x38, 0x8d, 0x8f, 0x93, 0xfe, 0xd3, 0xf9, 0x37, 0xf9, 0xa3, 0x5f, 0x28, 0x14,
	0x16, 0xe9, 0xa2, 0x4e, 0x9c, 0x52, 0xc1, 0x02, 0x90, 0xe8, 0x05, 0x4a, 0x51, 0x2f, 0x72, 0x2b,
	0x2a, 0x10, 0x92, 0xe5, 0x3a, 0xd3, 0x64, 0xa4, 0xf8, 0x52, 0xcf, 0x38, 0xa5, 0x0b, 0xa4, 0x2e,
	0x11, 0x6c, 0x78, 0x00, 0x16, 0x20, 0x24, 0x56, 0x3c, 0x44, 0x25, 0x9e, 0x80, 0x15, 0xdd, 0xf0,
	0x18, 0xec, 0x91, 0xc7, 0x97, 0x24, 0x50, 0x21, 0x4a, 0x29, 0xbb, 0x73, 0x3e, 0xcf, 0xf9, 0xbe,
	0x2f, 0x67, 0xe6, 0xe4, 0xc0, 0xaa, 0xe7, 0x13, 0x97, 0x93, 0x1e, 0x71, 0x08, 0x0f, 0x0e, 0x1b,
	0x7e, 0xe0, 0x71, 0xaf, 0x61, 0x7b, 0xbd, 0x1e, 0xb1, 0xb9, 0x17, 0x34, 0xda, 0x87, 0xae, 0xe5,
	0x50, 0xdb, 0xf6, 0xdc, 0x3d, 0xda, 0x69, 0xf4, 0xf5, 0x51, 0xc0, 0x64, 0x24, 0xe8, 0x53, 0x9b,
	0x68, 0xa2, 0x0c, 0x6b, 0x23, 0x5c, 0x31, 0xa8, 0x65, 0x5c, 0xda, 0x48, 0xa9, 0xd6, 0xd7, 0xab,
	0xda, 0x69, 0xda, 0x01, 0x61, 0x5e, 0x18, 0xd8, 0x24, 0x12, 0x4b, 0xe3, 0x98, 0x6a, 0xfa, 0xbd,
	0x04, 0xe5, 0x45, 0x51, 0x6d, 0x90, 0xfd, 0x90, 0x30, 0x8e, 0xaf, 0x40, 0x59, 0x7c, 0x32, 0xfb,
	0x24, 0x60, 0xd4, 0x73, 0x2b, 0x52, 0x4d, 0xaa, 0xcb, 0x46, 0x49, 0x80, 0x0f, 0x63, 0x0c, 0x2f,
	0x43, 0x31, 0x25, 0xaa, 0xe4, 0x6a, 0x52, 0x5d, 0x6d, 0xcd, 0x9c, 0xea, 0x34, 0x53, 0xeb, 0xeb,
	0x9a, 0x91, 0xc4, 0x46, 0x56, 0x8a, 0x67, 0x00, 0xf5, 0x2c, 0xc6, 0xcd, 0x3d, 0xea, 0x76, 0x48,
	0xe0, 0x07, 0xd4, 0xe5, 0x95, 0xf1, 0x9a, 0x54, 0x57, 0x8c, 0x7f, 0x22, 0xfc, 0xee, 0x00, 0x9e,
	0xfe, 0xac, 0xc0, 0x64, 0x6a, 0x94, 0xf9, 0x9e, 0xcb, 0xc8, 0xaf, 0x39, 0xad, 0x81, 0x3a, 0xcc,
	0x9e, 0x13, 0xec, 0xc3, 0x10, 0xf6, 0xa1, 0x1c, 0x59, 0xa6, 0xb6, 0x19, 0xb7, 0x51, 0x38, 0x50,
	0x5b, 0x0f, 0xce, 0xd8, 0x7a, 0x6d, 0xd4, 0x9d, 0xb6, 0x26, 0x38, 0x13, 0xb0, 0xe4, 0x0c, 0x65,
	0xd8, 0x81, 0x12, 0x0f, 0x2c, 0x9b, 0xa4, 0x82, 0x79, 0x21, 0xb8, 0x7a, 0x4e, 0xc1, 0xed, 0x88,
	0x32, 0xc1, 0x54, 0x3e, 0x48, 0xb0, 0x06, 0xff, 0xb2, 0xb0, 0xd3, 0x21, 0x8c, 0x93, 0xb6, 0x79,
	0x60, 0x51, 0x6e, 0x72, 0xea, 0x90, 0x8a, 0x2c, 0xba, 0x35, 0x95, 0x7d, 0xda, 0xb1, 0x28, 0xdf,
	0xa6, 0x0e, 0xa9, 0x7e, 0x29, 0x40, 0x69, 0xd8, 0x3d, 0x0e, 0x40, 0x61, 0x76, 0x97, 0xb4, 0xc3,
	0x1e, 0x61, 0x15, 0xa9, 0x36, 0x5e, 0x57, 0x5b, 0xdb, 0x7f, 0xb0, 0x3b, 0xda, 0x56, 0x42, 0x6e,
	0x0c, 0x64, 0xaa, 0x27, 0x32, 0x14, 0x53, 0x1c, 0xbf, 0x94, 0x00, 0x53, 0xd7, 0xee, 0x85, 0xd1,
	0x95, 0x9a, 0xbe, 0xc5, 0x39, 0x09, 0xdc, 0xd4, 0xca, 0x93, 0x8b, 0xb0, 0xa2, 0x6d, 0xc6, 0x22,
	0xc6, 0x54, 0xa6, 0x9b, 0x20, 0x4c, 0xb8, 0x21, 0x4f, 0x7f, 0x70, 0x93, 0xfb, 0x1b, 0x6e, 0x32,
	0xdd, 0xcc, 0xcd, 0x33, 0x28, 0xf8, 0x24, 0xa0, 0x5e, 0x5b, 0xbc, 0xdb, 0xc9, 0x16, 0xb9, 0x10,
	0x03, 0x8b, 0x71, 0x7d, 0x24, 0x2c, 0xc4, 0x8c, 0x44, 0x14, 0x57, 0xa1, 0xe8, 0x10, 0x6e, 0xb5,
	0x2d, 0x6e, 0x89, 0x77, 0xac, 0x18, 0x59, 0x5e, 0xdd, 0x80, 0x89, 0xc4, 0x26, 0xae, 0x40, 0x81,
	0xec, 0x87, 0x56, 0x8f, 0x89, 0x21, 0x55, 0x56, 0xc6, 0x8c, 0x24, 0xc7, 0x97, 0x41, 0x65, 0xdc,
	0x0a, 0x38, 0x33, 0x0f, 0x28, 0xef, 0xc6, 0x03, 0xba, 0x32, 0x66, 0x40, 0x0c, 0xee, 0x50, 0xde,
	0x5d, 0x98, 0x00, 0xd9, 0xb1, 0xb8, 0xdd, 0x9d, 0xfe, 0x28, 0x01, 0xfa, 0xde, 0x09, 0x2e, 0x42,
	0x7e, 0x7d, 0x63, 0x7d, 0x19, 0x8d, 0x61, 0x05, 0xe4, 0xad, 0xe5, 0x45, 0x53, 0x47, 0x52, 0x1a,
	0xce, 0x23, 0x19, 0x03, 0x14, 0x04, 0xda, 0x44, 0x90, 0xc6, 0x73, 0x4d, 0x74, 0x29, 0x3a, 0xb2,
	0x76, 0x7f, 0xdd, 0xd4, 0xd1, 0x4d, 0x0c, 0x71, 0x38, 0x8f, 0x3e, 0xe4, 0xb0, 0x0a, 0x05, 0x01,
	0x37, 0xd1, 0x49, 0x3e, 0x4d, 0xe6, 0x9a, 0xe8, 0xf9, 0x24, 0x56, 0x20, 0xbf, 0x62, 0x98, 0x3a,
	0x7a, 0xf5, 0x7f, 0x12, 0xb6, 0xd0, 0x9b, 0x1b, 0x49, 0x78, 0x0d, 0x1d, 0xfb, 0x58, 0x05, 0x39,
	0x3a, 0xd0, 0x42, 0xc7, 0x9f, 0x22, 0x1e, 0x79, 0xe9, 0xce, 0x23, 0x53, 0x47, 0x47, 0xef, 0xe4,
	0x34, 0xb9, 0x8e, 0x8e, 0xbe, 0x5e, 0xad, 0x96, 0x41, 0x1d, 0x9a, 0xd5, 0xd6, 0x6b, 0x09, 0xca,
	0x4b, 0xf1, 0xa5, 0x24, 0xf3, 0xf6, 0x42, 0x02, 0xe5, 0x1e, 0xe1, 0x49, 0x76, 0xeb, 0x77, 0x2f,
	0x54, 0xfc, 0x9f, 0x57, 0x6f, 0x9f, 0xef, 0x3d, 0x2c, 0xbc, 0x95, 0x40, 0xa7, 0xde, 0x19, 0x49,
	0x16, 0xfe, 0x1b, 0xf9, 0x45, 0x5b, 0xf1, 0x4e, 0xdb, 0x8c, 0xaa, 0x36, 0xa5, 0xc7, 0x1b, 0x1d,
	0xca, 0xbb, 0xe1, 0xae, 0x66, 0x7b, 0x4e, 0x23, 0xe2, 0x9d, 0x1d, 0x2c, 0xac, 0x11, 0x99, 0xd9,
	0x78, 0x7d, 0x75, 0x88, 0xdb, 0xe8, 0xfc, 0x6c, 0x83, 0xee, 0x16, 0xc4, 0xc1, 0xb9, 0x6f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x57, 0xad, 0x33, 0xed, 0x7a, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DynamicConfigClient is the client API for DynamicConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DynamicConfigClient interface {
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type dynamicConfigClient struct {
	cc *grpc.ClientConn
}

func NewDynamicConfigClient(cc *grpc.ClientConn) DynamicConfigClient {
	return &dynamicConfigClient{cc}
}

func (c *dynamicConfigClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/opentelemetry.proto.collector.dynamicconfig.v1.DynamicConfig/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicConfigServer is the server API for DynamicConfig service.
type DynamicConfigServer interface {
	GetConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
}

// UnimplementedDynamicConfigServer can be embedded to have forward compatible implementations.
type UnimplementedDynamicConfigServer struct {
}

func (*UnimplementedDynamicConfigServer) GetConfig(ctx context.Context, req *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}

func RegisterDynamicConfigServer(s *grpc.Server, srv DynamicConfigServer) {
	s.RegisterService(&_DynamicConfig_serviceDesc, srv)
}

func _DynamicConfig_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicConfigServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opentelemetry.proto.collector.dynamicconfig.v1.DynamicConfig/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicConfigServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DynamicConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opentelemetry.proto.collector.dynamicconfig.v1.DynamicConfig",
	HandlerType: (*DynamicConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _DynamicConfig_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opentelemetry/proto/collector/dynamicconfig/v1/dynamicconfig_service.proto",
}
